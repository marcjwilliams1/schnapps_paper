[["index.html", "Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Section 1 Foreword 1.1 Data 1.2 Computing requirements", " Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Marc J. Williams 2021-05-30 Section 1 Foreword This document contains code to fully reproduce the figures of our paper: Evolutionary tracking of cancer haplotypes at single-cell resolution. 1.1 Data The analysis contained here starts from a set of processed results which include: allele specific copy number per cell in 500Kb bins across the genome (inferred using schnapps) snv counts per cell phylogenetic trees allele imbalance in scRNA (inferred using schnapps) cell and sample metadata 1.2 Computing requirements Most of the heavy lifting has been done in the pre-processing so computing requirements are not too onerous. However, some of the data files are very large and so you will need a computer with a reasonably large amount of RAM. 50Gb or so should be fine. "],["cohort-summary.html", "Section 2 Cohort summary 2.1 Load data + packages 2.2 Summary stats", " Section 2 Cohort summary 2.1 Load data + packages We’ll first load some packages and the data from the OV2295 cell lines. library(tidyverse) library(data.table) library(yaml) library(glue) library(here) here::i_am(&quot;00-cohortstats.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) metrics &lt;- fread(config$metrics) sampletags &lt;- data.frame(sample = unique(metrics$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$label &lt;- unlist(lapply(sampletags$sample, function(x) str_replace(config$datasets[[x]]$label, &quot;\\\\s[0-9].*&quot;, &quot;&quot;))) sampletags$BRCA1 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA1)) sampletags$BRCA2 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA2)) sampletags$TP53 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$TP53)) 2.2 Summary stats Our data is grouped into 2 types - engineered cell lines and tumor samples (either from PDX models or primary tissue). I’ll first generate a table of the coverage and number of cells for each of these datatypes. metrics[, `:=`(htert, ifelse(sample %in% config$datagroups$htert, &quot;hTERT Cell line&quot;, &quot;Tumour&quot;))] %&gt;% filter(!sample %in% c(&quot;SA1101a&quot;, &quot;SA1101b&quot;)) %&gt;% .[, list(ncells = length(unique(cell_id)), cov = median(coverage_depth), cov_cilow = quantile(coverage_depth, 0.025), cov_cihigh = quantile(coverage_depth, 0.975), nsamples = length(unique(sample))), by = c(&quot;htert&quot;)] %&gt;% rename(Datatype = htert, `Coverage (Median)` = cov, `Coverage (2.5%)` = cov_cilow, `Coverage (97.5%)` = cov_cihigh) %&gt;% knitr::kable(.) Datatype ncells Coverage (Median) Coverage (2.5%) Coverage (97.5%) nsamples Tumour 21916 0.048185 0.0128970 0.1921595 23 hTERT Cell line 11097 0.037571 0.0080786 0.0893546 7 Now I’ll make a table for each dataset seperately, adding in the TP53 + BRCA1 status. stats &lt;- metrics[, `:=`(htert, ifelse(sample %in% config$datagroups$htert, &quot;hTERT Cell line&quot;, &quot;Tumour&quot;))] %&gt;% filter(!sample %in% c(&quot;SA1101a&quot;, &quot;SA1101b&quot;)) %&gt;% .[, list(ncells = length(unique(cell_id)), cov = median(coverage_depth), cov_cilow = quantile(coverage_depth, 0.025), cov_cihigh = quantile(coverage_depth, 0.975), nsamples = length(unique(sample_id))), by = c(&quot;sample&quot;, &quot;htert&quot;)] %&gt;% left_join(sampletags) stats %&gt;% mutate(Coverage = paste0(round(cov, 3), &quot; (&quot;, round(cov_cilow, 3), &quot;,&quot;, round(cov_cihigh, 3), &quot;)&quot;)) %&gt;% mutate(genotype = ifelse(htert != &quot;Tumour&quot;, label, &quot;&quot;)) %&gt;% mutate(datagroup = toupper(datagroup)) %&gt;% mutate(Timeseries = &quot;No&quot;) %&gt;% select(sample, htert, datagroup, nsamples, ncells, Coverage, genotype, TP53, BRCA1, BRCA2) %&gt;% rename(Sample = sample, datatype = htert, Histotype = datagroup, Samples = nsamples, Cells = ncells, Genotype = genotype) %&gt;% DT::datatable(., extensions = &quot;FixedColumns&quot;, options = list(scrollX = TRUE, fixedColumns = list(leftColumns = 1))) "],["figure-1.html", "Section 3 Figure 1 3.1 Load data + packages 3.2 Summary stats 3.3 Single cell example 3.4 SNVs 3.5 BAF distributions 3.6 Heatmaps 3.7 Main Figure 3.8 RNA vs DNA", " Section 3 Figure 1 3.1 Load data + packages We’ll first load some packages and the data from the OV2295 cell lines. library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) here::i_am(&quot;01-figure1.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) OV2295 &lt;- readRDS(file.path(glue(&quot;{config$Rdatadir}2295.Rdata&quot;))) metrics &lt;- fread(config$metrics) 3.2 Summary stats I’ll first pull out the quantiles of coverage depth per cell in the OV2295 dataset. quantile(metrics[sample == &quot;2295&quot;]$coverage_breadth, c(0.025, 0.05, 0.5, 0.95, 0.975)) ## 2.5% 5% 50% 95% 97.5% ## 0.05686473 0.07798642 0.15582348 0.25419909 0.26174963 3.3 Single cell example Here is an example allele specific copy number profile from a single cell. cells &lt;- metrics[sample == &quot;2295&quot;] %&gt;% arrange(desc(coverage_breadth)) %&gt;% filter(coverage_breadth &lt; 0.1) celldat &lt;- plotCNprofileBAF(OV2295$ascn$data %&gt;% filter(state_phase != &quot;B-Hom&quot;), y_axis_trans = &quot;squashy&quot;, maxCN = 20, cellid = cells$cell_id[5], pointsize = 0.6, returnlist = TRUE) BAFcolpal &lt;- scCNphase_cols()[c(1, 3, 5)] legends &lt;- cowplot::plot_grid(NULL, get_legend(celldat$CN + theme_cowplot(font_size = 12, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), get_legend(celldat$BAF + theme_cowplot(font_size = 12) + guides(col = guide_legend(&quot;ASCN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), NULL, ncol = 4, rel_widths = c(0.1, 1, 1, 4)) (gcell &lt;- cowplot::plot_grid(celldat$BAF + theme(legend.position = &quot;none&quot;), celldat$CN + theme(legend.position = &quot;none&quot;) + ggplot2::scale_y_continuous(breaks = c(0, 2, 5, 10, 20), limits = c(0, 24), trans = &quot;squashy&quot;), cowplot::plot_grid(legends, NULL, ncol = 1, rel_heights = c(1, 0.5)), align = &quot;v&quot;, ncol = 1, rel_heights = c(1, 1, 0.22))) Figure 3.1: Single cell example 3.4 SNVs To confirm that the allele specific inference is accurate we looked at single nucleotide variant allele frequencies per allele specific copy number state. Here, I’ll read in the SNV data and map the SNVs to allele specific states. snv &lt;- snv_states(select(OV2295$SNVCN, chr, start, ref, alt, cell_id, ref_counts, alt_counts) %&gt;% mutate(end = start), OV2295$ascn$data) %&gt;% na.omit() %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) blacklist &lt;- fread(&quot;data/dlp_snv_blacklist.csv&quot;) snv_summary &lt;- snv %&gt;% group_by(state_AS_phased, state, chr, start, ref, alt, LOH, Maj, Min, sample_id) %&gt;% summarise(ref_counts = sum(ref_counts), alt_counts = sum(alt_counts)) %&gt;% ungroup() %&gt;% mutate(totcounts = alt_counts + ref_counts) %&gt;% mutate(type = case_when(Maj == Min ~ &quot;Balanced&quot;, Min == 0 ~ &quot;LOH&quot;, Min != Maj ~ &quot;Unbalanced&quot;)) %&gt;% mutate(VAF = alt_counts/(totcounts)) %&gt;% group_by(chr, start, ref) %&gt;% mutate(n_sample_id = length(unique(sample_id))) %&gt;% ungroup() %&gt;% left_join(., OV2295$SNVannot) %&gt;% filter(max_strelka_score &gt; 20 &amp; max_museq_score &gt; 0.9) %&gt;% filter(!start %in% blacklist$start) %&gt;% filter(!is.na(mappability)) Now we can plot the distributions. library(ggridges) dfdata &lt;- data.frame( type = c( &quot;Balanced&quot;, &quot;LOH&quot;, &quot;Unbalanced&quot;, &quot;Unbalanced&quot;, &quot;Unbalanced&quot;, &quot;Unbalanced&quot; ), x = c( 0.5, 1.0, 1 / 3, 2 / 3, 1 / 4, 3 / 4 ) ) dfdata &lt;- data.frame( type = c(&quot;Balanced&quot;, &quot;LOH&quot;), x = c(0.5, 1.0) ) dat_text &lt;- data.frame(type = c(&quot;Unbalanced&quot;, &quot;Unbalanced&quot;), label = c(&quot;Early&quot;, &quot;Late&quot;), x = c(0.85, 0.15)) x &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% # filter(clone_id == &quot;D&quot;) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 200) %&gt;% # filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 50) (gVAF &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% # filter(clone_id == &quot;D&quot;) %&gt;% filter(is_dbsnp == 0, mappability &gt; 0.99) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 100) %&gt;% # filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 100) %&gt;% ggplot(aes(fill = type, col = type)) + # geom_density_ridges(scale = 2, alpha = 0.3, stat = &quot;binline&quot;, bins = 50) + geom_density_ridges(aes(y = state_AS_phased, x = VAF), scale = 2, alpha = 0.3) + theme_ridges(center_axis_labels = TRUE) + geom_vline(data = dfdata, aes(xintercept = x), lty = 2, col = &quot;grey40&quot;) + scale_x_continuous(breaks = c(0.0, 0.5, 1.0)) + scale_color_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + scale_fill_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + xlab(&quot;Variant allele frequency (somatic mutations)&quot;) + ylab(&quot;Allele specific state&quot;) + facet_wrap(~type, scales = &quot;free_y&quot;) + panel_border() + theme(legend.position = &quot;none&quot;) + geom_text(data = dat_text, aes(label = label, x = x, y = 9.3), col = &quot;black&quot;)) Figure 3.2: VAF distributions per allele specific state for OV2295 3.5 BAF distributions Another sanity check is to plot the BAF distribution per state. gBAF &lt;- plotBAFperstate(OV2295$hscn$data %&gt;% filter(phase != &quot;B&quot;, state &gt; 0), maxstate = 10, minfrac = 0) + scale_y_continuous(limits = c(0, 0.75), breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(legend.position = &quot;none&quot;) + xlab(&quot;Allele specific state&quot;) gBAF Figure 3.3: BAF distributions per allele specific state for OV2295 3.6 Heatmaps Now I’ll plot the heatmaps. library(grid) library(ComplexHeatmap) source(here(&quot;src/tree_utils.R&quot;)) chroms &lt;- unique(OV2295$hscn$data$chr) chroms &lt;- chroms[!chroms %in% c(&quot;14&quot;, &quot;16&quot;, &quot;18&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;)] mysample &lt;- &quot;2295&quot; tree &lt;- get_and_format_tree(&quot;2295&quot;) tree &lt;- ape::compute.brlen(tree, 1) mycl &lt;- data.frame(cell_id = tree$tip.label, clone_id = &quot;0&quot;) cndat &lt;- OV2295$ascn$data hm_state &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state&quot;, sample_label_idx = 1, # library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = FALSE, clusters = mycl, normalize_tree = FALSE, plottree = TRUE, plotfrequency = FALSE, ) hm_copy &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;copy&quot;, sample_label_idx = 2, # library_mapping = lab_mapping, show_library_label = FALSE, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, # library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF2 &lt;- plotHeatmap(OV2295$hscn$data, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, # library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAFraw &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;BAF&quot;, sample_label_idx = 2, show_library_label = FALSE, # library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) w &lt;- 40 h &lt;- 13 / 3 hm &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hm_state + hm_BAF, ht_gap = unit(0.6, &quot;cm&quot;), # column_title = &quot;Chr20&quot;, # column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE ), width = w, height = h ) cowplot::plot_grid(hm) Figure 3.4: Heatmaps for OV2295 ordered by phylogeny 3.7 Main Figure Here I’ll contruct the final figure used in the paper. library(cowplot) library(grid) library(ComplexHeatmap) top1 &lt;- cowplot::plot_grid(gcell, labels = c(&quot;a&quot;)) top2 &lt;- cowplot::plot_grid(gBAF, gVAF, labels = c(&quot;b&quot;, &quot;c&quot;)) w &lt;- 40 h &lt;- 13/3 hm_cowp &lt;- cowplot::plot_grid(NULL, hm, rel_widths = c(0.04, 1), labels = c(&quot;d&quot;, &quot;&quot;)) gall &lt;- cowplot::plot_grid(top1, top2, hm_cowp, ncol = 1) gall Figure 3.5: Figure 1 3.8 RNA vs DNA rna &lt;- fread(config$rna_2295_counts) rnacells &lt;- rna %&gt;% group_by(cell_id) %&gt;% summarise(x = sum(total)) %&gt;% arrange(desc(x)) hmrna &lt;- plotHeatmapBAF(rna %&gt;% filter(cell_id %in% rnacells$cell_id[1:2000]), arms = unique(rna$chrarm) ) chrarm &lt;- schnapps::per_chrarm_cn(OV2295$hscn$data, arms = unique(rna$chrarm)) hmdna &lt;- plotHeatmapBAF(OV2295$hscn$data, arms = unique(rna$chrarm)) hm_dnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmdna, ht_gap = unit(0.6, &quot;cm&quot;), # column_title = &quot;Chr20&quot;, # column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE ), width = w, height = h ) hm_rnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmrna, ht_gap = unit(0.6, &quot;cm&quot;), # column_title = &quot;Chr20&quot;, # column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE ), width = w, height = h ) grnahmps &lt;- plot_grid(NULL, hm_dnag, NULL, hm_rnag, ncol = 1, labels = c(&quot;a DNA&quot;, &quot;&quot;, &quot;b RNA&quot;), rel_heights = c(0.1, 1, 0.1, 1)) seur &lt;- readRDS(config$rna_2295) cell_sample_rna &lt;- seur@meta.data cell_sample_rna$cell_id &lt;- row.names(cell_sample_rna) cell_sample_rna &lt;- select(cell_sample_rna, cell_id, sample) rna &lt;- rna %&gt;% left_join(cell_sample_rna) dna_baf &lt;- chrarm dna_baf &lt;- dna_baf %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) %&gt;% rename(sample = sample_id, total = totalcounts) %&gt;% mutate(patient = &quot;2295&quot;) %&gt;% select(chrarm, sample, BAF, total) dfbaf_joint &lt;- bind_rows(dna_baf %&gt;% mutate(dtype = &quot;DNA&quot;), rna %&gt;% select(chrarm, sample, BAF, total) %&gt;% mutate(dtype = &quot;RNA&quot;)) dfbaf_join_summary &lt;- dfbaf_joint %&gt;% filter(total &gt; 9) %&gt;% group_by(chrarm, dtype, sample) %&gt;% summarise(total = mean(total), BAF = median(BAF)) %&gt;% pivot_wider(names_from = &quot;dtype&quot;, values_from = c(&quot;BAF&quot;, &quot;total&quot;)) corrplot &lt;- dfbaf_join_summary %&gt;% filter(chrarm != &quot;X&quot;, !is.na(sample)) %&gt;% # filter(total_RNA &gt; 10) %&gt;% ggplot(aes(x = BAF_DNA, y = BAF_RNA)) + geom_point(aes(col = sample)) + xlab(&quot;Median BAF per chr \\n (DNA)&quot;) + ylab(&quot;Median BAF per chr \\n (RNA)&quot;) + geom_abline(lty = 2) + theme_cowplot() + scale_color_manual(values = c(&quot;plum4&quot;, &quot;firebrick3&quot;, &quot;deepskyblue2&quot;)) + theme(legend.title = element_blank(), legend.position = c(0.25, 0.8)) #+geom_smooth(method = &#39;lm&#39;) gall &lt;- plot_grid(grnahmps, plot_grid(NULL, corrplot, NULL, rel_heights = c(0.4, 1, 0.4), ncol = 1, labels = c(&quot;&quot;, &quot;c&quot;)), ncol = 2, rel_widths = c(1, 0.5)) gall Figure 3.6: Comparison of allele imbalance in RNA vs DNA "],["figure-2.html", "Section 4 Figure 2 4.1 Load data + packages 4.2 PCAWG data 4.3 Frequency plots 4.4 Correlation analysis 4.5 Ratios 4.6 Frequency per CCF 4.7 TP53 + BRCA snvs 4.8 Fraction of genome gained 4.9 Chromosome event rates 4.10 Composite figure", " Section 4 Figure 2 4.1 Load data + packages library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) library(yaml) here::i_am(&quot;02-figure2.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) theme_set(theme_cowplot()) hscn &lt;- fread(config$hscn) hscn &lt;- hscn[!is.na(sample)] ploidy &lt;- fread(config$ploidy) hscn &lt;- hscn[ploidy, on = &quot;cell_id&quot;] sampletags &lt;- data.frame(sample = unique(hscn$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$sig_label &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$label)) 4.2 PCAWG data In this figure we compare copy number landscapes to those observed in PCAWG. So I’ll first read in the PCAWG copy number data and bin the data so it’s easy to compare with our single cell data. source(here(&quot;src/cn_utils.R&quot;)) pcawg &lt;- fread(here(&quot;data/pcawg.csv&quot;)) %&gt;% dplyr::rename(chr = chromosome) ploidy &lt;- fread(here(&quot;data/pcawg.consensus.20170217.purity.ploidy.txt&quot;)) %&gt;% dplyr::rename(sample = samplename) pcawg &lt;- left_join(pcawg, ploidy) # bin data both_bins &lt;- getCNstate(pcawg %&gt;% filter(cancertype == &quot;OV&quot; | cancertype == &quot;BRCA&quot;) %&gt;% dplyr::rename(cell_id = sample), ncores = 20) both_bins &lt;- both_bins %&gt;% as.data.table() %&gt;% na.omit() %&gt;% group_by(chr, start, end, cell_id, ploidy) %&gt;% summarize(total_cn = mean(total_cn), minor_cn = mean(minor_cn)) %&gt;% ungroup() plboth &lt;- both_bins %&gt;% as.data.table() %&gt;% .[chr != &quot;Y&quot;] %&gt;% .[, list(gain = sum(total_cn &gt; round(ploidy), na.rm = TRUE)/.N, loss = sum(total_cn &lt; round(ploidy), na.rm = TRUE)/.N, loh = sum(minor_cn == 0, na.rm = TRUE)/.N, n = .N), by = .(chr, start, end)] %&gt;% plottinglist_() Here is the landscape of CNAs in the PCAWG cohort for BRCA + OV. genplot(plboth, &quot;PCAWG&quot;, alphaval = 0.5, ylabel = &quot;Cohort fraction&quot;) Figure 4.1: PCAWG landscape 4.3 Frequency plots We want to compare the landscape of alterations that are clonal to those that are rare. So here, for each bin I’ll compute the fraction of samples that have a clonal (CCF &gt; 0.95) event and events at CCF &gt; 0.01. Here an “event” is a gain or loss relative to cell ploidy or LOH. LOH is defined as a bin where either allele is absent so includes monosomies, copy neutral LOH and LOH + gains. library(ggrepel) cutoffhigh &lt;- 0.95 cutofflow &lt;- 0.01 pl &lt;- hscn %&gt;% .[!is.na(chr)] %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, gainLOH = sum(state &gt; ploidy &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, lossLOH = sum(state == 2 &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, LOH = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(gain_clonal = sum(gain &gt;= cutoffhigh, na.rm = TRUE)/.N, gain_rare = sum(gain &gt;= cutofflow, na.rm = TRUE)/.N, gain_clonal_loh = sum(gainLOH &gt;= cutoffhigh, na.rm = TRUE)/.N, gain_rare_loh = sum(gainLOH &lt;= cutofflow &amp; gainLOH &gt; 0, na.rm = TRUE)/.N, loh_clonal = sum(LOH &gt;= cutoffhigh, na.rm = TRUE)/.N, loh_rare = sum(LOH &gt;= cutofflow, na.rm = TRUE)/.N, loss_clonal = sum(loss &gt;= cutoffhigh, na.rm = TRUE)/.N, loss_rare = sum(loss &gt;= cutofflow, na.rm = TRUE)/.N, loss_clonal_loh = sum(lossLOH &gt;= cutoffhigh, na.rm = TRUE)/.N, loss_rare_loh = sum(lossLOH &lt; cutofflow &amp; lossLOH &gt; 0, na.rm = TRUE)/.N), by = .(chr, start, end)] %&gt;% plottinglist_() 4.3.1 Clonal frequencies With this data I’ll generate some frequency track plots, annotating some genes of interest. Firstly for gains. alphaval &lt;- 0.5 textsize &lt;- 2 filltype &lt;- &quot;stack&quot; # &#39;identity&#39; datgain &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;gain_clonal&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) genesgain &lt;- gene_regions %&gt;% filter(oncogene == TRUE | tumor_suppressor == TRUE) %&gt;% filter(ensembl_gene_symbol %in% c(&quot;MYC&quot;, &quot;KRAS&quot;, &quot;PIK3CA&quot;, &quot;CCNE1&quot;)) %&gt;% mutate(start = floor(start/5e+05) * 5e+05 + 1, end = floor(start/5e+05) * 5e+05 + 5e+05) %&gt;% mutate(chr = str_remove_all(chr, &quot;chr&quot;)) genesgain &lt;- left_join(genesgain, datgain, by = c(&quot;chr&quot;, &quot;start&quot;, &quot;end&quot;)) %&gt;% group_by(chr, start, end, ensembl_gene_symbol, idx) %&gt;% summarise(frequency = sum(frequency)) %&gt;% ungroup() cgains &lt;- datgain %&gt;% filter(str_detect(type, &quot;gain_clonal&quot;)) %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE)) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + scale_fill_manual(values = c(&quot;#550000&quot;), labels = c(&quot;Gain&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + geom_label_repel(data = genesgain, aes(x = idx, label = ensembl_gene_symbol), force = 10, alpha = 0.75, segment.color = &quot;black&quot;, size = textsize, segment.size = 0.3, min.segment.length = 0.01, ylim = c(0.68, NA), direction = &quot;both&quot;, nudge_y = 0) Now for losses: datloss &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loss_clonal&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) genesloss &lt;- gene_regions %&gt;% filter(oncogene == TRUE | tumor_suppressor == TRUE) %&gt;% filter(ensembl_gene_symbol %in% c(&quot;TP53&quot;, &quot;RB1&quot;, &quot;BRCA1&quot;, &quot;BRCA2&quot;, &quot;MAP3K1&quot;)) %&gt;% mutate(start = floor(start/5e+05) * 5e+05 + 1, end = floor(start/5e+05) * 5e+05 + 5e+05) %&gt;% mutate(chr = str_remove_all(chr, &quot;chr&quot;)) genesloss &lt;- left_join(genesloss, datloss, by = c(&quot;chr&quot;, &quot;start&quot;, &quot;end&quot;)) %&gt;% group_by(chr, start, end, ensembl_gene_symbol, idx) %&gt;% summarise(frequency = sum(frequency)) %&gt;% ungroup() closs &lt;- datloss %&gt;% ggplot(aes(x = idx, y = -frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE), position = &quot;top&quot;) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;#28536C&quot;, &quot;#032336&quot;), labels = c(&quot;Loss&quot;, &quot;Copy Neutral LOH&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, -0.5, -1), labels = c(&quot;0.0&quot;, &quot;0.5&quot;, &quot;1.0&quot;), limits = c(-1, 0)) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.title = element_blank()) + geom_label_repel(data = genesloss, aes(x = idx, label = ensembl_gene_symbol), alpha = 0.7, force = 10, segment.color = &quot;black&quot;, size = textsize, segment.size = 0.3, min.segment.length = 0.01, ylim = c(NA, -0.7), direction = &quot;both&quot;, nudge_y = 0) + guides(guide = ggplot2::guide_axis(check.overlap = TRUE)) And finally for LOH datloh &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loh_clonal&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) genesloh &lt;- gene_regions %&gt;% filter(oncogene == TRUE | tumor_suppressor == TRUE) %&gt;% filter(ensembl_gene_symbol %in% c(&quot;RB1&quot;, &quot;BRCA2&quot;)) %&gt;% mutate(start = floor(start/5e+05) * 5e+05 + 1, end = floor(start/5e+05) * 5e+05 + 5e+05) %&gt;% mutate(chr = str_remove_all(chr, &quot;chr&quot;)) genesloh &lt;- left_join(genesloh, datloh, by = c(&quot;chr&quot;, &quot;start&quot;, &quot;end&quot;)) %&gt;% group_by(chr, start, end, ensembl_gene_symbol, idx) %&gt;% summarise(frequency = sum(frequency)) %&gt;% ungroup() cloh &lt;- datloh %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE), position = &quot;bottom&quot;) + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;Grey70&quot;), labels = c(&quot;LOH&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + geom_label_repel(data = genesloh, aes(x = idx, label = ensembl_gene_symbol), force = 10, alpha = 0.7, segment.color = &quot;black&quot;, size = textsize, segment.size = 0.3, min.segment.length = 0.01, ylim = c(0.6, NA), direction = &quot;both&quot;, nudge_y = 0) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) And here are the plots. title &lt;- ggdraw() + draw_label( &quot;CCF &gt; 95 %&quot;, fontface = &quot;bold&quot;, x = 0.01, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) clonal &lt;- cowplot::plot_grid( title, cloh + theme(legend.position = c(0.05, 0.9)), cgains + theme(legend.position = c(0.05, 0.9)) + ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = c(0.05, 0.1)), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8) ) clonal Figure 4.2: Landscape at CCF &gt; 95% We can also add on the PCAWG frequencies to compare. pcawglinesize &lt;- 0.3 clonal_pcawg &lt;- cowplot::plot_grid(title, cloh + theme(legend.position = c(0.05, 0.7)) + geom_line(data = plboth$CNbins, aes(x = idx, y = loh, col = &quot;PCAWG&quot;), size = pcawglinesize) + scale_color_manual(values = &quot;Grey50&quot;), cgains + theme(legend.position = c(0.05, 0.9)) + geom_line(data = plboth$CNbins, aes(x = idx, y = gain), col = &quot;#550000&quot;, size = pcawglinesize) + ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = c(0.05, 0.1)) + geom_line(data = plboth$CNbins, aes(x = idx, y = -loss), col = &quot;#28536C&quot;, size = pcawglinesize), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8)) clonal_pcawg Figure 4.3: Landscape at CCF &gt; 95% with PCAWG 4.3.2 Subclonal frequencies Now I’ll generate the same plot but using CCF &gt; 1% as a cutoff. datgain &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;gain_rare&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) genesgain2 &lt;- genesgain %&gt;% left_join(datgain, by = c(&quot;chr&quot;, &quot;start&quot;, &quot;end&quot;, &quot;idx&quot;)) %&gt;% mutate(ystart = pmin(0.99, frequency.y + 0.1)) cgains &lt;- datgain %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), guide = guide_axis(check.overlap = TRUE), limits = c(pl$minidx, pl$maxidx)) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;#550000&quot;), labels = c(&quot;Gain&quot;)) + # geom_vline(data = genesgain, aes(xintercept = idx), lty = 2, col = &#39;grey100&#39;) + geom_segment(data = genesgain2, aes(xend = idx, x = idx - 250, y = ystart, yend = frequency.y), arrow = arrow(length = unit(0.1, &quot;cm&quot;), type = &quot;closed&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + guides(guide = ggplot2::guide_axis(check.overlap = TRUE)) datloss &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loss_rare&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) closs &lt;- datloss %&gt;% ggplot(aes(x = idx, y = -frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), guide = guide_axis(check.overlap = TRUE), limits = c(pl$minidx, pl$maxidx), position = &quot;top&quot;) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;#28536C&quot;), labels = c(&quot;Loss&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, -0.5, -1), labels = c(&quot;0&quot;, &quot;0.5&quot;, &quot;1.0&quot;), limits = c(-1, 0)) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.title = element_blank()) + guides(guide = ggplot2::guide_axis(check.overlap = TRUE)) datloh &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loh_rare&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) cloh &lt;- datloh %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE), position = &quot;bottom&quot;) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;Grey70&quot;), labels = c(&quot;LOH&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) title &lt;- ggdraw() + draw_label( &quot;CCF &gt; 1%&quot;, fontface = &quot;bold&quot;, x = 0.01, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) rare &lt;- cowplot::plot_grid( title, cloh + theme(legend.position = &quot;none&quot;), cgains + theme(legend.position = &quot;none&quot;) + ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = &quot;none&quot;), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8) ) rare Figure 4.4: Landscape at CCF &gt; 1% Now with PCAWG. rare_pcawg &lt;- cowplot::plot_grid(title, cloh + theme(legend.position = &quot;none&quot;) + geom_line(data = plboth$CNbins, aes(x = idx, y = loh), col = &quot;Grey50&quot;, size = pcawglinesize), cgains + theme(legend.position = &quot;none&quot;) + geom_line(data = plboth$CNbins, aes(x = idx, y = gain), col = &quot;#550000&quot;, size = pcawglinesize) + ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = &quot;none&quot;) + geom_line(data = plboth$CNbins, aes(x = idx, y = -loss), col = &quot;#28536C&quot;, size = pcawglinesize), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8)) rare_pcawg Figure 4.5: Landscape at CCF &gt; 1% with PCAWG 4.4 Correlation analysis As can be seen from the plots above the clonal landscape plot looks more similar to the PCAWG cohort than when we include any alteration &gt; 1%. To quantify these observations, I’ll now compute the correlation between these landscapes as a function of CCF. library(broom) # CCF frequency cutoff to use freqs &lt;- c(0, 0.01, 0.025, 0.05, seq(0.1, 1, 0.1)) df_corr &lt;- data.frame() plotsboth &lt;- list() plotscor &lt;- list() plboth_orig &lt;- plboth plboth$CNbins &lt;- plboth$CNbins %&gt;% dplyr::rename(gain_pcawg = gain, loss_pcawg = loss, loh_pcawg = loh) for (x in 1:(length(freqs) - 1)) { print(freqs[x]) # compute fraction of cohort that has an event &gt; x CCF per bin plboth_sc &lt;- hscn %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, loh = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(gain = sum(gain &gt;= freqs[x] &amp; gain &gt; 0, na.rm = TRUE)/.N, loss = sum(loss &gt;= freqs[x] &amp; loss &gt; 0, na.rm = TRUE)/.N, loh = sum(loh &gt;= freqs[x] &amp; loh &gt; 0, na.rm = TRUE)/.N), by = .(chr, start, end)] %&gt;% plottinglist_() joint_both &lt;- left_join(plboth$CNbins, plboth_sc$CNbins) joint_both_narm &lt;- left_join(plboth$CNbins, plboth_sc$CNbins) %&gt;% na.omit() gainplot &lt;- joint_both %&gt;% na.omit() %&gt;% sample_n(1000) %&gt;% ggplot(aes(x = gain, y = gain_pcawg)) + geom_point(alpha = 0.5, col = &quot;#550000&quot;) + geom_smooth(method = &quot;lm&quot;, col = &quot;#550000&quot;) + xlab(&quot;scDNAseq Frequency&quot;) + ylab(&quot;PCAWG Frequency&quot;) + cowplot::theme_cowplot() + ylim(c(0, 1)) + xlim(c(0, 1)) lossplot &lt;- joint_both %&gt;% na.omit() %&gt;% sample_n(1000) %&gt;% ggplot(aes(x = loss, y = loss_pcawg)) + geom_point(alpha = 0.5, col = &quot;#28536C&quot;) + geom_smooth(method = &quot;lm&quot;, col = &quot;#28536C&quot;) + xlab(&quot;scDNAseq Frequency&quot;) + ylab(&quot;PCAWG Frequency&quot;) + cowplot::theme_cowplot() + ylim(c(0, 1)) + xlim(c(0, 1)) lohplot &lt;- joint_both %&gt;% na.omit() %&gt;% sample_n(1000) %&gt;% ggplot(aes(x = loh, y = loh_pcawg)) + geom_point(alpha = 0.5, col = &quot;grey40&quot;) + geom_smooth(method = &quot;lm&quot;, col = &quot;grey90&quot;) + xlab(&quot;scDNAseq Frequency&quot;) + ylab(&quot;PCAWG Frequency&quot;) + cowplot::theme_cowplot() + ylim(c(0, 1)) + xlim(c(0, 1)) plotscor[[paste0(&quot;f &gt; &quot;, freqs[x])]] &lt;- list(gainplot = gainplot, lossplot = lossplot, lohplot = lohplot) # compute correlation and entropy df_corr &lt;- bind_rows(df_corr, data.frame(bin = paste0(&quot;(&quot;, freqs[x], &quot;, &quot;, freqs[x + 1], &quot;)&quot;), cutoff = freqs[x], cor_gain = cor(joint_both$gain, joint_both$gain_pcawg, use = &quot;complete.obs&quot;), cor_loss = cor(joint_both$loss, joint_both$loss_pcawg, use = &quot;complete.obs&quot;), cor_loh = cor(joint_both$loh, joint_both$loh_pcawg, use = &quot;complete.obs&quot;), entropy_gain = entropy::entropy(joint_both_narm$gain + 1e-04), entropy_loss = entropy::entropy(joint_both_narm$loss + 1e-04), entropy_loh = entropy::entropy(joint_both_narm$loh + 1e-04), cancertype = &quot;both&quot;)) plotsboth[[x]] &lt;- genplot(plboth_sc, paste0(&quot;CCF &gt; &quot;, freqs[x]), pcawg = plboth_orig) } ## [1] 0 ## [1] 0.01 ## [1] 0.025 ## [1] 0.05 ## [1] 0.1 ## [1] 0.2 ## [1] 0.3 ## [1] 0.4 ## [1] 0.5 ## [1] 0.6 ## [1] 0.7 ## [1] 0.8 ## [1] 0.9 Now I’ll plot the correlation as a function of CCF (pcawgcorr &lt;- df_corr %&gt;% pivot_longer(starts_with(&quot;cor_&quot;), names_to = &quot;type&quot;, values_to = &quot;cor&quot;) %&gt;% ggplot(aes(x = cutoff, y = cor, col = type)) + geom_point() + geom_line() + scale_color_manual( values = c(&quot;#550000&quot;, &quot;grey60&quot;, &quot;#28536C&quot;), labels = c(&quot;Gains&quot;, &quot;LOH&quot;, &quot;Losses&quot;) ) + theme_cowplot(line_size = 0.9) + scale_x_continuous(breaks = seq(0.0, 1.0, 0.25), limits = c(0.0, 1.0)) + xlab(&quot;CCF &gt; X&quot;) + # panel_border() + ylab(&quot;Correlation with PCAWG landscape&quot;) + ylim(c(0.5, 0.9)) + # scale_x_log10() + theme_cowplot(font_size = 12) + theme(legend.position = c(0.7, 0.1), legend.title = element_blank())) Figure 4.6: rho as a function of CCF # facet_wrap(~cancertype, ncol = 2)) I also computed the entropy of these distributions. Here we see that the entropy decreases as a function of CCF, intuitively more uniform disributions should have higher entropy so it makes sense that the lower CCF has higher entropy. df_corr %&gt;% pivot_longer(starts_with(&quot;ent&quot;), names_to = &quot;type&quot;, values_to = &quot;cor&quot;) %&gt;% ggplot(aes(x = cutoff, y = cor, col = type)) + geom_point() + geom_line() + scale_color_manual(values = c(&quot;#550000&quot;, &quot;grey60&quot;, &quot;#28536C&quot;), labels = c(&quot;Gains&quot;, &quot;LOH&quot;, &quot;Losses&quot;)) + theme_cowplot(line_size = 0.9) + scale_x_continuous(breaks = seq(0, 1, 0.25), limits = c(0, 1)) + xlab(&quot;CCF &gt; X&quot;) + ylab(&quot;Entropy of distribution&quot;) + # ylim(c(0.2, 1.0)) + scale_x_log10() + theme(legend.position = c(0.7, 0.1), legend.title = element_blank()) + theme(panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1)) Figure 4.7: Entropy as a function of CCF Here I’ll plot the actual correlation scatter plots. title1 &lt;- ggdraw() + draw_label( &quot;CCF &gt; 1 %&quot;, fontface = &quot;bold&quot;, x = 0.05, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) title2 &lt;- ggdraw() + draw_label( &quot;CCF &gt; 20 %&quot;, fontface = &quot;bold&quot;, x = 0.05, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) title3 &lt;- ggdraw() + draw_label( &quot;CCF &gt; 90 %&quot;, fontface = &quot;bold&quot;, x = 0.05, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) cowplot::plot_grid(title1, cowplot::plot_grid(plotlist = plotscor$`f &gt; 0.01`, ncol = 3), title2, cowplot::plot_grid(plotlist = plotscor$`f &gt; 0.2`, ncol = 3), title3, cowplot::plot_grid(plotlist = plotscor$`f &gt; 0.9`, ncol = 3), ncol = 1, rel_heights = c(0.1, 1, 0.1, 1, 0.1, 1) ) Figure 4.8: Correlation plots 4.5 Ratios pl &lt;- hscn %&gt;% .[!is.na(chr)] %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(gain_clonal = sum(gain &gt;= 0.95, na.rm = TRUE)/.N, gain_rare = sum(gain &lt; 0.01, na.rm = TRUE)/.N), by = .(chr, start, end)] %&gt;% plottinglist_() datgain1 &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;gain_rare&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) %&gt;% select(-n, -x, -idxs) datgain2 &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;gain_clonal&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) %&gt;% select(-n, -x, -idxs) freqs &lt;- c(0, 0.01, 0.025, 0.05, seq(0.1, 0.9, 0.1), 0.95) chrdf &lt;- data.frame() mygenes &lt;- gene_regions %&gt;% mutate(start = floor(start/5e+05) * 5e+05 + 1, end = floor(start/5e+05) * 5e+05 + 5e+05) %&gt;% select(chr, start, end, oncogene, ensembl_gene_symbol) for (x in freqs) { print(x) plboth_sc &lt;- hscn %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(gain = sum(gain &gt;= x &amp; gain &gt; 0, na.rm = TRUE)/.N), by = .(chr, start, end)] %&gt;% plottinglist_() datgain1 &lt;- plboth_sc$CNbins %&gt;% mutate(frequency = gain) %&gt;% arrange(chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) %&gt;% select(-n, -x, -idxs) chrlevel &lt;- datgain1 %&gt;% group_by(chr) %&gt;% mutate(chrave = mean(frequency, na.rm = T)) %&gt;% left_join(mygenes) %&gt;% mutate(ratio = frequency/chrave) %&gt;% group_by(ensembl_gene_symbol, oncogene) %&gt;% summarize(ratio = mean(ratio)) %&gt;% mutate(ccf = x) chrdf &lt;- bind_rows(chrdf, chrlevel) } ## [1] 0 ## [1] 0.01 ## [1] 0.025 ## [1] 0.05 ## [1] 0.1 ## [1] 0.2 ## [1] 0.3 ## [1] 0.4 ## [1] 0.5 ## [1] 0.6 ## [1] 0.7 ## [1] 0.8 ## [1] 0.9 ## [1] 0.95 genedf &lt;- chrdf %&gt;% filter(ccf == 0.95 &amp; oncogene == TRUE) %&gt;% arrange(desc(ratio)) genedf &lt;- chrdf %&gt;% filter(ensembl_gene_symbol %in% c(&quot;CCNE1&quot;, &quot;MYC&quot;, &quot;KRAS&quot;, &quot;PIK3CA&quot;)) genedfaxis &lt;- filter(genedf, ccf == 0.95) %&gt;% mutate(ratio = ifelse(ensembl_gene_symbol == &quot;KRAS&quot;, ratio + 0.3, ratio)) oncogenes &lt;- chrdf %&gt;% filter(oncogene == TRUE) %&gt;% ggplot(aes(x = ccf, y = ratio, group = ensembl_gene_symbol)) + geom_line(col = &quot;grey10&quot;, alpha = 0.1) + geom_line(data = genedf, col = &quot;firebrick4&quot;) + scale_y_continuous(expand = c(0, 0), sec.axis = dup_axis(breaks = genedfaxis$ratio, labels = genedfaxis$ensembl_gene_symbol, name = NULL)) + scale_x_continuous(expand = c(0, 0)) + theme_cowplot(font_size = 12) + theme(panel.border = element_blank(), axis.line.y.right = element_blank(), axis.ticks.y.right = element_blank()) + xlab(&quot;CCF &gt; X&quot;) + ylab(&quot;Gene to chr ratio&quot;) allgenes &lt;- chrdf %&gt;% ggplot(aes(x = ccf, y = ratio, group = ensembl_gene_symbol)) + geom_line(col = &quot;grey10&quot;, alpha = 0.01) + geom_line(data = genedf, col = &quot;firebrick4&quot;, size = 2) + scale_y_continuous(expand = c(0, 0), sec.axis = dup_axis(breaks = genedfaxis$ratio, labels = genedfaxis$ensembl_gene_symbol, name = NULL)) + scale_x_continuous(expand = c(0, 0)) + theme(panel.border = element_blank(), axis.line.y.right = element_blank()) + xlab(&quot;CCF &gt; X&quot;) + ylab(&quot;Ratio: gene to chromosome&quot;) generank &lt;- chrdf %&gt;% filter(ccf == 0.95) %&gt;% arrange(desc(ratio)) %&gt;% mutate(rank = 1:n()) %&gt;% mutate(frank = rank/max(rank)) %&gt;% filter(ensembl_gene_symbol %in% c(&quot;CCNE1&quot;, &quot;MYC&quot;, &quot;KRAS&quot;, &quot;PIK3CA&quot;)) 4.6 Frequency per CCF plot_list &lt;- list(plotsboth[[1]], plotsboth[[5]], plotsboth[[7]], plotsboth[[9]], plotsboth[[13]]) cowplot::plot_grid(plotlist = plot_list, ncol = 1) Figure 4.9: Cohort landscapes as a function of CCF 4.7 TP53 + BRCA snvs Another thing we looked at was the clonality of LOH when we had either a TP53 or BRCA mutation. For the most part 100% of cells were homozygous at these loci. library(tidytext) sampledf &lt;- data.frame(sample = unique(hscn$sample)) %&gt;% mutate(tissue = ifelse(sample %in% config$datagroups$htert, &quot;hTERT&quot;, &quot;TUMOR&quot;)) %&gt;% filter(tissue == &quot;TUMOR&quot;) %&gt;% na.omit(.) sampledf$label &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$label)) sampledf$BRCA1 &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$BRCA1)) sampledf$BRCA2 &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$BRCA2)) sampledf$TP53 &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$TP53)) brca1cn &lt;- gene_copynumber(hscn[sample %in% (filter(sampledf, BRCA1 != FALSE) %&gt;% pull(sample))], &quot;BRCA1&quot;) %&gt;% group_by(sample, ensembl_gene_symbol) %&gt;% summarise(ncells = sum(LOH == &quot;LOH&quot;), fcells = sum(LOH == &quot;LOH&quot;) / n()) TP53cn &lt;- gene_copynumber(hscn[sample %in% (filter(sampledf, TP53 != FALSE) %&gt;% pull(sample))], &quot;TP53&quot;) %&gt;% group_by(sample, ensembl_gene_symbol) %&gt;% summarise(ncells = sum(LOH == &quot;LOH&quot;), fcells = sum(LOH == &quot;LOH&quot;) / n()) forsnvplot &lt;- bind_rows(TP53cn, brca1cn) %&gt;% left_join(sampledf %&gt;% select(sample, TP53, BRCA1) %&gt;% pivot_longer(-sample, names_to = &quot;ensembl_gene_symbol&quot;, values_to = &quot;som_germ&quot;)) %&gt;% mutate(gene = factor(ensembl_gene_symbol, levels = c(&quot;TP53&quot;, &quot;BRCA1&quot;, &quot;BRCA2&quot;))) %&gt;% group_by(gene) %&gt;% mutate(sampleorder = ifelse(som_germ == &quot;Germline&quot;, (1 - fcells - 1), 1 - fcells)) %&gt;% ungroup() %&gt;% mutate( gene = factor(gene), sample2 = reorder_within(sample, sampleorder, gene, .desc = T) ) (gsnv &lt;- forsnvplot %&gt;% ggplot(aes(x = sample2, y = fcells, fill = ensembl_gene_symbol, alpha = som_germ)) + geom_col() + scale_x_discrete() + scale_fill_manual(values = c(&quot;#B02605&quot;, &quot;#135F8C&quot;), name = &quot;Gene&quot;) + xlab(&quot;&quot;) + # &quot;#DB8112&quot;, ylab(&quot;% of cells LOH&quot;) + theme_cowplot(line_size = 0.9, font_size = 10) + scale_alpha_discrete(range = c(0.5, 1), name = &quot;&quot;) + facet_grid(~gene, scales = &quot;free_x&quot;, space = &quot;free_x&quot;) + scale_x_discrete(guide = guide_axis(angle = 45), breaks = forsnvplot$sample2, labels = forsnvplot$sample) + theme( strip.background = element_blank(), strip.text.x = element_blank() )) Figure 4.10: LOH around mutation loci 4.8 Fraction of genome gained I’ll know look what fraction of the genome is altered when we take different CCF cutoffs (95% vs 1%). We find that typically around ~75% of the genome is altered in at least 1% of cells versus more like 20-40% in at least 95% of cells. Note that this does not mean that most cells have 75% of the genome altered, the alterations may be and are indeed likely to be in different cells. plclonal &lt;- hscn %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, gainLOH = sum(state &gt; ploidy &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, lossLOH = sum(state == 2 &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, LOH = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(Gain = sum(gain &gt; 0.95)/.N, Loss = sum(loss &gt; 0.95)/.N, LOH = sum(LOH &gt; 0.95)/.N), by = .(sample)] plsubclonal &lt;- hscn %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, gainLOH = sum(state &gt; ploidy &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, lossLOH = sum(state == 2 &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, LOH = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(Gain = sum(gain &gt; 0.01)/.N, Loss = sum(loss &gt; 0.01)/.N, LOH = sum(LOH &gt; 0.01)/.N), by = .(sample)] (gfrac &lt;- bind_rows(plclonal %&gt;% mutate(x = &quot;&gt;95% cells&quot;), plsubclonal %&gt;% mutate(x = &quot;&gt;1% cells&quot;)) %&gt;% pivot_longer(-c(sample, x)) %&gt;% ggplot(aes(x = name, y = value, fill = x)) + geom_boxplot(alpha = 0.5, width = 0.5, outlier.colour = NA) + geom_jitter(size = 0.5, position = position_jitterdodge(jitter.width = 0.1, jitter.height = 0, dodge.width = 0.5)) + theme_cowplot(font_size = 12) + xlab(&quot;&quot;) + ylab(&quot;% genome altered&quot;) + theme(legend.title = element_blank(), legend.position = &quot;top&quot;) + scale_fill_manual(values = c(&quot;lightsteelblue4&quot;, &quot;plum4&quot;)) + ylim(c(0, 1))) Figure 4.11: Fraction of genome altered 4.9 Chromosome event rates We also developed an approach to compute chromosome event rates using ancestral state reconstruction on the computed phylogenies. We used this to compare the rates of gains/losses and LOH. For the LOH calculation we don’t want to double count losses so we subtract the event rates of losses that result in a single copy. This gives us the event rate LOH where we end up with multiple copies, so copy neutral LOH and LOH + gains. The units of the rate are the number of events per effective cell division, in other words the per cell division rate scaled by the death rate of cells. It’s possible (perhaps likely) that many cells get chromosomal gains or losses but then die, we of course never sample such cells and this makes direct computation of the event rate per cell challenging. See Werner et al Nat. Comms. for discussion of a related problem. We find an event rate of ~0.05 for gains and losses and ~0.01 for LOH. chrs &lt;- fread(config$parsimony) chrs %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) ## # A tibble: 3,450 x 8 ## nnodes ncells sample chr totnnodes cn_input type pars_score ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 629 1031 2295 1 1660 hscn gain/loss 140 ## 2 629 1031 2295 1 1660 hscn loh 70 ## 3 629 1031 2295 1 1660 hscn gain 67 ## 4 629 1031 2295 1 1660 hscn loss 73 ## 5 629 1031 2295 1 1660 hscn loss1copy 0 ## 6 629 1031 2295 2 1660 hscn gain/loss 183 ## 7 629 1031 2295 2 1660 hscn loh 42 ## 8 629 1031 2295 2 1660 hscn gain 92 ## 9 629 1031 2295 2 1660 hscn loss 100 ## 10 629 1031 2295 2 1660 hscn loss1copy 2 ## # … with 3,440 more rows (gmisseg &lt;- chrs %&gt;% filter(!sample %in% config$datagroups$htert) %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) %&gt;% mutate(f = pars_score/ncells) %&gt;% filter(type %in% c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;)) %&gt;% mutate(type = factor(type, levels = c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;))) %&gt;% group_by(sample, type) %&gt;% summarise(f = mean(f)) %&gt;% ggplot(aes(x = type, y = f, fill = type)) + geom_boxplot(alpha = 0.5, width = 0.5, outlier.colour = NA) + theme_cowplot(font_size = 12) + scale_x_discrete(breaks = c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;), labels = c(&quot;Gains&quot;, &quot;Losses&quot;, &quot;LOH&quot;)) + xlab(&quot;&quot;) + ylab(&quot;Chromosome arm\\nevent rate&quot;) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;#28536C&quot;, &quot;grey90&quot;)) + geom_jitter(size = 1, width = 0.1, height = 0) + theme(legend.position = &quot;none&quot;) + ylim(c(0, 0.15))) Figure 4.12: Event rate distributions As a sanity check of these inferences, we can look at our engineered cell lines. We’d expect the BRCA1-/- + TP53 -/- mutant to have a higher event rate relative to WT and for the TP53-/- to have an intermediate event rate. This is exactly what we see. htertlabs &lt;- data.frame(sample = config$datagroups$htert) htertlabs$plot_label &lt;- unlist(lapply(htertlabs$sample, function(x) config$datasets[[x]]$plot_label)) chrs %&gt;% filter(sample %in% config$datagroups$htert) %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) %&gt;% left_join(htertlabs) %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% filter(type != &quot;gain/loss&quot;) %&gt;% filter(type != &quot;loss1copy&quot;) %&gt;% mutate(f = pars_score/ncells) %&gt;% group_by(sample, type, plot_label) %&gt;% summarise(f = mean(f)) %&gt;% ggplot(aes(x = fct_reorder(plot_label, f, .desc = T), y = f, fill = type)) + geom_col(position = &quot;dodge&quot;) + ylab(&quot;Event rate&quot;) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;grey70&quot;, &quot;#28536C&quot;)) + scale_x_discrete(guide = guide_axis(angle = 45)) + xlab(&quot;&quot;) Figure 4.13: Event rates per cell line Here are the event rate for each of the tumour samples. Another sanity check here is that SA1142 is a MMRD sample where we would expect minimal CIN, as would be expected this sample has one of the lowest event rates. chrs %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) %&gt;% filter(!sample %in% config$datagroups$htert) %&gt;% # left_join(htertlabs) %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% filter(type != &quot;gain/loss&quot;) %&gt;% filter(type != &quot;loss1copy&quot;) %&gt;% mutate(f = pars_score/ncells) %&gt;% group_by(sample, type) %&gt;% summarise(f = mean(f)) %&gt;% ggplot(aes(x = fct_reorder(sample, f, .desc = T), y = f, fill = type)) + geom_col(position = &quot;dodge&quot;) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;grey70&quot;, &quot;#28536C&quot;)) + scale_x_discrete(guide = guide_axis(angle = 45)) + xlab(&quot;&quot;) Figure 4.14: Event rates per tumour 4.10 Composite figure Now we have all the figures we can generate the final composite figure we included in the paper. leftplot &lt;- cowplot::plot_grid(clonal_pcawg, # subclonal, NULL, rare_pcawg, ncol = 1, rel_heights = c(1.2, 0.1, 1.2), labels = c(&quot;a&quot;, &quot;&quot;, &quot;b&quot;) ) rightplot &lt;- cowplot::plot_grid( plot_grid(pcawgcorr + theme(legend.position = &quot;none&quot;) + ylab(&quot;Correlation \\n with PCAWG&quot;), oncogenes, labels = c(&quot;&quot;, &quot;d&quot;)), NULL, gfrac, NULL, gmisseg, ncol = 1, labels = c(&quot;c&quot;, &quot;&quot;, &quot;e&quot;, &quot;&quot;, &quot;f&quot;), rel_heights = c(1, 0.05, 1, 0.05, 1)#, align = &quot;v&quot;, axis = &quot;l&quot; ) comp_fig &lt;- plot_grid(cowplot::plot_grid(leftplot, NULL, rightplot, ncol = 3, rel_widths = c(1.1, 0.05, 1))) comp_fig Figure 4.15: Figure 2 "],["figure-3.html", "Section 5 Figure 3 5.1 Load data + packages 5.2 Example parallel events 5.3 Validation using SNVs 5.4 Number of parallel events 5.5 Heatmaps per chromosome 5.6 Effect on the transcriptome 5.7 Composite figure", " Section 5 Figure 3 5.1 Load data + packages library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) library(yaml) here::i_am(&quot;03-figure3.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) theme_set(theme_cowplot()) hscn &lt;- fread(config$hscn) ploidy &lt;- fread(config$ploidy) hscn &lt;- hscn[ploidy, on = &quot;cell_id&quot;] metrics &lt;- fread(config$metrics) %&gt;% select(cell_id, coverage_breadth, state_mode, sample) %&gt;% arrange(desc(coverage_breadth)) sampletags &lt;- data.frame(sample = unique(hscn$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$sig_label &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$label)) clones &lt;- fread(config$clones) snvs &lt;- fread(config$snv) blacklist &lt;- fread(here(&quot;data/dlp_snv_blacklist.csv&quot;)) snvs_filt &lt;- snvs[!start %in% blacklist$start] snvannot &lt;- fread(config$snvannot) 5.2 Example parallel events 5.2.1 Gains Two cells from SA906 with parallel gains on chr17 and chr20. ptsize &lt;- 0.5 cellA &lt;- &quot;SA906-A96211C-R53-C59&quot; exampleAlist &lt;- hscn %&gt;% filter(cell_id %in% cellA) %&gt;% plotCNprofileBAF(., chrfilt = c(&quot;17&quot;, &quot;18&quot;, &quot;19&quot;, &quot;20&quot;), pointsize = ptsize, maxCN = 8, returnlist = TRUE) exampleA &lt;- plot_grid(exampleAlist$BAF + theme_cowplot(font_size = 9) + theme(legend.position = &quot;none&quot;) + ggtitle(&quot;&quot;) + scale_y_continuous(breaks = c(0.0, 0.5, 1.0)) + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()), exampleAlist$CN + ylab(&quot;Copy \\n Number&quot;)+ theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;), align = &quot;v&quot;, ncol = 1, axis = &quot;l&quot;, rel_heights = c(0.8, 1)) cellB &lt;- &quot;SA906-A96155B-R29-C24&quot; exampleBlist &lt;- hscn %&gt;% filter(cell_id %in% cellB) %&gt;% plotCNprofileBAF(., chrfilt = c(&quot;17&quot;, &quot;18&quot;, &quot;19&quot;, &quot;20&quot;), pointsize = ptsize, maxCN = 8, returnlist = TRUE) exampleB &lt;- plot_grid(exampleBlist$BAF + theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;) + ggtitle(&quot;&quot;) + scale_y_continuous(breaks = c(0.0, 0.5, 1.0)) + theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()), exampleBlist$CN + ylab(&quot;Copy \\n Number&quot;)+ theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;), align = &quot;v&quot;, ncol = 1, axis = &quot;l&quot;, rel_heights = c(0.8, 1)) for_legend &lt;- hscn %&gt;% filter(sample == &quot;SA1054&quot;) %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = &quot;SA906b Clone B&quot;) %&gt;% # add dummy cell id plotCNprofileBAF(., chrfilt = c(&quot;17&quot;, &quot;18&quot;, &quot;19&quot;, &quot;20&quot;), pointsize = 2.0, maxCN = 8, returnlist = TRUE) legends &lt;- plot_grid(NULL, get_legend(for_legend$CN + theme_cowplot(font_size = 9) + guides(col = guide_legend(&quot;CN&quot;, nrow = 3, override.aes = list(alpha=1, size = 2, shape = 15)))), get_legend(for_legend$BAF + theme_cowplot(font_size = 9) + guides(col = guide_legend(&quot;ASCN&quot;, nrow = 3, override.aes = list(alpha=1, size = 2, shape = 15)))), NULL, ncol = 1, rel_heights = c(1,1,1,1)) example_cell_hor_gain &lt;- plot_grid(exampleA, exampleB, ncol = 2, rel_heights = c(0.8, 1)) (example_cell_gain &lt;- plot_grid(exampleA, exampleB, ncol = 1, rel_heights = c(1,1))) 5.2.2 Loss Two cells from SA906 with parallel gains on chr2q. exampleAlist &lt;- plotCNprofileBAF(hscn, cellid = &quot;SA906-A96215A-R08-C24&quot;, chrfilt = c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;), pointsize = ptsize, maxCN = 8, returnlist = TRUE) exampleA &lt;- plot_grid(exampleAlist$BAF + theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;) + ggtitle(&quot;&quot;) + scale_y_continuous(breaks = c(0, 0.5, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()), exampleAlist$CN + ylab(&quot;Copy \\n Number&quot;) + theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;), align = &quot;v&quot;, ncol = 1, axis = &quot;l&quot;, rel_heights = c(0.8, 1)) exampleBlist &lt;- plotCNprofileBAF(hscn, cellid = &quot;SA906-A96155B-R27-C08&quot;, chrfilt = c(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;), pointsize = ptsize, maxCN = 8, returnlist = TRUE) exampleB &lt;- plot_grid(exampleBlist$BAF + theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;) + scale_y_continuous(breaks = c(0, 0.5, 1)) + ggtitle(&quot;&quot;) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()), exampleBlist$CN + ylab(&quot;Copy \\n Number&quot;) + theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;), align = &quot;v&quot;, ncol = 1, axis = &quot;l&quot;, rel_heights = c(0.8, 1)) example_cell_hor_loss &lt;- plot_grid(exampleA, exampleB, ncol = 2) (example_cell_loss &lt;- plot_grid(exampleA, exampleB, ncol = 1, rel_heights = c(1, 1))) 5.3 Validation using SNVs We can validate our ability to recover parallel events by looking at the VAF of SNVs in regions of parallel copy number. For example, in a regions that has a parallel lost, we would expect SNVs to have VAF = 0.0 or 1.0 and for these to switch. Conversely in a region with parallel gains where the haplotype specific copy number states are 2|1 and 1|2 we’d expect to see VAF switch from 0.33 to 0.66 and vice-versa. We looked for this in sample 2295 as this has the highest coverage, a large number of SNVs and parallel events present in a large number of cells. This code snippet just grabs some legends. ASlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = F, returnlist = T)$BAF + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele\\nImbalance&quot;, ncol = 1, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, ncol = 2, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) mylegends &lt;- plot_grid(NULL, cnlegend, ASlegend, NULL, ncol = 1, rel_heights = c(0.3, 1, 1, 0.3)) mylegends Now we’ll plot the heatmaps and VAFs of SNVs in the 2 states. source(here(&quot;src/parallel_events_util.R&quot;)) ov2295chr9 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;9&quot;, mysample = &quot;2295&quot;, mystate = 3, plottitle = &quot;2295 chr 9&quot;, cutoff = 0.3, countcutoff = 19) ov2295chr12 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;12&quot;, mysample = &quot;2295&quot;, mystate = 1, plottitle = &quot;2295 chr 12&quot;, cutoff = 0.1, countcutoff = 4) (g2295 &lt;- cowplot::plot_grid(cowplot::plot_grid(ov2295chr9$hm, ov2295chr12$hm, mylegends, labels = c(&quot;a&quot;, &quot;b&quot;), ncol = 3, rel_widths = c(1, 1, 0.2)), cowplot::plot_grid(ov2295chr9$vaf + ggtitle(&quot;&quot;), ov2295chr12$vaf + ggtitle(&quot;&quot;), NULL, rel_widths = c(1, 1, 0.2), ncol = 3), ncol = 1)) 5.3.1 hTERT recurrent gains/losses The hTERT cell line data consists of 10,000+ cells that were serially passaged overtime. This represent an excellent dataset to investigate the evolutionary consequences of parallel events, we have 7 cell lines derived from the same ancestral cell line but with different DNA damage repair defects. The cells are then subject to the same experimental conditions. We can then look for chromosomal gains and losses that appear recurrently across the different lines and through haplotype specific copy number inference, see whether a particular allele is preferentially gained or lost. Below are plots of the frequency of each chromosome arm gain or loss across all the lines. chrarm &lt;- fread(config$hscnarm) %&gt;% left_join(metrics %&gt;% select(cell_id, sample)) %&gt;% .[sample %in% config$datagroups$htert] %&gt;% filter(!sample %in% c(&quot;2295&quot;, &quot;SA1101b&quot;, &quot;SA1101a&quot;)) htertchrgain &lt;- chrarm %&gt;% group_by(arm, sample, chr) %&gt;% summarise(nA = sum(state == 3 &amp; phase == &quot;A&quot;), nB = sum(state == 3 &amp; phase == &quot;B&quot;), ncells = length(unique(cell_id))) %&gt;% ungroup() %&gt;% mutate(f_A = nA/ncells, f_B = nB/ncells) %&gt;% arrange(sample) %&gt;% group_by(sample, chr) %&gt;% summarise(f_A = max(f_A), f_B = max(f_B)) %&gt;% pivot_longer(c(&quot;f_A&quot;, &quot;f_B&quot;)) %&gt;% separate(name, c(&quot;x&quot;, &quot;phase&quot;), &quot;_&quot;) %&gt;% mutate(sample = factor(sample, levels = c(&quot;SA039&quot;, &quot;SA906a&quot;, &quot;SA906b&quot;, &quot;SA1101a&quot;, &quot;SA1101b&quot;, &quot;SA1188&quot;, &quot;SA1056&quot;, &quot;SA1055&quot;, &quot;SA1054&quot;))) %&gt;% filter(chr != &quot;X&quot;) %&gt;% mutate(chr = factor(chr, levels = sort(as.numeric(unique(chr))))) %&gt;% ggplot(aes(x = sample, y = value, fill = phase)) + geom_col(position = &quot;dodge&quot;) + coord_flip() + scale_fill_manual(values = c(scCNphase_colors[[&quot;A-Gained&quot;]], scCNphase_colors[[&quot;B-Gained&quot;]])) + ylab(&quot;Proportion of cells with gain&quot;) + xlab(&quot;&quot;) + theme_cowplot(font_size = 12) + scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0, 1)) + labs(fill = &quot;Gained allele&quot;) + # theme(legend.position = c(0.8, 0.8)) + scale_x_discrete(breaks = c(&quot;SA039&quot;, &quot;SA906a&quot;, &quot;SA906b&quot;, &quot;SA1101a&quot;, &quot;SA1101b&quot;, &quot;SA1188&quot;, &quot;SA1056&quot;, &quot;SA1055&quot;, &quot;SA1054&quot;)) + facet_wrap(~chr) + panel_border() + ggtitle(&quot;Gains&quot;) htertchrloss &lt;- chrarm %&gt;% group_by(arm, sample, chr) %&gt;% summarise(nA = sum(state == 1 &amp; phase == &quot;A&quot;), nB = sum(state == 1 &amp; phase == &quot;B&quot;), ncells = length(unique(cell_id))) %&gt;% ungroup() %&gt;% mutate(f_A = nA/ncells, f_B = nB/ncells) %&gt;% arrange(sample) %&gt;% group_by(sample, chr) %&gt;% summarise(f_A = max(f_A), f_B = max(f_B)) %&gt;% pivot_longer(c(&quot;f_A&quot;, &quot;f_B&quot;)) %&gt;% separate(name, c(&quot;x&quot;, &quot;phase&quot;), &quot;_&quot;) %&gt;% mutate(sample = factor(sample, levels = c(&quot;SA039&quot;, &quot;SA906a&quot;, &quot;SA906b&quot;, &quot;SA1101a&quot;, &quot;SA1101b&quot;, &quot;SA1188&quot;, &quot;SA1056&quot;, &quot;SA1055&quot;, &quot;SA1054&quot;))) %&gt;% filter(chr != &quot;X&quot;) %&gt;% mutate(chr = factor(chr, levels = sort(as.numeric(unique(chr))))) %&gt;% ggplot(aes(x = sample, y = value, fill = phase)) + geom_col(position = &quot;dodge&quot;) + coord_flip() + theme_cowplot(font_size = 12) + scale_fill_manual(values = c(scCNphase_colors[[&quot;A-Hom&quot;]], scCNphase_colors[[&quot;B-Hom&quot;]])) + ylab(&quot;Proportion of cells with loss&quot;) + xlab(&quot;&quot;) + scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0, 1)) + labs(fill = &quot;Lost allele&quot;) + # theme(legend.position = c(0.8, 0.8)) + scale_x_discrete(breaks = c(&quot;SA039&quot;, &quot;SA906a&quot;, &quot;SA906b&quot;, &quot;SA1101a&quot;, &quot;SA1101b&quot;, &quot;SA1188&quot;, &quot;SA1056&quot;, &quot;SA1055&quot;, &quot;SA1054&quot;)) + facet_wrap(~chr) + panel_border() + ggtitle(&quot;Losses&quot;) gtogether &lt;- plot_grid(htertchrgain + theme(legend.position = &quot;bottom&quot;), htertchrloss + theme(legend.position = &quot;bottom&quot;), ncol = 2, rel_widths = c(1, 1), axis = &quot;tb&quot;, align = &quot;h&quot;) gtogether Chr20 is quite striking, where both alleles are gained in some cells across all the lines, suggesting it provides a fitness advantage in this system. Notably Chr20 is also commonly gained in breast cancers. (htertchr20plot &lt;- chrarm %&gt;% filter(chr == &quot;20&quot;) %&gt;% group_by(arm, sample) %&gt;% summarise(nA = sum(state == 3 &amp; phase == &quot;A&quot;), nB = sum(state == 3 &amp; phase == &quot;B&quot;), ncells = length(unique(cell_id))) %&gt;% ungroup() %&gt;% mutate(f_A = nA/ncells, f_B = nB/ncells) %&gt;% arrange(sample) %&gt;% group_by(sample) %&gt;% summarise(f_A = max(f_A), f_B = max(f_B)) %&gt;% pivot_longer(c(&quot;f_A&quot;, &quot;f_B&quot;)) %&gt;% separate(name, c(&quot;x&quot;, &quot;phase&quot;), &quot;_&quot;) %&gt;% mutate(sample = factor(sample, levels = c(&quot;SA039&quot;, &quot;SA906a&quot;, &quot;SA906b&quot;, &quot;SA1101a&quot;, &quot;SA1101b&quot;, &quot;SA1188&quot;, &quot;SA1056&quot;, &quot;SA1055&quot;, &quot;SA1054&quot;))) %&gt;% ggplot(aes(x = sample, y = value, fill = phase)) + geom_col(position = &quot;dodge&quot;) + theme_cowplot(font_size = 12) + coord_flip() + scale_fill_manual(values = c(scCNphase_colors[[&quot;A-Gained&quot;]], scCNphase_colors[[&quot;B-Gained&quot;]])) + ylab(&quot;Proportion of cells with chr20 gain&quot;) + xlab(&quot;&quot;) + labs(fill = &quot;Gained allele&quot;) + theme(legend.position = c(0.5, 0.2)) + scale_x_discrete(breaks = c(&quot;SA039&quot;, &quot;SA906a&quot;, &quot;SA906b&quot;, &quot;SA1101a&quot;, &quot;SA1101b&quot;, &quot;SA1188&quot;, &quot;SA1056&quot;, &quot;SA1055&quot;, &quot;SA1054&quot;))) 5.4 Number of parallel events Here, I’ll calculate the number of parallel events per sample. A parallel event is defined as follows: Segment of the genome &gt;4Mb At least 20 cells with a copy number change A minimum of 1% with allele A gained/lost and a minimum of 1% with allele B gained/lost hscn &lt;- hscn[!is.na(sample)] ncells &lt;- hscn %&gt;% .[, list(ncells = length(unique(cell_id))), by = .(sample)] xloss &lt;- hscn %&gt;% .[state == 1 &amp; LOH == &quot;LOH&quot; &amp; str_detect(state_phase, &quot;Hom&quot;)] %&gt;% .[, list(n = .N), by = .(sample, chr, start, end, state_phase, state)] %&gt;% .[ncells, on = &quot;sample&quot;] %&gt;% .[, `:=`(f, n/ncells)] %&gt;% pivot_wider(names_from = &quot;state_phase&quot;, values_from = c(&quot;n&quot;, &quot;f&quot;)) %&gt;% na.omit() %&gt;% arrange(sample, chr, start) %&gt;% filter(`n_A-Hom` &gt; 1 &amp; `n_B-Hom` &gt; 1) con_loss &lt;- xloss %&gt;% group_by(sample, chr) %&gt;% mutate(dist_to_next = start - lag(start)) %&gt;% ungroup() %&gt;% fill(dist_to_next, .direction = &quot;updown&quot;) %&gt;% mutate(split = ifelse(dist_to_next &lt; 4100000, 0, 1), rlid = rleid(split)) %&gt;% group_by(sample, chr, rlid) %&gt;% summarise(n_AHom = mean(`n_A-Hom`), n_BHom = mean(`n_B-Hom`), f_AHom = mean(`f_A-Hom`), f_BHom = mean(`f_B-Hom`), n = n(), start = first(start), end = last(end)) %&gt;% ungroup() %&gt;% # filter for 19 cells and 1% frequency filter(n &gt; 19, f_AHom &gt; 0.01, f_BHom &gt; 0.01) %&gt;% mutate(rat = pmin(f_AHom, f_BHom)/(f_AHom + f_BHom), ncells = n_AHom + n_BHom, ftot = f_AHom + f_BHom) %&gt;% group_by(sample) %&gt;% summarise(n = n() - 1) %&gt;% ungroup() %&gt;% mutate(type = &quot;Parallel Losses&quot;) x_gain &lt;- hscn %&gt;% .[(state == 3) &amp; (LOH != &quot;LOH&quot;)] %&gt;% .[, list(n = .N), by = .(sample, chr, start, end, state_phase)] %&gt;% .[ncells, on = &quot;sample&quot;] %&gt;% .[, `:=`(f, n/ncells)] %&gt;% pivot_wider(names_from = &quot;state_phase&quot;, values_from = c(&quot;n&quot;, &quot;f&quot;)) %&gt;% na.omit() %&gt;% arrange(sample, chr, start) %&gt;% filter(`n_A-Gained` &gt; 1 &amp; `n_B-Gained` &gt; 1) con_gain &lt;- x_gain %&gt;% group_by(sample, chr) %&gt;% mutate(dist_to_next = start - lag(start)) %&gt;% ungroup() %&gt;% fill(dist_to_next, .direction = &quot;updown&quot;) %&gt;% mutate(split = ifelse(dist_to_next &lt; 4100000, 0, 1), rlid = rleid(split)) %&gt;% group_by(sample, chr, rlid) %&gt;% summarise(n_AGained = mean(`n_A-Gained`), n_BGained = mean(`n_B-Gained`), f_AGained = mean(`f_A-Gained`), f_BGained = mean(`f_B-Gained`), n = n(), start = first(start), end = last(end)) %&gt;% ungroup() %&gt;% filter(n &gt; 19, f_AGained &gt; 0.01, f_BGained &gt; 0.01) %&gt;% mutate(rat = pmin(f_AGained, f_BGained)/(f_AGained + f_BGained), ncells = n_AGained + n_BGained, ftot = f_AGained + f_BGained, width = (end - start)/1e+06) %&gt;% group_by(sample) %&gt;% summarise(n = n() - 1) %&gt;% ungroup() %&gt;% mutate(type = &quot;Parallel Gains&quot;) We wanted to investigate the hypothesis that parallel events may just be a consequence of increased instability. To test this I’ll calculate the inferred chromosome event rates and see how this correlates with the number of parallel events. misseg &lt;- fread(config$parsimony) %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer( names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) %&gt;% mutate(f = pars_score / ncells) %&gt;% filter(type %in% c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;)) %&gt;% mutate(type = factor(type, levels = c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;))) %&gt;% group_by(sample, type) %&gt;% summarise(f = mean(f)) %&gt;% filter(type != &quot;loh&quot;) %&gt;% summarize(f= mean(f)) df_pevents &lt;- expand.grid(unique(hscn$sample), c(&quot;Parallel Gains&quot;, &quot;Parallel Losses&quot;)) %&gt;% rename(sample = Var1, type = Var2) df_pevents &lt;- df_pevents %&gt;% left_join(misseg) %&gt;% left_join(bind_rows(con_gain, con_loss)) %&gt;% replace_na(list(n = 0)) library(ggpmisc) my.formula &lt;- y ~ x (pevents_plot &lt;- df_pevents %&gt;% left_join(ncells) %&gt;% filter(!sample %in% c(&quot;2295&quot;, &quot;SA1101b&quot;, &quot;SA1101a&quot;)) %&gt;% filter(!sample %in% c(&quot;DG1197&quot;, &quot;DG1134&quot;, &quot;SA1162&quot;)) %&gt;% ggplot(aes(x = f, y = n / ncells)) + geom_point(size = 1, aes(fill = type, col = type, group = type)) + #ggrepel::geom_label_repel(aes(label = sample)) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;#28536C&quot;)) + scale_color_manual(values = c(&quot;#550000&quot;, &quot;#28536C&quot;)) + geom_smooth(method = &quot;lm&quot;, se = F, linetype = 2, col = &quot;black&quot;) + facet_wrap(~type, ncol = 2, scales = &quot;free_y&quot;) + stat_poly_eq(formula = my.formula, aes(label = paste( ..rr.label.., ..p.value.label.., sep = &quot;~~~&quot;)), parse = TRUE, label.y = 30) + theme_cowplot(font_size = 12) + theme(legend.position = &quot;none&quot;) + panel_border() + xlab(&quot;Missegregation rate&quot;) + ylab(&quot;Number of events / cell&quot;)) Here are the number of events per sample divided by the number of cells (we’re more likely to see parallel event in samples with more cells). (pevents_counts &lt;- df_pevents %&gt;% left_join(ncells) %&gt;% group_by(sample) %&gt;% mutate(ord = mean(n / ncells)) %&gt;% ungroup() %&gt;% filter(!sample %in% c(&quot;DG1134&quot;, &quot;DG1197&quot;, &quot;SA1162&quot;)) %&gt;% filter(!sample %in% c(&quot;2295&quot;, &quot;SA1101b&quot;, &quot;SA1101a&quot;)) %&gt;% mutate(ttype = ifelse(sample %in% config$datagroups$htert, &quot;hTERT&quot;, &quot;Tumors&quot;)) %&gt;% ggplot(aes(x = fct_reorder(sample, ord, .desc = T), y = n / ncells, fill = type)) + geom_bar(stat = &quot;identity&quot;, position = position_dodge(preserve = &quot;single&quot;), alpha = 0.6) + theme_cowplot(font_size = 12, line_size = 0.9) + #coord_flip() + xlab(&quot;&quot;) + theme(legend.position = c(0.8, 0.8), legend.title = element_blank()) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;#28536C&quot;)) + ylab(&quot;Number of events / cell&quot;) + scale_y_continuous(expand = c(0.01, 0)) + facet_grid(~ttype, scales = &quot;free_x&quot;, space = &quot;free_x&quot;) + scale_x_discrete(guide = guide_axis(angle = 45))) 5.5 Heatmaps per chromosome Here I’ll pull out some examples of parallel events in the tumors. # gains sa1049chr1 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;1&quot;, mysample = &quot;SA1049&quot;, mystate = 3, plottitle = &quot;SA1049 chr 1&quot;, cutoff = 0.3, countcutoff = 5) sa1182chr6 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;6&quot;, mysample = &quot;SA1182&quot;, mystate = 3, plottitle = &quot;SA1182 chr 6&quot;, cutoff = 0.3, countcutoff = 5) # sa535chr21 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &#39;21&#39;, # mysample = &#39;SA535&#39;, mystate = 3, plottitle = &#39;SA535 chr 21&#39;, cutoff = 0.3, # countcutoff = 5) sa535chr20 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;20&quot;, mysample = &quot;SA535&quot;, mystate = 3, plottitle = &quot;SA535 chr 21&quot;, cutoff = 0.3, countcutoff = 5) sa535chrX &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;X&quot;, mysample = &quot;SA535&quot;, mystate = 3, plottitle = &quot;SA535 chr X&quot;, cutoff = 0.3, countcutoff = 5) sa609chr16 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;16&quot;, mysample = &quot;SA609&quot;, mystate = 3, plottitle = &quot;SA609 chr 16&quot;, cutoff = 0.3, countcutoff = 5) sa609chr3 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;3&quot;, mysample = &quot;SA609&quot;, mystate = 3, plottitle = &quot;SA609 chr 3&quot;, cutoff = 0.3, countcutoff = 5) sa1162chr18 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;18&quot;, mysample = &quot;SA1162&quot;, mystate = 3, plottitle = &quot;SA1162 chr 18&quot;, cutoff = 0.3, countcutoff = 5) sa1162chr15 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;15&quot;, mysample = &quot;SA1162&quot;, mystate = 3, plottitle = &quot;SA1162 chr 15&quot;, cutoff = 0.3, countcutoff = 5) sa604chr7 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;7&quot;, mysample = &quot;SA604&quot;, mystate = 7, plottitle = &quot;SA604 chr 7&quot;, cutoff = 0.3, countcutoff = 5) # losses sa1184chr3 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;3&quot;, mysample = &quot;SA1184&quot;, mystate = 1, plottitle = &quot;SA1184 chr 3&quot;, cutoff = 0.1, countcutoff = 2, plotsnvs = FALSE) sa1053chr15 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;15&quot;, mysample = &quot;SA1053&quot;, mystate = 1, plottitle = &quot;SA1053 chr 15&quot;, cutoff = 0.3, countcutoff = 2, clustfield = &quot;BAF&quot;) sa1052chr15 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;15&quot;, mysample = &quot;SA1052&quot;, mystate = 2, plottitle = &quot;SA1052 chr 15&quot;, cutoff = 0.3, countcutoff = 2, clustfield = &quot;BAF&quot;) sa501chr15 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;15&quot;, mysample = &quot;SA501&quot;, mystate = 1, plottitle = &quot;SA1052 chr 15&quot;, cutoff = 0.3, countcutoff = 2, clustfield = &quot;BAF&quot;) cowplot::plot_grid(sa1049chr1$hm, sa609chr3$hm, sa1182chr6$hm, sa1053chr15$hm, sa1184chr3$hm, sa1052chr15$hm, ncol = 3, labels = c(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;)) 5.6 Effect on the transcriptome A reasonable hypothesis for the effect that a parallel events has on the cellular transcriptome is that it is the same and produces a convergent effect. That is a gain of allele “A” versus allele “B” results in the same changes on the transcriptome because both events would increase gene dosage similarly. This is tricky to test in bulk sequencing where we have mixtures of cells but is possible with single cells. However, even in single cells this type of question is confounded by cells having different copy number alterations in addition to the parallel event. Therefore ideally, we’d like to be able to profile the transcriptome of cells that have very similar copy number profiles apart from the parallel event. Fortunately we could identify such a group of cells in SA906b, where cells lost different alleles of chr2q but the other chromosomes had largelt similar copy number profiles as seen below. source(here(&quot;src/bfb_events_util.R&quot;)) sa906bchr2 &lt;- make_parallel_plots(hscn, snvs_filt, snvannot, mychr = &quot;2&quot;, mysample = &quot;SA906b&quot;, mystate = 1, plottitle = &quot;SA906b chr 2&quot;, cutoff = 0.3, umapmetric = &quot;cosine&quot;, clustfield = &quot;BAF&quot;, show_clone_label = TRUE) chroms &lt;- unique(hscn$chr) chroms &lt;- chroms[!chroms %in% c(&quot;14&quot;, &quot;16&quot;, &quot;18&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;)] fullheatmap &lt;- makeheatmap(hscn[cell_id %in% sa906bchr2$cl$clustering$cell_id], spacer_cols = 15, show_clone_label = T, cl = sa906bchr2$cl, chrlabels = chroms, showlegend = T, w = 40) gsa906bplot &lt;- plot_grid(NULL, fullheatmap, NULL, plot_grid(NULL, sa906bchr2$umap, NULL, rel_heights = c(0.1, 0.5, 1, 0.5), ncol = 3, labels = c(&quot;&quot;, &quot;b&quot;)), ncol = 1, rel_heights = c(0.05, 1, 0.1, 0.5), labels = &quot;a&quot;) gsa906bplot We then generate single cell RNA sequencing data from the same single cell suspension and genotyped haplotype blocks. We integrated these into a Seurat object. library(Seurat) SA906b &lt;- readRDS(config$rna_sa906b) # filter out replicating cells SA906b &lt;- subset(SA906b, subset = Phase == &quot;G1&quot;) SA906b &lt;- RunUMAP(SA906b, reduction.name = &quot;UMAPsample3&quot;, dims = 1:50) SA906b &lt;- FindNeighbors(SA906b) SA906b &lt;- FindClusters(SA906b, resolution = 0.4) ## Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck ## ## Number of nodes: 8812 ## Number of edges: 277725 ## ## Running Louvain algorithm... ## Maximum modularity in 10 random starts: 0.8335 ## Number of communities: 5 ## Elapsed time: 1 seconds SA906b@assays$BAF@scale.data &lt;- SA906b@assays$BAF@data We can use Seurat functionality to plot chromosome BAF values onto the UMAP. sc &lt;- DimPlot(SA906b, group.by = &quot;seurat_clusters&quot;, reduction = &quot;UMAPsample3&quot;, pt.size = 0.5) sc &lt;- LabelClusters(plot = sc, id = &quot;seurat_clusters&quot;, size = 7) + xlab(&quot;UMAP 1&quot;) + ylab(&quot;UMAP 2&quot;) + theme_cowplot(font_size = 12, line_size = 0.9) + theme(legend.position = &quot;none&quot;) + ggtitle(&quot;&quot;) (umap2q &lt;- FeaturePlot(SA906b, &quot;BAF-2q&quot;, reduction = &quot;UMAPsample3&quot;, pt.size = 0.5) + scale_color_gradientn(colours = scBAFstate_colors, name = &quot;BAF 2q&quot;, guide = guide_colourbar(direction = &quot;vertical&quot;, title.position = &quot;top&quot;, barwidth = 1)) + xlab(&quot;UMAP 1&quot;) + ylab(&quot;UMAP 2&quot;) + theme_cowplot(font_size = 12, line_size = 0.9) + ggtitle(element_blank()) + theme(legend.position = &quot;right&quot;)) Now I’ll define cells that are homozygous for A and for B and calculate the proportion of each in all the gene expression clusters. SA906b &lt;- AddMetaData(SA906b, GetAssayData(SA906b, assay = &quot;BAF&quot;)[&quot;BAF-2q&quot;, ] &lt; 0.1, col.name = &quot;BAF2qA&quot;) SA906b &lt;- AddMetaData(SA906b, GetAssayData(SA906b, assay = &quot;BAF&quot;)[&quot;BAF-2q&quot;, ] &gt; 0.9, col.name = &quot;BAF2qB&quot;) propsdf &lt;- SA906b@meta.data %&gt;% group_by(seurat_clusters) %&gt;% summarise(A = sum(BAF2qA), B = sum(BAF2qB), n = dplyr::n()) %&gt;% ungroup() %&gt;% mutate(Balanced = n - A - B) library(Nebulosa) d1 &lt;- plot_density(SA906b, reduction = &quot;UMAPsample3&quot;, features = &quot;BAF2qA&quot;, size = 0.3, adjust = 0.1) + scale_color_gradientn(colours = rev(scBAFstate_colors[1:6])) + ggtitle(element_blank()) + ggtitle(element_blank()) + xlab(&quot;UMAP 1&quot;) + ylab(&quot;UMAP 2&quot;) + theme_cowplot(font_size = 12, line_size = 0.9) + ggtitle(element_blank()) + theme(legend.position = &quot;top&quot;) + labs(colour = element_text(&quot;Density\\n(B loss)&quot;)) + guides(colour = guide_colourbar(label = FALSE, label.position = &quot;top&quot;, direction = &quot;horizontal&quot;)) d2 &lt;- plot_density(SA906b, reduction = &quot;UMAPsample3&quot;, features = &quot;BAF2qB&quot;, size = 0.3, adjust = 0.1) + scale_color_gradientn(colours = scBAFstate_colors[6:11]) + ggtitle(element_blank()) + xlab(&quot;UMAP 1&quot;) + ylab(&quot;UMAP 2&quot;) + theme_cowplot(font_size = 12, line_size = 0.9) + theme(legend.position = &quot;top&quot;) + labs(colour = element_text(&quot;Density\\n(A loss)&quot;)) + guides(colour = guide_colourbar(label = FALSE, label.position = &quot;top&quot;, direction = &quot;horizontal&quot;)) We can then do a proportions test to see if they’re enriched in any clusters. prop.test(propsdf$A, propsdf$n) %&gt;% print(.) ## ## 5-sample test for equality of proportions without continuity ## correction ## ## data: propsdf$A out of propsdf$n ## X-squared = 38.883, df = 4, p-value = 7.365e-08 ## alternative hypothesis: two.sided ## sample estimates: ## prop 1 prop 2 prop 3 prop 4 prop 5 ## 0.017695296 0.008840354 0.008542141 0.001342282 0.001508296 prop.test(propsdf$B, propsdf$n) %&gt;% print(.) ## ## 5-sample test for equality of proportions without continuity ## correction ## ## data: propsdf$B out of propsdf$n ## X-squared = 487.96, df = 4, p-value &lt; 2.2e-16 ## alternative hypothesis: two.sided ## sample estimates: ## prop 1 prop 2 prop 3 prop 4 prop 5 ## 0.138109625 0.047321893 0.025056948 0.002684564 0.008295626 I’ll now plot these proportions. props &lt;- propsdf %&gt;% pivot_longer(c(&quot;A&quot;, &quot;B&quot;, &quot;Balanced&quot;)) %&gt;% mutate(f = value/n) %&gt;% ggplot(aes(x = seurat_clusters, y = f, fill = name)) + geom_col() + scale_fill_manual(values = as.vector(scBAFstate_colors[c(&quot;0&quot;, &quot;0.5&quot;, &quot;1&quot;)]), breaks = c(&quot;A&quot;, &quot;Balanced&quot;, &quot;B&quot;), labels = c(&quot;A loss&quot;, &quot;Balanced&quot;, &quot;B loss&quot;)) + theme_cowplot(font_size = 12, line_size = 0.9) + ylab(&quot;Proportion&quot;) + xlab(&quot;Gene expression cluster&quot;) + theme(legend.position = &quot;top&quot;, legend.title = element_blank()) props &lt;- propsdf %&gt;% pivot_longer(c(&quot;A&quot;, &quot;B&quot;)) %&gt;% mutate(f = value/n) %&gt;% ggplot(aes(x = seurat_clusters, y = f, fill = name)) + geom_col(position = &quot;dodge&quot;) + scale_fill_manual(values = as.vector(scBAFstate_colors[c(&quot;0&quot;, &quot;0.5&quot;, &quot;1&quot;)]), breaks = c(&quot;A&quot;, &quot;Balanced&quot;, &quot;B&quot;), labels = c(&quot;B loss&quot;, &quot;Balanced&quot;, &quot;A loss&quot;)) + theme_cowplot(font_size = 12, line_size = 0.9) + ylab(&quot;Proportion lost&quot;) + xlab(&quot;Gene expression cluster&quot;) + theme(legend.position = &quot;top&quot;, legend.title = element_blank()) + ylim(c(0, 0.17)) propsdna &lt;- hscn %&gt;% .[sample == &quot;SA906b&quot;] %&gt;% .[start &gt; 93300000] %&gt;% .[chr == &quot;2&quot;, list(state = sum(state == 1)/.N, A = sum(state_phase == &quot;A-Hom&quot; &amp; state == 1)/.N, B = sum(state_phase == &quot;B-Hom&quot; &amp; state == 1)/.N), by = &quot;cell_id&quot;] %&gt;% arrange(desc(state)) %&gt;% mutate(state = state &gt; 0.5, A = A &gt; 0.5, B = B &gt; 0.5) %&gt;% pivot_longer(cols = c(&quot;A&quot;, &quot;B&quot;)) %&gt;% group_by(name) %&gt;% summarise(f = sum(value)/dplyr::n()) # propsdna &lt;- bind_rows(propsdna, data.frame(name = &#39;Balanced&#39;, f = 1 - # sum(propsdna$f))) propsdnaplot &lt;- propsdna %&gt;% ggplot(aes(x = &quot;scDNA&quot;, y = f, fill = name)) + geom_col(position = &quot;dodge&quot;) + scale_fill_manual(values = as.vector(scBAFstate_colors[c(&quot;0&quot;, &quot;0.5&quot;, &quot;1&quot;)]), breaks = c(&quot;A&quot;, &quot;Balanced&quot;, &quot;B&quot;), labels = c(&quot;A loss&quot;, &quot;Balanced&quot;, &quot;B loss&quot;)) + theme_cowplot(font_size = 12, line_size = 0.9) + ylab(&quot;Proportion&quot;) + xlab(&quot;&quot;) + theme(legend.position = &quot;none&quot;, legend.title = element_blank()) + theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + ylim(c(0, 0.17)) + theme(axis.line.y = element_blank()) props &lt;- plot_grid(props, propsdnaplot, rel_widths = c(1, 0.2), align = &quot;h&quot;, axis = &quot;tb&quot;) props And now I’ll group all these figure together. (rnaplot &lt;- plot_grid(plot_grid(sc, d1, d2, ncol = 3, align = &quot;h&quot;, axis = &quot;tb&quot;, rel_widths = c(1.2, 1.2, 1.2), labels = c(&quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;)), props, ncol = 2, rel_widths = c(1, 0.5), labels = c(&quot;&quot;, &quot;p&quot;))) 5.7 Composite figure The below will merge all these figures together to produce the final figure. bafdiagramgain &lt;- ggdraw() + draw_image(here(&quot;diagrams/bafdiagramgain.png&quot;), scale = 1.2) bafdiagramloss &lt;- ggdraw() + draw_image(here(&quot;diagrams/bafdiagramloss.png&quot;), scale = 1.2) top &lt;- plot_grid(plot_grid(NULL, bafdiagramloss, example_cell_hor_loss, rel_widths = c(0.1, 0.3, 1), ncol = 3), NULL, plot_grid(bafdiagramgain, example_cell_hor_gain, rel_widths = c(0.3, 1)), NULL, legends, ncol = 5, rel_widths = c(0.6, 0.1, 0.6, 0.05, 0.2), labels = c(&quot;a&quot;, &quot;b&quot;)) middle1 &lt;- plot_grid(htertchr20plot, NULL, cowplot::plot_grid(sa1049chr1$hm, sa609chr3$hm, sa1182chr6$hm, sa1053chr15$hm, sa1184chr3$hm, sa1052chr15$hm, ncol = 3, labels = c(&quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;)), ncol = 3, rel_widths = c(0.5, 0.1, 1), labels = c(&quot;c&quot;, &quot;&quot;)) middle2 &lt;- plot_grid(pevents_counts, NULL, pevents_plot, ncol = 3, rel_widths = c(1, 0.1, 0.7), labels = c(&quot;j&quot;, &quot;&quot;, &quot;k&quot;)) bottom &lt;- cowplot::plot_grid(plot_grid(NULL, sa906bchr2$hm, NULL, ncol = 1, rel_heights = c(0.01, 1, 0.02)), rnaplot, ncol = 2, rel_widths = c(0.3, 1), labels = c(&quot;l&quot;)) myplot &lt;- plot_grid(top, NULL, middle1, NULL, middle2, NULL, bottom, ncol = 1, rel_heights = c(0.7, 0.1, 1, 0.1, 0.8, 0.1, 1)) myplot "],["figure-4.html", "Section 6 Figure 4 6.1 Load data + packages 6.2 Heatmap 6.3 Main figure 6.4 Phylogenetically ordered heatmap 6.5 Other htert examples", " Section 6 Figure 4 6.1 Load data + packages library(tidyverse) library(devtools) library(cowplot) library(yaml) library(RColorBrewer) library(here) library(yaml) library(glue) library(Seurat) library(data.table) here::i_am(&quot;04-figure4.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) theme_set(theme_cowplot()) hscn &lt;- fread(config$hscn) ploidy &lt;- fread(config$ploidy) hscn &lt;- hscn[ploidy, on = &quot;cell_id&quot;] hscn &lt;- hscn[!is.na(hscn$start)] metrics &lt;- fread(config$metrics) %&gt;% select(cell_id, coverage_breadth, state_mode, sample) %&gt;% arrange(desc(coverage_breadth)) bps &lt;- fread(config$breakpoints) 6.2 Heatmap In this figure we take a detailed look at sample SA1188 which is one of our engineered cell lines witth TP53-/- and BRCA2+/-. In particular we’re interested in chromosome 3 where we see evidence of breakage fusion bridge processes. First of all we’ll cluster the cells using the copy number in chromosome 3q. source(here(&quot;src/bfb_events_util.R&quot;)) # get chr 3 hscn_sa1888 &lt;- hscn[sample == &quot;SA1188&quot; &amp; chr == 3 &amp; start &gt; 9.1e+07] state4 &lt;- hscn_sa1888[, list(x = sum(state == 4)), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) hscn_sa1888 &lt;- hscn_sa1888[cell_id %in% (state4[x == 0] %&gt;% .$cell_id)] cl &lt;- umap_clustering(hscn_sa1888, field = &quot;copy&quot;, umapmetric = &quot;correlation&quot;, minPts = 30, min_dist = 0.1, seed = 123) Now I’ll generate a heatmap of this chromosome. sa1188chr3 &lt;- makeheatmap(hscn_sa1888, plottitle = &quot;SA1188 chr 3q&quot;, showlegend = F, show_clone_label = T, cl = cl) plot_grid(sa1188chr3) Now I’ll generate average copy number profiles and merged SV counts per clone. hscn_sa1888_clones &lt;- consensuscopynumber(hscn[sample == &quot;SA1188&quot;], cl = cl$clustering) %&gt;% mutate(cell_id = paste0(&quot;Cluster &quot;, cell_id)) highamp &lt;- hscn[sample == &quot;SA1188&quot; &amp; chr == &quot;3&quot;] %&gt;% group_by(cell_id) %&gt;% mutate(maxstate = sum(state &gt; 4)) %&gt;% ungroup() %&gt;% filter(maxstate &gt; 7 &amp; maxstate &lt; 26) %&gt;% group_by(chr, start, end) %&gt;% consensuscopynumber(.) %&gt;% mutate(cell_id = &quot;Amp&quot;) hscn[sample == &quot;SA1188&quot; &amp; chr == &quot;3&quot;] %&gt;% group_by(cell_id) %&gt;% mutate(maxstate = sum(state &gt; 4)) %&gt;% ungroup() %&gt;% filter(maxstate &gt; 7 &amp; maxstate &lt; 26) %&gt;% pull(cell_id) %&gt;% unique(.) %&gt;% length() ## [1] 19 bpsclones &lt;- bps %&gt;% filter(str_detect(sample, &quot;SA1188&quot;)) %&gt;% left_join(cl$clustering) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type, strand_1, strand_2, clone_id) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;Cluster &quot;, clone_id)) Much of the variability here can be explained by BFB, below is a diagram of BFB cycles. bfb &lt;- ggdraw() + draw_image(here(&quot;diagrams/bfb.png&quot;), scale = 1) + theme(plot.margin = margin(0, -10, 0, -10)) bfb To look into this in a bit more detail I’ll plot the copy number profiles with SV for some of these clusters. xpos &lt;- 0.3 ypos &lt;- 0.27 dcell2 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster C&quot;, curvature = curve, adj = 0, addlabel = TRUE, svlims = c(0, 2), ylimlab = c(6, 5, 4), xlimlab = c(NA, 250)) ## [1] &quot;Cluster C&quot; ## [1] 51845 (dcell2_im &lt;- ggdraw() + draw_plot(dcell2) + draw_image(here(&quot;diagrams/bfb_loss_small.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos)) dcell1 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster F&quot;, adj = 0, addlabel = FALSE, svlims = c(0, 2), ylimlab = c(6, 5, 4), xlimlab = c(NA, 250)) ## [1] &quot;Cluster F&quot; ## [1] 51845 (dcell1_im &lt;- ggdraw() + draw_plot(dcell1) + draw_image(here(&quot;diagrams/bfb_gain1.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcell2a1 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster J&quot;, svlims = c(0, 2)) ## [1] &quot;Cluster J&quot; ## [1] 51845 (dcell2a1_im &lt;- ggdraw() + draw_plot(dcell2a1) + draw_image(here(&quot;diagrams/bfb_gain2.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcell2a2 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster A&quot;, curvature = curve, svlims = c(0, 2)) ## [1] &quot;Cluster A&quot; ## [1] 51845 (dcell2a2_im &lt;- ggdraw() + draw_plot(dcell2a2) + draw_image(here(&quot;diagrams/bfb_gain2.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcellextraloss &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster D&quot;, curvature = curve, svlims = c(0, 2)) ## [1] &quot;Cluster D&quot; ## [1] 51845 (dcellextraloss_im &lt;- ggdraw() + draw_plot(dcellextraloss) + draw_image(here(&quot;diagrams/bfb_loss_large.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcellhigh &lt;- getplothomolog(highamp, bpsclones, clone = &quot;Amp&quot;, curvature = curve, title = &quot;PIK3CA Amplification&quot;, svlims = c(0, 2)) ## [1] &quot;Amp&quot; ## [1] 308 (dcellhigh_im &lt;- ggdraw() + draw_plot(dcellhigh) + draw_image(here(&quot;diagrams/bfb_gain3.png&quot;), width = 0.25, height = 0.15, x = xpos, y = ypos + 0.2)) Now we’ll merge all these plots together to create the final figure, but first we need to grab the legends. ASlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = F, returnlist = T)$BAF + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele\\nImbalance&quot;, ncol = 1, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, ncol = 2, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) mylegends &lt;- plot_grid(NULL, cnlegend, NULL, ASlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 0.3, 1, 0.2)) leg &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, curvature = curve, retleg = T, ncol_legend = 1, svlims = c(0, 2)) ## NULL ## [1] 51845 6.3 Main figure top &lt;- cowplot::plot_grid(bfb, sa1188chr3, NULL, mylegends, ncol = 4, labels = c(&quot;a&quot;, &quot;b&quot;), rel_widths = c(1, 1.3, 0.05, 0.2)) middle &lt;- cowplot::plot_grid(dcell2_im, dcell1_im, dcell2a1_im, dcell2a2_im, dcellextraloss_im, dcellhigh_im, NULL, leg, ncol = 8, labels = c(&quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;), rel_widths = c(1, 1, 1, 1, 1, 1, 0.1, 0.8)) gall &lt;- cowplot::plot_grid(top, middle, ncol = 1, labels = c(&quot;&quot;, &quot;&quot;), rel_heights = c(1.7, 1.25)) gall Figure 6.1: Figure 4 6.4 Phylogenetically ordered heatmap We can also compare the ordering to a phylogenetically orderd heatmap library(ape) source(here(&quot;src/tree_utils.R&quot;)) tree &lt;- get_and_format_tree(&quot;SA1188&quot;) tree &lt;- compute.brlen(tree, 1) tree &lt;- collapse.singles(tree) tree &lt;- keep.tip(tree, cl$clustering$cell_id) chroms &lt;- unique(hscn$chr) chroms &lt;- chroms[!chroms %in% c(&quot;14&quot;, &quot;16&quot;, &quot;18&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;)] hm &lt;- plotHeatmap(hscn[sample == &quot;SA1188&quot;], tree = tree, clusters = cl$clustering, show_library_label = F, chrlabels = chroms) hmchr &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hm, ht_gap = unit(0.6, &quot;cm&quot;), column_title = &quot;&quot;, column_title_gp = gpar(fontsize = 12), heatmap_legend_side = &quot;bottom&quot;, annotation_legend_side = &quot;bottom&quot;, show_heatmap_legend = TRUE), width = 40, height = 13/3) plot_grid(hmchr) 6.5 Other htert examples 6.5.1 MYC SA906a myc &lt;- gene_copynumber(hscn[sample == &quot;SA906a&quot;], &quot;MYC&quot;) %&gt;% filter(copy &gt; 7) cells &lt;- hscn[cell_id %in% myc$cell_id] %&gt;% pull(cell_id) %&gt;% unique(.) hscn_clones &lt;- hscn[cell_id %in% cells] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;8&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cells) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;8&quot;) hm1 &lt;- makeheatmap(hscn[sample == &quot;SA906a&quot; &amp; chr == 8 &amp; ploidy == 2], plottitle = &quot;SA906a chr8&quot;, showlegend = F, show_clone_label = T, clustfield = &quot;BAF&quot;) dcell_myc &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;8&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster C&quot;) ## [1] &quot;SA906a (267 cells)&quot; ## [1] 224 plot_grid(hm1, dcell_myc, ncol = 1, rel_heights = c(1, 0.3)) 6.5.2 SA906b chr20 cellschr20 &lt;- hscn[sample == &quot;SA906b&quot; &amp; chr == &quot;20&quot; &amp; ploidy == 2] %&gt;% .[, list(x = sum(state &gt; 4)/.N), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) %&gt;% filter(x &gt; 0) %&gt;% pull(cell_id) hscn_clones &lt;- hscn[cell_id %in% cellschr20] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;20&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cellschr20) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;20&quot;) hm2 &lt;- makeheatmap(hscn[sample == &quot;SA906b&quot; &amp; chr == 20 &amp; ploidy == 2], plottitle = &quot;SA906b chr20&quot;, showlegend = F, show_clone_label = T, clustfield = &quot;BAF&quot;, minPts = 100) dcell_chr20 &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;20&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster C&quot;) ## [1] &quot;SA906b (699 cells)&quot; ## [1] 103 plot_grid(hm2, dcell_chr20, ncol = 1, rel_heights = c(1, 0.3)) 6.5.3 SA906b chr22 cellschr22 &lt;- hscn[sample == &quot;SA906b&quot; &amp; chr == &quot;22&quot; &amp; ploidy == 2] %&gt;% .[, list(x = sum(state &gt; 2)/.N), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) %&gt;% filter(x &gt; 0) %&gt;% pull(cell_id) hscn_clones &lt;- hscn[cell_id %in% cellschr22] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;22&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cellschr22) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;22&quot;) cells &lt;- sample(unique(hscn[sample == &quot;SA906b&quot; &amp; chr == 22 &amp; ploidy == 2]$cell_id), 1000) # cl &lt;- umap_clustering(hscn[sample == &#39;SA906b&#39; &amp; chr == 22 &amp; ploidy == 2], field # = &#39;copy&#39;, minPts = 200) hm3 &lt;- makeheatmap(hscn[sample == &#39;SA906b&#39; &amp; chr == 22 # &amp; ploidy == 2], plottitle = &#39;SA906b chr22&#39;, showlegend = F, show_clone_label = # T, cl = cl) cl &lt;- umap_clustering(hscn[cell_id %in% cells][chr == &quot;22&quot;], field = &quot;BAF&quot;, minPts = 50) hm3 &lt;- makeheatmap(hscn[cell_id %in% cells][chr == &quot;22&quot;], plottitle = &quot;SA906b chr22&quot;, showlegend = F, show_clone_label = T, cl = cl) dcell_chr22 &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;22&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster B&quot;) ## [1] &quot;SA906b (187 cells)&quot; ## [1] 51 plot_grid(hm3, dcell_chr22, ncol = 1, rel_heights = c(1, 0.3)) 6.5.4 Legends ASlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = F, returnlist = T)$BAF + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele Imbalance&quot;, ncol = 1, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) homlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = T) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 5, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) bpsum &lt;- bps %&gt;% filter(sample == &quot;SA1049&quot;) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 3) svlegend &lt;- get_legend(plotSV(bpsum, legend.position = &quot;right&quot;, font_size = 11)) mylegends &lt;- plot_grid(NULL, cnlegend, ASlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 1, 0.2)) mylegends2 &lt;- plot_grid(NULL, svlegend, homlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 1, 0.2)) 6.5.5 Merged figure gall &lt;- cowplot::plot_grid(cowplot::plot_grid(hm1, hm2, hm3, mylegends, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), ncol = 4, rel_widths = c(1, 1, 1, 0.5)), cowplot::plot_grid(dcell_myc, dcell_chr20, dcell_chr22, mylegends2, ncol = 4, rel_widths = c(1, 1, 1, 0.5)), NULL, ncol = 1, rel_heights = c(1, 0.75, 0.05)) gall Figure 6.2: hTERT examples "],["figure-5.html", "Section 7 Figure 5 7.1 Load data + packages 7.2 SA1162 CCNE1 7.3 SA535 FGFR1 7.4 SA1035 CCNE1 7.5 Time series analysis 7.6 Summary gene copy number 7.7 Legends 7.8 Final figure 7.9 Other BFBC examples 7.10 SA1184 chr8 7.11 Non oncogeneic amplifications", " Section 7 Figure 5 7.1 Load data + packages library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) library(yaml) here::i_am(&quot;05-figure5.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) theme_set(theme_cowplot()) hscn &lt;- fread(config$hscn) hscn &lt;- hscn[!is.na(sample)] ploidy &lt;- fread(config$ploidy) hscn &lt;- hscn[ploidy, on = &quot;cell_id&quot;] sampletags &lt;- data.frame(sample = unique(hscn$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$sig_label &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$label)) metrics &lt;- fread(config$metrics) %&gt;% select(cell_id, coverage_breadth, state_mode, sample) %&gt;% arrange(desc(coverage_breadth)) bps &lt;- fread(config$breakpoints)[, `:=`(sample, str_replace(sample, &quot;SA1188a&quot;, &quot;SA1188&quot;))] In this figure I looked for evidence of BFBC’s in the tumours. Specifically focussing on samples where we could see variability between cells at the same locus. First of all I’ll pull out the examples we presented in the main text. 7.2 SA1162 CCNE1 In this example we see a high level amplification around CCNE1. Evidence for BFBC includes a staircase like copy number pattern and clustered foldback inversions. We also see a cluster of cells with LOH of the opposite allele. This could be due to recipricol gain/loss during a single cell division. This is one of our samples from primary human material. source(here(&quot;src/bfb_events_util.R&quot;)) mysample &lt;- &quot;SA1162&quot; mychr &lt;- &quot;19&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample &amp; ploidy &lt; 4], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, mystate = c(1, 3), plottitle = &quot;SA1162 chr 19&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), countcutoff = 4, allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 5, includeSVs = FALSE, genes = &quot;CCNE1&quot;, rephase = TRUE)) ## [1] &quot;Cluster C&quot; &quot;Cluster B&quot; &quot;Cluster A&quot; ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 94 ## [1] &quot;Cluster C&quot; ## [1] 94 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 94 ## [1] &quot;Cluster B&quot; ## [1] 94 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 94 ## [1] &quot;Cluster A&quot; ## [1] 94 ## NULL ## [1] 94 SA1162chr19$merged (sa1162plot &lt;- plot_grid(SA1162chr19$hm, plot_grid(SA1162chr19$plotlistnoaxis$`Cluster A`, SA1162chr19$plotlistnoaxis$`Cluster B`, SA1162chr19$plotlist$`Cluster C`, ncol = 1, rel_heights = c(1, 1, 1.3)))) 7.3 SA535 FGFR1 In this example we see an amplification encompassing the FGFR1 locus in SA535. The amplification is adjacent to a loss and close to the centromere, we find FBI close to the rearrangement and also striking variability between clusters, including rare cells that completely lack any amplification. Before analysing this sample we adjusted the phasing of the haplotypes, this is because we observed a few cells with whole chromosomes losses, assuming this happened in a single event we rephase the alleles such that in these cells the same allele is lost across the whole chromosome. These cells are likely too rare for schnapps to have taken this information into account. mysample &lt;- &quot;SA535&quot; mychr &lt;- &quot;8&quot; mytitle &lt;- paste0(mysample, &quot; chr &quot;, mychr) # rephase haplotypes newhscn &lt;- hscn[sample == mysample &amp; chr == mychr &amp; ploidy &lt; 4] %&gt;% mutate(Min = ifelse(start &gt; 3.2e+07 &amp; start &lt; 49000001, Maj, Min)) %&gt;% mutate(Maj = ifelse(start &gt; 3.2e+07 &amp; start &lt; 49000001, state - Min, Maj)) %&gt;% mutate(alleleA = ifelse(start &gt; 3.2e+07 &amp; start &lt; 49000001, alleleB, alleleA)) %&gt;% mutate(alleleB = ifelse(start &gt; 3.2e+07 &amp; start &lt; 49000001, totalcounts - alleleA, alleleB)) %&gt;% mutate(BAF = alleleB/totalcounts) %&gt;% add_states() fgfr1 &lt;- gene_copynumber(newhscn, &quot;FGFR1&quot;) %&gt;% arrange(copy) fgfr1low &lt;- fgfr1 %&gt;% filter(copy &lt; 3) clsa535 &lt;- umap_clustering(newhscn, umapmetric = &quot;correlation&quot;, field = &quot;copy&quot;, minPts = 50, seed = 123, min_dist = 0.1) clsa535$clustering &lt;- clsa535$clustering %&gt;% mutate(clone_id = ifelse(cell_id %in% fgfr1low$cell_id, &quot;W&quot;, clone_id)) assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(newhscn[sample == mysample &amp; ploidy &lt; 4], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, mystate = c(1, 3), plottitle = mytitle, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), cl = clsa535, countcutoff = 4, allcells = TRUE, clustfield = &quot;BAF&quot;, show_clone_label = T, minPts = 50, includeSVs = FALSE, genes = &quot;FGFR1&quot;, rephase = F)) ## [1] &quot;Cluster E&quot; &quot;Cluster C&quot; &quot;Cluster D&quot; &quot;Cluster A&quot; &quot;Cluster B&quot; &quot;Cluster 0&quot; ## [7] &quot;Cluster W&quot; ## [1] &quot;Cluster E&quot; ## [1] &quot;Cluster E&quot; ## [1] 224 ## [1] &quot;Cluster E&quot; ## [1] 224 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 224 ## [1] &quot;Cluster C&quot; ## [1] 224 ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 224 ## [1] &quot;Cluster D&quot; ## [1] 224 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 224 ## [1] &quot;Cluster A&quot; ## [1] 224 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 224 ## [1] &quot;Cluster B&quot; ## [1] 224 ## [1] &quot;Cluster 0&quot; ## [1] &quot;Cluster 0&quot; ## [1] 224 ## [1] &quot;Cluster 0&quot; ## [1] 224 ## [1] &quot;Cluster W&quot; ## [1] &quot;Cluster W&quot; ## [1] 224 ## [1] &quot;Cluster W&quot; ## [1] 224 ## NULL ## [1] 224 SA535chr8$merged (sa535plot &lt;- plot_grid(SA535chr8$hm, plot_grid(SA535chr8$plotlistnoaxis$`Cluster W`, SA535chr8$plotlistnoaxis$`Cluster C`, SA535chr8$plotlist$`Cluster E`, rel_heights = c(1, 1, 1.3), ncol = 1))) To illustrate the striking variability, here I’ll pull out some single cells where the amplification is completely absent, moderately amplified and extremely amplified. x &lt;- fgfr1 %&gt;% left_join(., metrics, by = &quot;cell_id&quot;) %&gt;% select(copy, cell_id, coverage_breadth) %&gt;% filter(coverage_breadth &gt; 0.05) %&gt;% distinct(.) g1 &lt;- plotCNprofileBAF(newhscn, cellid = x$cell_id[2], homolog = T, genes = &quot;FGFR1&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, alphaval = 0.4) + ggtitle(x$cell_id[2]) + theme(legend.position = &quot;none&quot;, plot.title = element_text(size = 11, face = &quot;plain&quot;)) g2 &lt;- plotCNprofileBAF(newhscn, cellid = x$cell_id[3], homolog = T, genes = &quot;FGFR1&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, alphaval = 0.4) + ggtitle(x$cell_id[3]) + theme(legend.position = &quot;none&quot;, plot.title = element_text(size = 11, face = &quot;plain&quot;)) g3 &lt;- plotCNprofileBAF(newhscn, cellid = x$cell_id[43], homolog = T, genes = &quot;FGFR1&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, alphaval = 0.4) + ggtitle(x$cell_id[43]) + theme(legend.position = &quot;none&quot;, plot.title = element_text(size = 11, face = &quot;plain&quot;)) g4 &lt;- plotCNprofileBAF(newhscn, cellid = x$cell_id[164], homolog = T, genes = &quot;FGFR1&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, alphaval = 0.4) + ggtitle(x$cell_id[164]) + theme(legend.position = &quot;none&quot;, plot.title = element_text(size = 11, face = &quot;plain&quot;)) g5 &lt;- plotCNprofileBAF(newhscn, cellid = x$cell_id[592], homolog = T, genes = &quot;FGFR1&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, alphaval = 0.4) + ggtitle(x$cell_id[592]) + theme(legend.position = &quot;none&quot;, plot.title = element_text(size = 11, face = &quot;plain&quot;)) g6 &lt;- plotCNprofileBAF(newhscn, cellid = x$cell_id[840], homolog = T, genes = &quot;FGFR1&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, alphaval = 0.4) + ggtitle(x$cell_id[840]) + theme(legend.position = c(0.5, 0.7), plot.title = element_text(size = 11, face = &quot;plain&quot;)) + guides(col = guide_legend(&quot;Allele&quot;, nrow = 2)) gcells &lt;- plot_grid(g1, g2, g3, g4, g5, g6, ncol = 3) gcells 7.4 SA1035 CCNE1 In SA1035 we observed a simpler BFBC type event, similar to what we observed in the cell lines in figure 4. Here we obsereved amplification adjacent to a terminal loss. Some of the amplification had congruent FBI’s and we also observed events that looked like extensions of the loss. As in the case of SA535 we observed some rare cells with whole chromosomes losses which we used to infer that some haplotype assignement in some bins should be reassigned. mysample &lt;- &quot;SA1035&quot; mychr &lt;- &quot;19&quot; newhscn &lt;- hscn[sample == mysample &amp; chr == mychr &amp; ploidy &lt; 4] %&gt;% mutate(Min = ifelse(start &gt; 36000001, Maj, Min)) %&gt;% mutate(Maj = ifelse(start &gt; 36000001, state - Min, Maj)) %&gt;% mutate(alleleA = ifelse(start &gt; 36000001, alleleB, alleleA)) %&gt;% mutate(alleleB = ifelse(start &gt; 36000001, totalcounts - alleleA, alleleB)) %&gt;% mutate(BAF = alleleB/totalcounts) %&gt;% add_states() mytitle &lt;- paste0(mysample, &quot; chr &quot;, mychr) ccne1 &lt;- gene_copynumber(newhscn, &quot;CCNE1&quot;) %&gt;% arrange(copy) ccne1low &lt;- ccne1 %&gt;% filter(copy &lt; 1.4) ccne1high &lt;- ccne1 %&gt;% filter(copy &gt; 5) clsa1035 &lt;- umap_clustering(newhscn, field = &quot;copy&quot;, umapmetric = &quot;euclidean&quot;, minPts = 100, seed = 123) assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(newhscn[sample == mysample &amp; ploidy &lt; 4], bps = bps[sample == mysample], cl = clsa1035, mychr = mychr, mysample = mysample, mystate = c(1, 3), plottitle = mytitle, maxCN = 6, y_axis_trans = &quot;identity&quot;, svlims = c(0, 2), mybreaks = NULL, countcutoff = 4, allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 100, includeSVs = FALSE, genes = &quot;CCNE1&quot;, rephase = F)) ## [1] &quot;Cluster 0&quot; &quot;Cluster E&quot; &quot;Cluster C&quot; &quot;Cluster G&quot; &quot;Cluster B&quot; &quot;Cluster D&quot; ## [7] &quot;Cluster F&quot; &quot;Cluster A&quot; ## [1] &quot;Cluster 0&quot; ## [1] &quot;Cluster 0&quot; ## [1] 94 ## [1] &quot;Cluster 0&quot; ## [1] 94 ## [1] &quot;Cluster E&quot; ## [1] &quot;Cluster E&quot; ## [1] 94 ## [1] &quot;Cluster E&quot; ## [1] 94 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 94 ## [1] &quot;Cluster C&quot; ## [1] 94 ## [1] &quot;Cluster G&quot; ## [1] &quot;Cluster G&quot; ## [1] 94 ## [1] &quot;Cluster G&quot; ## [1] 94 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 94 ## [1] &quot;Cluster B&quot; ## [1] 94 ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 94 ## [1] &quot;Cluster D&quot; ## [1] 94 ## [1] &quot;Cluster F&quot; ## [1] &quot;Cluster F&quot; ## [1] 94 ## [1] &quot;Cluster F&quot; ## [1] 94 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 94 ## [1] &quot;Cluster A&quot; ## [1] 94 ## NULL ## [1] 94 SA1035chr19$merged (sa1035plot &lt;- plot_grid(SA1035chr19$hm, plot_grid(SA1035chr19$plotlistnoaxis$`Cluster A`, SA1035chr19$plotlistnoaxis$`Cluster C`, SA1035chr19$plotlist$`Cluster B`, rel_heights = c(1, 1, 1.3), ncol = 1), ncol = 2)) 7.5 Time series analysis We wanted to investigate whether genomic location consistent with BFBC continue to evolve over long periods of time. To do this we mapped the clusters we identified to time points (both SA535 and SA1035 consistent of samples from multiple PDX passages) and checked whether new clusters emerge over time or are there from the beginning, consistent with a “pucntuated” event where divergent clones are generated over a short space of time. It’s this latter hypothesis that seems to best fit the data. sa1035passage &lt;- clsa1035$clustering %&gt;% mutate(passage = str_extract(cell_id, &quot;X[0-9+]&quot;)) %&gt;% group_by(passage, clone_id) %&gt;% summarize(n = n()) %&gt;% mutate(f = n/sum(n)) %&gt;% ungroup() %&gt;% complete(passage, nesting(clone_id), fill = list(f = 0, n = 0)) %&gt;% mutate(passageidx = as.numeric(str_remove(passage, &quot;X&quot;))) %&gt;% ggplot(aes(x = passageidx, y = f, col = clone_id), alpha = 0.5) + geom_line(size = 1.3) + scale_color_brewer(palette = &quot;Paired&quot;) + xlab(&quot;Passage&quot;) + theme_cowplot(font_size = 11) + ylab(&quot;Frequency&quot;) + ggtitle(&quot;SA1035&quot;) + theme(legend.title = element_blank()) sa535passage &lt;- clsa535$clustering %&gt;% mutate(passage = str_extract(cell_id, &quot;X[0-9+]&quot;)) %&gt;% group_by(passage, clone_id) %&gt;% summarize(n = n()) %&gt;% mutate(f = n/sum(n)) %&gt;% ungroup() %&gt;% complete(passage, nesting(clone_id), fill = list(f = 0, n = 0)) %&gt;% mutate(passageidx = as.numeric(str_remove(passage, &quot;X&quot;))) %&gt;% ggplot(aes(x = passageidx, y = f, col = clone_id)) + scale_color_brewer(palette = &quot;Paired&quot;) + geom_line(size = 1.3) + theme_cowplot(font_size = 11) + ggtitle(&quot;SA535&quot;) + xlab(&quot;Passage&quot;) + ylab(&quot;Frequency&quot;) + theme(legend.title = element_blank()) plot_grid(sa1035passage, sa535passage) We can also generate some muller type plots with thie data. library(EvoFreq) dfsa535 &lt;- clsa535$clustering %&gt;% mutate(passage = str_extract(cell_id, &quot;X[0-9+]&quot;)) %&gt;% group_by(passage, clone_id) %&gt;% summarize(n = n()) %&gt;% mutate(f = n/sum(n)) %&gt;% ungroup() %&gt;% complete(passage, nesting(clone_id), fill = list(f = 0, n = 0)) %&gt;% mutate(passageidx = as.numeric(str_remove(passage, &quot;X&quot;))) %&gt;% select(-f, -passage) %&gt;% pivot_wider(names_from = passageidx, values_from = n) %&gt;% rename(clones = clone_id) %&gt;% mutate(parents = 1) %&gt;% select(parents, clones, everything()) %&gt;% mutate(clones = str_replace(clones, &quot;0&quot;, &quot;X&quot;)) %&gt;% as.data.frame() dfsa535 &lt;- bind_rows(dfsa535, tibble(parents = 0, clones = &quot;1&quot;, `5` = 0, `6` = 0, `7` = 0, `8` = 0, `9` = 0)) pal &lt;- RColorBrewer::brewer.pal(length(dfsa535$clones), &quot;Paired&quot;) freq_frame &lt;- get_evofreq(dfsa535[, seq(3, 7)], dfsa535$clones, dfsa535$parents, pal, scale_by_sizes_at_time = T) ## [1] &quot;pal&quot; ## [1] &quot;pal&quot; ## ## [1] &quot;Getting Mutation Counts&quot; ## | | | 0% | |========== | 14% | |==================== | 29% | |============================== | 43% | |======================================== | 57% | |================================================== | 71% | |============================================================ | 86% | |======================================================================| 100% ## [1] &quot;Getting Plot Positions&quot; ## ## [1] &quot;Smoothing Polygons&quot; ## | | | 0% | |========= | 12% | |================== | 25% | |========================== | 38% | |=================================== | 50% | |============================================ | 62% | |==================================================== | 75% | |============================================================= | 88% | |======================================================================| 100% g1 &lt;- plot_evofreq(freq_frame) + scale_x_continuous(guide = guide_axis(angle = 0)) + ggtitle(&quot;SA535&quot;) dfsa1035 &lt;- clsa1035$clustering %&gt;% mutate(passage = str_extract(cell_id, &quot;X[0-9+]&quot;)) %&gt;% group_by(passage, clone_id) %&gt;% summarize(n = n()) %&gt;% mutate(f = n/sum(n)) %&gt;% ungroup() %&gt;% complete(passage, nesting(clone_id), fill = list(f = 0, n = 0)) %&gt;% mutate(passageidx = as.numeric(str_remove(passage, &quot;X&quot;))) %&gt;% select(-f, -passage) %&gt;% pivot_wider(names_from = passageidx, values_from = n) %&gt;% rename(clones = clone_id) %&gt;% mutate(parents = 1) %&gt;% select(parents, clones, everything()) %&gt;% mutate(clones = str_replace(clones, &quot;0&quot;, &quot;X&quot;)) %&gt;% as.data.frame() dfsa1035 &lt;- bind_rows(dfsa1035, tibble(parents = 0, clones = &quot;1&quot;, `4` = 0, `5` = 0, `6` = 0, `7` = 0, `8` = 0)) pal &lt;- RColorBrewer::brewer.pal(length(dfsa1035$clones), &quot;Paired&quot;) freq_frame &lt;- get_evofreq(dfsa1035[, seq(3, 7)], dfsa1035$clones, dfsa1035$parents, pal, scale_by_sizes_at_time = T) ## [1] &quot;pal&quot; ## [1] &quot;pal&quot; ## ## [1] &quot;Getting Mutation Counts&quot; ## | | | 0% | |========= | 12% | |================== | 25% | |========================== | 38% | |=================================== | 50% | |============================================ | 62% | |==================================================== | 75% | |============================================================= | 88% | |======================================================================| 100% ## [1] &quot;Getting Plot Positions&quot; ## ## [1] &quot;Smoothing Polygons&quot; ## | | | 0% | |======== | 11% | |================ | 22% | |======================= | 33% | |=============================== | 44% | |======================================= | 56% | |=============================================== | 67% | |====================================================== | 78% | |============================================================== | 89% | |======================================================================| 100% g2 &lt;- plot_evofreq(freq_frame) + scale_x_continuous(guide = guide_axis(angle = 0)) + ggtitle(&quot;SA1035&quot;) plot_grid(g1, g2) 7.6 Summary gene copy number Here I’ll plot out the copy number of oncogenes we found to be implicated in BFBC’s. gene_df &lt;- rbindlist(list(gene_copynumber(hscn[sample == &quot;SA604&quot;], &quot;CCNE1&quot;), gene_copynumber(hscn[sample == &quot;SA535&quot;], &quot;FGFR1&quot;), gene_copynumber(hscn[sample == &quot;SA1184&quot;], &quot;MYC&quot;), gene_copynumber(hscn[sample == &quot;SA1181&quot;], &quot;PIK3CA&quot;), gene_copynumber(hscn[sample %in% c(&quot;SA1162&quot;, &quot;SA1035&quot;)], &quot;CCNE1&quot;), gene_copynumber(hscn[sample == &quot;SA1093&quot;], &quot;FGFR3&quot;))) (geneplot &lt;- gene_df %&gt;% mutate(id = paste0(ensembl_gene_symbol, &quot; (&quot;, sample, &quot;)&quot;)) %&gt;% ggplot(aes(x = id, y = copy)) + geom_violin(scale = &quot;width&quot;, alpha = 0.5, fill = &quot;grey70&quot;) + geom_jitter(width = 0.1, height = 0, alpha = 0.5, size = 0.3) + coord_flip() + theme_cowplot(font_size = 11) + xlab(&quot;&quot;) + ylab(&quot;Copy Number&quot;)) 7.7 Legends We need to generate some legends to add to the final plot. hscn_clones &lt;- hscn[sample == &quot;SA1049&quot;] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = &quot;SA1053&quot;) bpsum &lt;- bps %&gt;% filter(sample == &quot;SA1049&quot;) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 3) svlegend &lt;- get_legend(plotSV(bpsum, legend.position = &quot;right&quot;, font_size = 11)) homlegend &lt;- get_legend(plotCNprofileBAF(hscn_clones, homolog = T) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele&quot;, nrow = 2, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn_clones) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 4, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) mylegends &lt;- plot_grid(NULL, svlegend, homlegend, cnlegend, NULL, ncol = 1) 7.8 Final figure timeseries &lt;- plot_grid(sa1035passage, sa535passage, ncol = 1) gfinal &lt;- plot_grid(plot_grid(sa1035plot, NULL, sa535plot, NULL, timeseries, labels = c(&quot;a&quot;, &quot;&quot;, &quot;b&quot;, &quot;&quot;, &quot;c&quot;), rel_widths = c(1, 0.1, 1, 0.1, 0.65), ncol = 5), NULL, plot_grid(NULL, sa1162plot, NULL, mylegends, geneplot, NULL, ncol = 6, labels = c(&quot;&quot;, &quot;d&quot;, &quot;&quot;, &quot;&quot;, &quot;e&quot;, &quot;&quot;, &quot;&quot;), rel_widths = c(0.3, 1, 0.05, 0.2, 1, 0.3)), ncol = 1, rel_heights = c(1, 0.1, 1)) gfinal 7.9 Other BFBC examples I’ll now look for other oncogene amplifications consistent with BFBC. 7.9.1 SA1093 FGFR3 mysample &lt;- &quot;SA1093&quot; mychr &lt;- &quot;4&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample &amp; ploidy &lt; 4], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, plottitle = &quot;SA1093 chr 4&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 5, includeSVs = FALSE, genes = &quot;FGFR3&quot;, adj = -0.15)) ## [1] &quot;Cluster D&quot; &quot;Cluster A&quot; &quot;Cluster B&quot; &quot;Cluster C&quot; ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 279 ## [1] &quot;Cluster D&quot; ## [1] 279 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 279 ## [1] &quot;Cluster A&quot; ## [1] 279 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 280 ## [1] &quot;Cluster B&quot; ## [1] 280 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 276 ## [1] &quot;Cluster C&quot; ## [1] 276 ## NULL ## [1] 276 SA1093chr4$merged (sa1093plot &lt;- plot_grid(SA1093chr4$hm, plot_grid(SA1093chr4$plotlistnoaxis$`Cluster A`, SA1093chr4$plotlistnoaxis$`Cluster D`, SA1093chr4$plotlist$`Cluster B`, rel_heights = c(1, 1, 1.3), ncol = 1))) 7.9.2 SA1181 chr3 mysample &lt;- &quot;SA1181&quot; mychr &lt;- &quot;3&quot; newhscn &lt;- hscn[sample == &quot;SA1181&quot; &amp; chr == &quot;3&quot; &amp; ploidy == 2] %&gt;% mutate(Min = ifelse(start &gt; 123000001 &amp; start &lt; 1.85e+08, Maj, Min)) %&gt;% mutate(Maj = ifelse(start &gt; 123000001 &amp; start &lt; 1.85e+08, state - Min, Maj)) %&gt;% mutate(alleleA = ifelse(start &gt; 123000001 &amp; start &lt; 1.85e+08, alleleB, alleleA)) %&gt;% mutate(alleleB = ifelse(start &gt; 123000001 &amp; start &lt; 1.85e+08, totalcounts - alleleA, alleleB)) %&gt;% mutate(BAF = alleleB/totalcounts) assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(newhscn[sample == mysample &amp; ploidy &lt; 4], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, plottitle = &quot;SA1181 chr 3&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 5, includeSVs = FALSE, genes = &quot;PIK3CA&quot;)) ## [1] &quot;Cluster B&quot; &quot;Cluster A&quot; ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 307 ## [1] &quot;Cluster B&quot; ## [1] 307 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 307 ## [1] &quot;Cluster A&quot; ## [1] 307 ## NULL ## [1] 307 SA1181chr3$merged (sa1181plot &lt;- plot_grid(SA1181chr3$hm, plot_grid(SA1181chr3$plotlistnoaxis$`Cluster A`, SA1181chr3$plotlist$`Cluster B`, rel_heights = c(1, 1.3), ncol = 1), ncol = 2)) 7.9.3 SA604 chr19 mysample &lt;- &quot;SA604&quot; mychr &lt;- &quot;19&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, mystate = c(1, 3), plottitle = &quot;SA604 chr 19&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), countcutoff = 4, allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 50, includeSVs = FALSE, rephase = T, genes = &quot;CCNE1&quot;)) ## [1] &quot;Cluster F&quot; &quot;Cluster A&quot; &quot;Cluster 0&quot; &quot;Cluster E&quot; &quot;Cluster C&quot; &quot;Cluster B&quot; ## [7] &quot;Cluster D&quot; ## [1] &quot;Cluster F&quot; ## [1] &quot;Cluster F&quot; ## [1] 94 ## [1] &quot;Cluster F&quot; ## [1] 94 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 94 ## [1] &quot;Cluster A&quot; ## [1] 94 ## [1] &quot;Cluster 0&quot; ## [1] &quot;Cluster 0&quot; ## [1] 94 ## [1] &quot;Cluster 0&quot; ## [1] 94 ## [1] &quot;Cluster E&quot; ## [1] &quot;Cluster E&quot; ## [1] 94 ## [1] &quot;Cluster E&quot; ## [1] 94 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 93 ## [1] &quot;Cluster C&quot; ## [1] 93 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 93 ## [1] &quot;Cluster B&quot; ## [1] 93 ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 94 ## [1] &quot;Cluster D&quot; ## [1] 94 ## NULL ## [1] 94 SA604chr19$merged (sa604chr19plot &lt;- plot_grid(SA604chr19$hm, plot_grid(SA604chr19$plotlistnoaxis$`Cluster D`, SA604chr19$plotlistnoaxis$`Cluster A`, SA604chr19$plotlist$`Cluster F`, rel_heights = c(1, 1, 1.3), ncol = 1), ncol = 2)) 7.10 SA1184 chr8 mysample &lt;- &quot;SA1184&quot; mychr &lt;- &quot;8&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, plottitle = &quot;SA1184 chr 8&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), countcutoff = 4, allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 30, includeSVs = FALSE, rephase = TRUE, genes = &quot;MYC&quot;)) ## [1] &quot;Cluster E&quot; &quot;Cluster B&quot; &quot;Cluster D&quot; &quot;Cluster A&quot; &quot;Cluster C&quot; ## [1] &quot;Cluster E&quot; ## [1] &quot;Cluster E&quot; ## [1] 214 ## [1] &quot;Cluster E&quot; ## [1] 214 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 214 ## [1] &quot;Cluster B&quot; ## [1] 214 ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 214 ## [1] &quot;Cluster D&quot; ## [1] 214 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 214 ## [1] &quot;Cluster A&quot; ## [1] 214 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 214 ## [1] &quot;Cluster C&quot; ## [1] 214 ## NULL ## [1] 214 SA1184chr8$merged (SA1184chr8plot &lt;- plot_grid(SA1184chr8$hm, plot_grid(SA1184chr8$plotlistnoaxis$`Cluster B`, SA1184chr8$plotlistnoaxis$`Cluster C`, SA1184chr8$plotlist$`Cluster E`, rel_heights = c(1, 1, 1.3), ncol = 1), ncol = 2)) 7.10.1 Merged figure mylegends2 &lt;- plot_grid(NULL, mylegends, NULL, ncol = 1, rel_heights = c(0.5, 1, 0.5)) (gsupp &lt;- plot_grid(plot_grid(plot_grid(SA1184chr8plot, NULL, sa1181plot, ncol = 3, labels = c(&quot;a&quot;, &quot;&quot;, &quot;b&quot;), rel_widths = c(1, 0.1, 1)), NULL, plot_grid(sa1093plot, NULL, sa604chr19plot, ncol = 3, labels = c(&quot;c&quot;, &quot;&quot;, &quot;d&quot;), rel_widths = c(1, 0.1, 1)), ncol = 1, rel_heights = c(1, 0.1, 1)), NULL, mylegends2, ncol = 3, rel_widths = c(1, 0.05, 0.2))) gsupp 7.11 Non oncogeneic amplifications We also found numerous examples where there was no obvious oncogene involved in the amplification. 7.11.1 SA530 chr 15 mysample &lt;- &quot;SA530&quot; mychr &lt;- &quot;15&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample &amp; ploidy &lt; 4], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, mystate = c(1, 3), plottitle = &quot;SA530 chr 15&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 5, includeSVs = FALSE, genes = &quot;IDH2&quot;)) ## [1] &quot;Cluster B&quot; &quot;Cluster A&quot; ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 117 ## [1] &quot;Cluster B&quot; ## [1] 117 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 117 ## [1] &quot;Cluster A&quot; ## [1] 117 ## NULL ## [1] 117 SA530chr15$merged (sa530plot &lt;- plot_grid(SA530chr15$hm, plot_grid(SA530chr15$plotlistnoaxis$`Cluster A`, SA530chr15$plotlist$`Cluster B`, rel_heights = c(1, 1.3), ncol = 1), ncol = 2)) 7.11.2 SA1049 chr20 mysample &lt;- &quot;SA1049&quot; mychr &lt;- &quot;20&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, mystate = c(1, 3), plottitle = &quot;SA1049 chr 20&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 30, includeSVs = FALSE, rephase = TRUE, genes = &quot;CCNE1&quot;)) ## [1] &quot;Cluster E&quot; &quot;Cluster C&quot; &quot;Cluster 0&quot; &quot;Cluster D&quot; &quot;Cluster B&quot; &quot;Cluster A&quot; ## [1] &quot;Cluster E&quot; ## [1] &quot;Cluster E&quot; ## [1] 102 ## [1] &quot;Cluster E&quot; ## [1] 102 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 102 ## [1] &quot;Cluster C&quot; ## [1] 102 ## [1] &quot;Cluster 0&quot; ## [1] &quot;Cluster 0&quot; ## [1] 102 ## [1] &quot;Cluster 0&quot; ## [1] 102 ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 102 ## [1] &quot;Cluster D&quot; ## [1] 102 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 102 ## [1] &quot;Cluster B&quot; ## [1] 102 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 102 ## [1] &quot;Cluster A&quot; ## [1] 102 ## NULL ## [1] 102 SA1049chr20$merged (sa1049chr20plot &lt;- plot_grid(SA1049chr20$hm, plot_grid(SA1049chr20$plotlistnoaxis$`Cluster A`, SA1049chr20$plotlistnoaxis$`Cluster E`, SA1049chr20$plotlist$`Cluster C`, rel_heights = c(1, 1, 1.3), ncol = 1), ncol = 2)) 7.11.3 SA1052 chr15 mysample &lt;- &quot;SA1052&quot; mychr &lt;- &quot;15&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, plottitle = &quot;SA1052 chr 15&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 30, includeSVs = FALSE, rephase = TRUE, genes = &quot;MYC&quot;)) ## [1] &quot;Cluster C&quot; &quot;Cluster A&quot; &quot;Cluster B&quot; ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 117 ## [1] &quot;Cluster C&quot; ## [1] 117 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 117 ## [1] &quot;Cluster A&quot; ## [1] 117 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 117 ## [1] &quot;Cluster B&quot; ## [1] 117 ## NULL ## [1] 117 SA1052chr15$merged (sa1052chr15plot &lt;- plot_grid(SA1052chr15$hm, plot_grid(SA1052chr15$plotlistnoaxis$`Cluster A`, SA1052chr15$plotlistnoaxis$`Cluster B`, SA1052chr15$plotlist$`Cluster C`, rel_heights = c(1, 1, 1.3), ncol = 1), ncol = 2)) 7.11.4 SA1052 chr12 mysample &lt;- &quot;SA1052&quot; mychr &lt;- &quot;12&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, mystate = c(1, 3), plottitle = &quot;SA1052 chr 12&quot;, maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), countcutoff = 4, allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 25, includeSVs = FALSE, genes = &quot;HSP90AB1&quot;)) ## [1] &quot;Cluster E&quot; &quot;Cluster C&quot; &quot;Cluster D&quot; &quot;Cluster B&quot; &quot;Cluster A&quot; ## [1] &quot;Cluster E&quot; ## [1] &quot;Cluster E&quot; ## [1] 207 ## [1] &quot;Cluster E&quot; ## [1] 207 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 207 ## [1] &quot;Cluster C&quot; ## [1] 207 ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 207 ## [1] &quot;Cluster D&quot; ## [1] 207 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 207 ## [1] &quot;Cluster B&quot; ## [1] 207 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 207 ## [1] &quot;Cluster A&quot; ## [1] 207 ## NULL ## [1] 207 SA1052chr12$merged (sa1052plot &lt;- plot_grid(SA1052chr12$hm, plot_grid(SA1052chr12$plotlistnoaxis$`Cluster C`, SA1052chr12$plotlistnoaxis$`Cluster A`, SA1052chr12$plotlistnoaxis$`Cluster E`, ncol = 1), ncol = 2)) 7.11.5 SA501 chr6 mysample &lt;- &quot;SA501&quot; mychr &lt;- &quot;6&quot; mygenes &lt;- &quot;PIK3CA&quot; assign(paste0(mysample, &quot;chr&quot;, mychr), make_bfb_plots_homolog(hscn[sample == mysample], bps = bps[sample == mysample], mychr = mychr, mysample = mysample, plottitle = paste0(mysample, &quot; chr &quot;, mychr), maxCN = 24, y_axis_trans = &quot;squashy&quot;, svlims = c(0, 2), allcells = TRUE, clustfield = &quot;copy&quot;, show_clone_label = T, minPts = 10, includeSVs = FALSE, genes = mygenes)) ## [1] &quot;Cluster R&quot; &quot;Cluster H&quot; &quot;Cluster M&quot; &quot;Cluster E&quot; &quot;Cluster F&quot; &quot;Cluster G&quot; ## [7] &quot;Cluster D&quot; &quot;Cluster 0&quot; &quot;Cluster N&quot; &quot;Cluster P&quot; &quot;Cluster O&quot; &quot;Cluster C&quot; ## [13] &quot;Cluster L&quot; &quot;Cluster Q&quot; &quot;Cluster I&quot; &quot;Cluster B&quot; &quot;Cluster J&quot; &quot;Cluster A&quot; ## [19] &quot;Cluster K&quot; ## [1] &quot;Cluster R&quot; ## [1] &quot;Cluster R&quot; ## [1] 262 ## [1] &quot;Cluster R&quot; ## [1] 262 ## [1] &quot;Cluster H&quot; ## [1] &quot;Cluster H&quot; ## [1] 262 ## [1] &quot;Cluster H&quot; ## [1] 262 ## [1] &quot;Cluster M&quot; ## [1] &quot;Cluster M&quot; ## [1] 262 ## [1] &quot;Cluster M&quot; ## [1] 262 ## [1] &quot;Cluster E&quot; ## [1] &quot;Cluster E&quot; ## [1] 262 ## [1] &quot;Cluster E&quot; ## [1] 262 ## [1] &quot;Cluster F&quot; ## [1] &quot;Cluster F&quot; ## [1] 262 ## [1] &quot;Cluster F&quot; ## [1] 262 ## [1] &quot;Cluster G&quot; ## [1] &quot;Cluster G&quot; ## [1] 262 ## [1] &quot;Cluster G&quot; ## [1] 262 ## [1] &quot;Cluster D&quot; ## [1] &quot;Cluster D&quot; ## [1] 262 ## [1] &quot;Cluster D&quot; ## [1] 262 ## [1] &quot;Cluster 0&quot; ## [1] &quot;Cluster 0&quot; ## [1] 262 ## [1] &quot;Cluster 0&quot; ## [1] 262 ## [1] &quot;Cluster N&quot; ## [1] &quot;Cluster N&quot; ## [1] 262 ## [1] &quot;Cluster N&quot; ## [1] 262 ## [1] &quot;Cluster P&quot; ## [1] &quot;Cluster P&quot; ## [1] 262 ## [1] &quot;Cluster P&quot; ## [1] 262 ## [1] &quot;Cluster O&quot; ## [1] &quot;Cluster O&quot; ## [1] 262 ## [1] &quot;Cluster O&quot; ## [1] 262 ## [1] &quot;Cluster C&quot; ## [1] &quot;Cluster C&quot; ## [1] 262 ## [1] &quot;Cluster C&quot; ## [1] 262 ## [1] &quot;Cluster L&quot; ## [1] &quot;Cluster L&quot; ## [1] 262 ## [1] &quot;Cluster L&quot; ## [1] 262 ## [1] &quot;Cluster Q&quot; ## [1] &quot;Cluster Q&quot; ## [1] 262 ## [1] &quot;Cluster Q&quot; ## [1] 262 ## [1] &quot;Cluster I&quot; ## [1] &quot;Cluster I&quot; ## [1] 262 ## [1] &quot;Cluster I&quot; ## [1] 262 ## [1] &quot;Cluster B&quot; ## [1] &quot;Cluster B&quot; ## [1] 262 ## [1] &quot;Cluster B&quot; ## [1] 262 ## [1] &quot;Cluster J&quot; ## [1] &quot;Cluster J&quot; ## [1] 262 ## [1] &quot;Cluster J&quot; ## [1] 262 ## [1] &quot;Cluster A&quot; ## [1] &quot;Cluster A&quot; ## [1] 262 ## [1] &quot;Cluster A&quot; ## [1] 262 ## [1] &quot;Cluster K&quot; ## [1] &quot;Cluster K&quot; ## [1] 262 ## [1] &quot;Cluster K&quot; ## [1] 262 ## NULL ## [1] 262 get(paste0(mysample, &quot;chr&quot;, mychr))$merged (sa501chr6plot &lt;- plot_grid(get(paste0(mysample, &quot;chr&quot;, mychr))$hm, plot_grid(get(paste0(mysample, &quot;chr&quot;, mychr))$plotlistnoaxis$`Cluster M`, get(paste0(mysample, &quot;chr&quot;, mychr))$plotlistnoaxis$`Cluster G`, get(paste0(mysample, &quot;chr&quot;, mychr))$plotlistnoaxis$`Cluster B`, ncol = 1), ncol = 2)) 7.11.6 Supp figure 2 nooncogenes mylegends2 &lt;- plot_grid(NULL, mylegends, NULL, ncol = 1, rel_heights = c(0.5, 1, 0.5)) gsupp &lt;- plot_grid(plot_grid(plot_grid(sa1052plot, NULL, sa1049chr20plot, ncol = 3, labels = c(&quot;a&quot;, &quot;&quot;, &quot;b&quot;), rel_widths = c(1, 0.1, 1)), NULL, plot_grid(sa501chr6plot, NULL, sa530plot, ncol = 3, labels = c(&quot;c&quot;, &quot;&quot;, &quot;d&quot;), rel_widths = c(1, 0.1, 1)), ncol = 1, rel_heights = c(1, 0.1, 1)), mylegends2, rel_widths = c(1, 0.2)) gsupp save_plot(here(&quot;Figures/Supp/Fig_bfb_nononcogenes_tumors.png&quot;), gsupp, base_height = 10, base_width = 15) save_plot(here(&quot;Figures/Supp/Fig_bfb_nononcogenes_tumors.pdf&quot;), gsupp, base_height = 10, base_width = 15) "],["phylogenetic-trees.html", "Section 8 Phylogenetic trees 8.1 Load data + packages 8.2 Heatmaps", " Section 8 Phylogenetic trees 8.1 Load data + packages We’ll first load some packages, scripts and data. library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) library(ape) here::i_am(&quot;01-figure1.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) hscn &lt;- fread(config$hscn) source(here(&quot;src/heatmaps.R&quot;)) source(here(&quot;src/tree_utils.R&quot;)) alldatasets &lt;- unique(hscn$sample) 8.2 Heatmaps for (dataset in alldatasets) { # cat(&#39;\\n \\n&#39;) cat(paste0(&#39;### Sample &#39;, dataset, &#39;\\n&#39;)) print(createfigure(dataset)) cat(&quot;\\n \\n&quot;) } "],["supplementary-figures.html", "Section 9 Supplementary Figures 9.1 Load data 9.2 WGS vs DLP 9.3 All WGS vs DLP plots", " Section 9 Supplementary Figures 9.1 Load data 9.2 WGS vs DLP library(ggridges) source(here(&quot;src/wgs_dlp.R&quot;)) g1 &lt;- get_wgs_dlp_plot(hscn, &quot;SA1049&quot;) g2 &lt;- get_wgs_dlp_plot(hscn, &quot;SA1050&quot;) examples &lt;- plot_grid(g1, g2, ncol = 1, labels = c(&quot;a&quot;)) stats &lt;- fread(config$wgsstats) gloh &lt;- stats %&gt;% ggplot(aes(x = loh.dlp, y = loh.wgs)) + ggrepel::geom_text_repel(aes(label = sample)) + geom_abline(lty = 2, alpha = 0.5, col = &quot;grey40&quot;) + xlim(c(0, 0.6)) + ylim(c(0, 0.6)) + xlab(&quot;Fraction of genome LOH (DLP Pseudobulk)&quot;) + ylab(&quot;Fraction of genome LOH (Bulk)&quot;) snv_summary &lt;- snvs %&gt;% .[max_strelka_score &gt; 20 &amp; max_museq_score &gt; 0.9 &amp; is_dbsnp == 0 &amp; !is.na(mappability)] %&gt;% .[, list(total_counts = sum(total_counts), alt_counts = sum(alt_counts)), by = .(state_AS_phased, state, chr, start, ref, alt, LOH, Maj, Min, sample)] %&gt;% mutate(type = case_when( Maj == Min ~ &quot;Balanced&quot;, Min == 0 | Maj == 0 ~ &quot;LOH&quot;, Min != Maj ~ &quot;Unbalanced&quot; )) %&gt;% mutate(VAF = alt_counts / (total_counts)) dfdata &lt;- data.frame(type = c(&quot;Balanced&quot;, &quot;LOH&quot;), x = c(0.5, 1.0)) dat_text &lt;- data.frame(type = c(&quot;Unbalanced&quot;, &quot;Unbalanced&quot;), label = c(&quot;Early&quot;, &quot;Late&quot;), x = c(0.85, 0.15)) (gVAF &lt;- snv_summary %&gt;% group_by(state_AS_phased, sample) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 8 &amp; state &gt; 0, total_counts &gt; 19, n &gt; 100) %&gt;% #filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 100) %&gt;% ggplot(aes(fill = type, col = type)) + #geom_density_ridges(scale = 2, alpha = 0.3, stat = &quot;binline&quot;, bins = 50) + geom_density_ridges(aes(y = fct_reorder(state_AS_phased, state), x = VAF), scale = 2, alpha = 0.3) + theme_ridges(center_axis_labels = TRUE) + geom_vline(data = dfdata, aes(xintercept = x), lty = 2, col = &quot;grey40&quot;) + scale_x_continuous(breaks = c(0.0, 0.5, 1.0)) + scale_color_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + scale_fill_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + xlab(&quot;Variant allele frequency (somatic mutations)&quot;) + ylab(&quot;Allele specific state&quot;) + facet_wrap(~type, scales = &quot;free_y&quot;) + panel_border() + theme(legend.position = &quot;none&quot;) + geom_text(data = dat_text, aes(label = label, x = x, y = 13.3), col = &quot;black&quot;)) combined &lt;- plot_grid(NULL, examples, plot_grid(gloh, gVAF, labels = c(&quot;b&quot;, &quot;c&quot;), rel_widths = c(0.75, 1)), ncol = 1, rel_heights = c(0.02, 1, 0.55)) combined 9.3 All WGS vs DLP plots samples &lt;- names(config$datasets) samples &lt;- samples[!samples %in% config$datagroups$htert] samples &lt;- samples[samples != &quot;2295&quot;] samples &lt;- intersect(samples, unique(hscn$sample)) for (dataset in samples) { print(get_wgs_dlp_plot(hscn, dataset, rephase = F)) cat(&quot;\\n \\n&quot;) } "]]
