[["index.html", "Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Section 1 Foreword 1.1 Data 1.2 Computing requirements", " Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Marc J. Williams 2021-05-23 Section 1 Foreword This document contains code to fully reproduce the figures of our paper: “Paper title”. Each “chapter” is associated with a main figure in the paper and will produce that figure and any supplementary tables or figures. 1.1 Data The analysis contained here starts from a set of processed results which include: allele specific copy number per cell in 500Kb bins across the genome (output from schnapps) snv counts per cell phylogenetic trees allele imbalance in scRNA (inferred from schnapps) cell and sample metadata You can download these results from here and see the pipeline that generate these results here. 1.2 Computing requirements Most of the heavy lifting has been done in the pre-processing so computing requirements are not too onerous. However, some of the data files are very large and so you will need a computer with a reasonably large amount of RAM. 50Gb or so should be fine. "],["figure-1.html", "Section 2 Figure 1 2.1 Load data + packages 2.2 Summary stats 2.3 Single cell example 2.4 SNVs 2.5 BAF distributions 2.6 Heatmaps 2.7 Main Figure 2.8 RNA vs DNA", " Section 2 Figure 1 2.1 Load data + packages We’ll first load some packages and the data from the OV2295 cell lines. library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) here::i_am(&quot;01-figure1.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) OV2295 &lt;- readRDS(file.path(glue(&quot;{config$Rdatadir}2295.Rdata&quot;))) metrics &lt;- fread(config$metrics) 2.2 Summary stats Now we’ll look at some general stats, like coveraget per cell etc. Here’s the quantiles of coverage depth per cell in the OV2295 dataset. quantile(OV2295$CNVmetrics$coverage_depth, c(0.025, 0.05, 0.5, 0.95, 0.975)) ## 2.5% 5% 50% 95% 97.5% ## 0.04214450 0.06990785 0.16244150 0.30273730 0.31527105 From the metrics file we can pull out the average coverage per sample, we’ll also add the mutation status of TP53, BRCA1 and BRCA2. sampletags &lt;- data.frame(sample = unique(metrics$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$label &lt;- unlist(lapply(sampletags$sample, function(x) str_replace(config$datasets[[x]]$label, &quot;\\\\s[0-9].*&quot;, &quot;&quot;))) sampletags$BRCA1 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA1)) sampletags$BRCA2 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA2)) sampletags$TP53 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$TP53)) stats &lt;- metrics[, `:=`(htert, ifelse(sample %in% config$datagroups$htert, &quot;hTERT Cell line&quot;, &quot;Tumour&quot;))] %&gt;% filter(!sample %in% c(&quot;SA1101a&quot;, &quot;SA1101b&quot;)) %&gt;% .[, list(ncells = length(unique(cell_id)), cov = median(coverage_depth), cov_cilow = quantile(coverage_depth, 0.025), cov_cihigh = quantile(coverage_depth, 0.975), nsamples = length(unique(sample_id))), by = c(&quot;sample&quot;, &quot;htert&quot;)] %&gt;% left_join(sampletags) stats %&gt;% mutate(Coverage = paste0(round(cov, 3), &quot; (&quot;, round(cov_cilow, 3), &quot;,&quot;, round(cov_cihigh, 3), &quot;)&quot;)) %&gt;% mutate(genotype = ifelse(htert != &quot;Tumour&quot;, label, &quot;&quot;)) %&gt;% mutate(datagroup = toupper(datagroup)) %&gt;% mutate(Timeseries = &quot;No&quot;) %&gt;% select(sample, htert, datagroup, nsamples, ncells, Coverage, genotype, TP53, BRCA1, BRCA2) %&gt;% rename(Sample = sample, datatype = htert, Histotype = datagroup, Samples = nsamples, Cells = ncells, Genotype = genotype) %&gt;% DT::datatable(., extensions = &quot;FixedColumns&quot;, options = list(scrollX = TRUE, fixedColumns = list(leftColumns = 1))) 2.3 Single cell example Here is an example allele specific copy number profile from a single cell. cells &lt;- OV2295$CNVmetrics %&gt;% arrange(desc(coverage_breadth)) %&gt;% filter(coverage_breadth &lt; 0.1) celldat &lt;- plotCNprofileBAF(OV2295$ascn$data %&gt;% filter(state_phase != &quot;B-LOH&quot;), y_axis_trans = &quot;squashy&quot;, maxCN = 20, cellid = cells$cell_id[5], pointsize = 0.6, returnlist = TRUE) BAFcolpal &lt;- scCNphase_cols()[c(1, 3, 5)] legends &lt;- cowplot::plot_grid(NULL, get_legend(celldat$CN + theme_cowplot(font_size = 12, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), get_legend(celldat$BAF + theme_cowplot(font_size = 12) + guides(col = guide_legend(&quot;ASCN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), NULL, ncol = 4, rel_widths = c(0.1, 1, 1, 4)) (gcell &lt;- cowplot::plot_grid(celldat$BAF + theme(legend.position = &quot;none&quot;), celldat$CN + theme(legend.position = &quot;none&quot;) + ggplot2::scale_y_continuous(breaks = c(0, 2, 5, 10, 20), limits = c(0, 24), trans = &quot;squashy&quot;), cowplot::plot_grid(legends, NULL, ncol = 1, rel_heights = c(1, 0.5)), align = &quot;v&quot;, ncol = 1, rel_heights = c(1, 1, 0.22))) Figure 2.1: Single cell example 2.4 SNVs To confirm that the allele specific inference is accurate we looked at single nucleotide variant allele frequencies per allele specific copy number state. Here, I’ll read in the SNV data and map the SNVs to allele specific states. snv &lt;- snv_states(select(OV2295$SNVCN, chr, start, ref, alt, cell_id, ref_counts, alt_counts) %&gt;% mutate(end = start), OV2295$ascn$data) %&gt;% na.omit() %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) blacklist &lt;- fread(&quot;data/dlp_snv_blacklist.csv&quot;) snv_summary &lt;- snv %&gt;% group_by(state_AS_phased, state, chr, start, ref, alt, LOH, Maj, Min, sample_id) %&gt;% summarise(ref_counts = sum(ref_counts), alt_counts = sum(alt_counts)) %&gt;% ungroup() %&gt;% mutate(totcounts = alt_counts + ref_counts) %&gt;% mutate(type = case_when(Maj == Min ~ &quot;Balanced&quot;, Min == 0 ~ &quot;LOH&quot;, Min != Maj ~ &quot;Unbalanced&quot;)) %&gt;% mutate(VAF = alt_counts/(totcounts)) %&gt;% group_by(chr, start, ref) %&gt;% mutate(n_sample_id = length(unique(sample_id))) %&gt;% ungroup() %&gt;% left_join(., OV2295$SNVannot) %&gt;% filter(max_strelka_score &gt; 20 &amp; max_museq_score &gt; 0.9) %&gt;% filter(!start %in% blacklist$start) %&gt;% filter(!is.na(mappability)) Now we can plot the distributions. library(ggridges) dfdata &lt;- data.frame(type = c(&quot;Balanced&quot;, &quot;LOH&quot;, &quot;Unbalanced&quot;,&quot;Unbalanced&quot;,&quot;Unbalanced&quot;,&quot;Unbalanced&quot;), x = c(0.5, 1.0, 1/3, 2/3, 1/4, 3/4)) dfdata &lt;- data.frame(type = c(&quot;Balanced&quot;, &quot;LOH&quot;), x = c(0.5, 1.0)) dat_text &lt;- data.frame(type = c(&quot;Unbalanced&quot;, &quot;Unbalanced&quot;), label = c(&quot;Early&quot;, &quot;Late&quot;), x = c(0.85, 0.15)) x &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% #filter(clone_id == &quot;D&quot;) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 200) %&gt;% #filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 50) (gVAF &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% #filter(clone_id == &quot;D&quot;) %&gt;% filter(is_dbsnp == 0, mappability &gt; 0.99) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 100) %&gt;% #filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 100) %&gt;% ggplot(aes(fill = type, col = type)) + #geom_density_ridges(scale = 2, alpha = 0.3, stat = &quot;binline&quot;, bins = 50) + geom_density_ridges(aes(y = state_AS_phased, x = VAF), scale = 2, alpha = 0.3) + theme_ridges(center_axis_labels = TRUE) + geom_vline(data = dfdata, aes(xintercept = x), lty = 2, col = &quot;grey40&quot;) + scale_x_continuous(breaks = c(0.0, 0.5, 1.0)) + scale_color_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + scale_fill_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + xlab(&quot;Variant allele frequency (somatic mutations)&quot;) + ylab(&quot;Allele specific state&quot;) + facet_wrap(~type, scales = &quot;free_y&quot;) + panel_border() + theme(legend.position = &quot;none&quot;) + geom_text(data = dat_text, aes(label = label, x = x, y = 9.3), col = &quot;black&quot;)) Figure 2.2: VAF distributions per allele specific state for OV2295 2.5 BAF distributions Another sanity check is to plot the BAF distribution per state. gBAF &lt;- plotBAFperstate(OV2295$hscn$data %&gt;% filter(phase != &quot;B&quot;, state &gt; 0), maxstate = 10, minfrac = 0) + scale_y_continuous(limits = c(0, 0.75), breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(legend.position = &quot;none&quot;) + xlab(&quot;Allele specific state&quot;) gBAF Figure 2.3: BAF distributions per allele specific state for OV2295 2.6 Heatmaps Now I’ll plot the heatmaps. library(grid) library(ComplexHeatmap) source(here(&quot;src/tree_utils.R&quot;)) chroms &lt;- unique(OV2295$hscn$data$chr) chroms &lt;- chroms[!chroms %in% c(&quot;14&quot;, &quot;16&quot;, &quot;18&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;)] mysample &lt;- &quot;2295&quot; tree &lt;- get_and_format_tree(&quot;2295&quot;) tree &lt;- ape::compute.brlen(tree, 1) mycl &lt;- data.frame(cell_id = tree$tip.label, clone_id = &quot;0&quot;) cndat &lt;- OV2295$ascn$data hm_state &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state&quot;, sample_label_idx = 1, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = FALSE, clusters = mycl, normalize_tree = FALSE, plottree = TRUE, plotfrequency = FALSE, ) hm_copy &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;copy&quot;, sample_label_idx = 2, #library_mapping = lab_mapping, show_library_label = FALSE, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF2 &lt;- plotHeatmap( OV2295$hscn$data, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAFraw &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;BAF&quot;, sample_label_idx = 2, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) w = 40 h = 13/3 hm &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hm_state + hm_BAF, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) cowplot::plot_grid(hm) Figure 2.4: Heatmaps for OV2295 ordered by phylogeny 2.7 Main Figure Here I’ll contruct the final figure used in the paper. library(cowplot) library(grid) library(ComplexHeatmap) top1 &lt;- cowplot::plot_grid(gcell, labels = c(&quot;a&quot;)) top2 &lt;- cowplot::plot_grid(gBAF, gVAF, labels = c(&quot;b&quot;, &quot;c&quot;)) w = 40 h = 13/3 hm_cowp &lt;- cowplot::plot_grid(NULL, hm, rel_widths = c(0.04, 1), labels = c(&quot;d&quot;, &quot;&quot;)) gall &lt;- cowplot::plot_grid(top1, top2, hm_cowp, ncol = 1) gall Figure 2.5: Figure 1 2.8 RNA vs DNA rna &lt;- fread(&quot;/work/shah/william1/projects/scRNAseq_AS/results/ASinference/perpatient_dp/2295.csv.gz&quot;) rnacells &lt;- rna %&gt;% group_by(cell_id) %&gt;% summarise(x = sum(total)) %&gt;% arrange(desc(x)) hmrna &lt;- plotHeatmapBAF(rna %&gt;% filter(cell_id %in% rnacells$cell_id[1:2000]), arms = unique(rna$chrarm)) chrarm &lt;- schnapps::per_chrarm_cn(OV2295$hscn$data, arms = unique(rna$chrarm)) hmdna &lt;- plotHeatmapBAF(OV2295$hscn$data, arms = unique(rna$chrarm)) hm_dnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmdna, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) hm_rnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmrna, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) grnahmps &lt;- plot_grid(NULL, hm_dnag, NULL, hm_rnag, ncol = 1, labels = c(&quot;a DNA&quot;,&quot;&quot;, &quot;b RNA&quot;), rel_heights = c(0.1, 1, 0.1, 1)) seur &lt;- readRDS(glue(&quot;{config$rna}ASinference/perpatient_combined/2295-seurat.Rdata&quot;)) cell_sample_rna &lt;- seur@meta.data cell_sample_rna$cell_id &lt;- row.names(cell_sample_rna) cell_sample_rna &lt;- select(cell_sample_rna, cell_id, sample) rna &lt;- rna %&gt;% left_join(cell_sample_rna) dna_baf &lt;- chrarm dna_baf &lt;- dna_baf %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) %&gt;% rename(sample = sample_id) dfbaf_joint &lt;- bind_rows(dna_baf %&gt;% mutate(dtype = &quot;DNA&quot;), rna %&gt;% mutate(dtype = &quot;RNA&quot;)) dfbaf_join_summary &lt;- dfbaf_joint %&gt;% filter(total &gt; 9) %&gt;% group_by(chrarm, dtype, sample) %&gt;% summarise(total = mean(total), BAF = median(BAF)) %&gt;% pivot_wider(names_from = &quot;dtype&quot;, values_from = c(&quot;BAF&quot;, &quot;total&quot;)) corrplot &lt;- dfbaf_join_summary %&gt;% filter(chrarm != &quot;X&quot;, !is.na(sample)) %&gt;% # filter(total_RNA &gt; 10) %&gt;% ggplot(aes(x = BAF_DNA, y = BAF_RNA)) + geom_point(aes(col = sample)) + xlab(&quot;Median BAF per chr \\n (DNA)&quot;) + ylab(&quot;Median BAF per chr \\n (RNA)&quot;) + geom_abline(lty = 2) + theme_cowplot() + scale_color_manual(values = c(&quot;plum4&quot;, &quot;firebrick3&quot;, &quot;deepskyblue2&quot;)) + theme(legend.title = element_blank(), legend.position = c(0.25, 0.8)) #+geom_smooth(method = &#39;lm&#39;) gall &lt;- plot_grid(grnahmps, plot_grid(NULL, corrplot, NULL, rel_heights = c(0.4, 1, 0.4), ncol = 1, labels = c(&quot;&quot;, &quot;c&quot;)), ncol = 2, rel_widths = c(1, 0.5)) gall Figure 2.6: Comparison of allele imbalance in RNA vs DNA "],["figure-2.html", "Section 3 Figure 2 3.1 Load data + packages 3.2 PCAWG data 3.3 Frequency plots 3.4 Correlation analysis 3.5 Frequency per CCF 3.6 TP53 + BRCA snvs 3.7 Fraction of genome gained 3.8 Chromosome event rates 3.9 Composite figure", " Section 3 Figure 2 3.1 Load data + packages library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) library(yaml) here::i_am(&quot;02-figure2.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) theme_set(theme_cowplot()) hscn &lt;- fread(config$hscn) ploidy &lt;- fread(config$ploidy) hscn &lt;- hscn[ploidy, on = &quot;cell_id&quot;] sampletags &lt;- data.frame(sample = unique(hscn$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$sig_label &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$label)) 3.2 PCAWG data In this figure we compare copy number landscapes to those observed in PCAWG. So I’ll first read in the PCAWG copy number data and bin the data so it’s easy to compare with our single cell data. source(here(&quot;src/cn_utils.R&quot;)) pcawg &lt;- fread(here(&quot;data/pcawg.csv&quot;)) %&gt;% dplyr::rename(chr = chromosome) ploidy &lt;- fread(here(&quot;data/pcawg.consensus.20170217.purity.ploidy.txt&quot;)) %&gt;% dplyr::rename(sample = samplename) pcawg &lt;- left_join(pcawg, ploidy) # bin data both_bins &lt;- getCNstate(pcawg %&gt;% filter(cancertype == &quot;OV&quot; | cancertype == &quot;BRCA&quot;) %&gt;% dplyr::rename(cell_id = sample), ncores = 20) both_bins &lt;- both_bins %&gt;% as.data.table() %&gt;% na.omit() %&gt;% group_by(chr, start, end, cell_id, ploidy) %&gt;% summarize(total_cn = mean(total_cn), minor_cn = mean(minor_cn)) %&gt;% ungroup() plboth &lt;- both_bins %&gt;% as.data.table() %&gt;% .[chr != &quot;Y&quot;] %&gt;% .[, list(gain = sum(total_cn &gt; round(ploidy), na.rm = TRUE)/.N, loss = sum(total_cn &lt; round(ploidy), na.rm = TRUE)/.N, loh = sum(minor_cn == 0, na.rm = TRUE)/.N, n = .N), by = .(chr, start, end)] %&gt;% plottinglist_() Here is the landscape of CNAs in the PCAWG cohort for BRCA + OV. genplot(plboth, &quot;PCAWG&quot;, alphaval = 0.5, ylabel = &quot;Cohort fraction&quot;) Figure 3.1: PCAWG landscape 3.3 Frequency plots We want to compare the landscape of alterations that are clonal to those that are rare. So here, for each bin I’ll compute the fraction of samples that have a clonal (CCF &gt; 0.95) event and events at CCF &gt; 0.01. Here an “event” is a gain or loss relative to cell ploidy or LOH. LOH is defined as a bin where either allele is absent so includes monosomies, copy neutral LOH and LOH + gains. library(ggrepel) cutoffhigh &lt;- 0.95 cutofflow &lt;- 0.01 pl &lt;- hscn %&gt;% .[!is.na(chr)] %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, gainLOH = sum(state &gt; ploidy &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, lossLOH = sum(state == 2 &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, LOH = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(gain_clonal = sum(gain &gt;= cutoffhigh, na.rm = TRUE)/.N, gain_rare = sum(gain &gt;= cutofflow, na.rm = TRUE)/.N, gain_clonal_loh = sum(gainLOH &gt;= cutoffhigh, na.rm = TRUE)/.N, gain_rare_loh = sum(gainLOH &lt;= cutofflow &amp; gainLOH &gt; 0, na.rm = TRUE)/.N, loh_clonal = sum(LOH &gt;= cutoffhigh, na.rm = TRUE)/.N, loh_rare = sum(LOH &gt;= cutofflow, na.rm = TRUE)/.N, loss_clonal = sum(loss &gt;= cutoffhigh, na.rm = TRUE)/.N, loss_rare = sum(loss &gt;= cutofflow, na.rm = TRUE)/.N, loss_clonal_loh = sum(lossLOH &gt;= cutoffhigh, na.rm = TRUE)/.N, loss_rare_loh = sum(lossLOH &lt; cutofflow &amp; lossLOH &gt; 0, na.rm = TRUE)/.N), by = .(chr, start, end)] %&gt;% plottinglist_() 3.3.1 Clonal frequencies With this data I’ll generate some frequency track plots, annotating some genes of interest. Firstly for gains. alphaval &lt;- 0.5 textsize &lt;- 2 filltype &lt;- &quot;stack&quot; #&#39;identity&#39; datgain &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;gain_clonal&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) genesgain &lt;- gene_regions %&gt;% filter(oncogene == TRUE | tumor_suppressor == TRUE) %&gt;% filter(ensembl_gene_symbol %in% c(&quot;MYC&quot;, &quot;KRAS&quot;, &quot;PIK3CA&quot;)) %&gt;% mutate(start = floor(start/5e+05) * 5e+05 + 1, end = floor(start/5e+05) * 5e+05 + 5e+05) %&gt;% mutate(chr = str_remove_all(chr, &quot;chr&quot;)) %&gt;% mutate(ensembl_gene_symbol = ifelse(ensembl_gene_symbol == &quot;PIK3CA&quot;, &quot;PIK3CA,\\n MECOM, TP63&quot;, ensembl_gene_symbol)) genesgain &lt;- left_join(genesgain, datgain, by = c(&quot;chr&quot;, &quot;start&quot;, &quot;end&quot;)) %&gt;% group_by(chr, start, end, ensembl_gene_symbol, idx) %&gt;% summarise(frequency = sum(frequency)) %&gt;% ungroup() cgains &lt;- datgain %&gt;% filter(str_detect(type, &quot;gain_clonal&quot;)) %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE)) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + scale_fill_manual(values = c(&quot;#550000&quot;), labels = c(&quot;Gain&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + geom_label_repel(data = genesgain, aes(x = idx, label = ensembl_gene_symbol), force = 10, alpha = 0.75, segment.color = &quot;black&quot;, size = textsize, segment.size = 0.3, min.segment.length = 0.01, ylim = c(0.68, NA), direction = &quot;both&quot;, nudge_y = 0) Now for losses: datloss &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loss_clonal&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) genesloss &lt;- gene_regions %&gt;% filter(oncogene == TRUE | tumor_suppressor == TRUE) %&gt;% filter(ensembl_gene_symbol %in% c(&quot;TP53&quot;, &quot;RB1&quot;, &quot;BRCA1&quot;, &quot;BRCA2&quot;, &quot;MAP3K1&quot;)) %&gt;% mutate(start = floor(start/5e+05) * 5e+05 + 1, end = floor(start/5e+05) * 5e+05 + 5e+05) %&gt;% mutate(chr = str_remove_all(chr, &quot;chr&quot;)) genesloss &lt;- left_join(genesloss, datloss, by = c(&quot;chr&quot;, &quot;start&quot;, &quot;end&quot;)) %&gt;% group_by(chr, start, end, ensembl_gene_symbol, idx) %&gt;% summarise(frequency = sum(frequency)) %&gt;% ungroup() closs &lt;- datloss %&gt;% ggplot(aes(x = idx, y = -frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE), position = &quot;top&quot;) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;#28536C&quot;, &quot;#032336&quot;), labels = c(&quot;Loss&quot;, &quot;Copy Neutral LOH&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, -0.5, -1), labels = c(&quot;0.0&quot;, &quot;0.5&quot;, &quot;1.0&quot;), limits = c(-1, 0)) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.title = element_blank()) + geom_label_repel(data = genesloss, aes(x = idx, label = ensembl_gene_symbol), alpha = 0.7, force = 10, segment.color = &quot;black&quot;, size = textsize, segment.size = 0.3, min.segment.length = 0.01, ylim = c(NA, -0.7), direction = &quot;both&quot;, nudge_y = 0) + guides(guide = ggplot2::guide_axis(check.overlap = TRUE)) And finally for LOH datloh &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loh_clonal&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) genesloh &lt;- gene_regions %&gt;% filter(oncogene == TRUE | tumor_suppressor == TRUE) %&gt;% filter(ensembl_gene_symbol %in% c(&quot;RB1&quot;, &quot;BRCA2&quot;)) %&gt;% mutate(start = floor(start/5e+05) * 5e+05 + 1, end = floor(start/5e+05) * 5e+05 + 5e+05) %&gt;% mutate(chr = str_remove_all(chr, &quot;chr&quot;)) genesloh &lt;- left_join(genesloh, datloh, by = c(&quot;chr&quot;, &quot;start&quot;, &quot;end&quot;)) %&gt;% group_by(chr, start, end, ensembl_gene_symbol, idx) %&gt;% summarise(frequency = sum(frequency)) %&gt;% ungroup() cloh &lt;- datloh %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE), position = &quot;bottom&quot;) + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;Grey70&quot;), labels = c(&quot;LOH&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + geom_label_repel(data = genesloh, aes(x = idx, label = ensembl_gene_symbol), force = 10, alpha = 0.7, segment.color = &quot;black&quot;, size = textsize, segment.size = 0.3, min.segment.length = 0.01, ylim = c(0.6, NA), direction = &quot;both&quot;, nudge_y = 0) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) And here are the plots. title &lt;- ggdraw() + draw_label( &quot;CCF &gt; 95 %&quot;, fontface = &#39;bold&#39;, x = 0.01, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) clonal &lt;- cowplot::plot_grid( title, cloh + theme(legend.position = c(0.05, 0.9)), cgains + theme(legend.position = c(0.05, 0.9)) + ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = c(0.05, 0.1)), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8)) clonal Figure 3.2: Landscape at CCF &gt; 95% We can also add on the PCAWG frequencies to compare. pcawglinesize &lt;- 0.3 clonal_pcawg &lt;- cowplot::plot_grid(title, cloh + theme(legend.position = c(0.05, 0.7)) + geom_line(data = plboth$CNbins, aes(x = idx, y = loh, col = &quot;PCAWG&quot;), size = pcawglinesize) + scale_color_manual(values = &quot;Grey50&quot;), cgains + theme(legend.position = c(0.05, 0.9)) + geom_line(data = plboth$CNbins, aes(x = idx, y = gain), col = &quot;#550000&quot;, size = pcawglinesize) + ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = c(0.05, 0.1)) + geom_line(data = plboth$CNbins, aes(x = idx, y = -loss), col = &quot;#28536C&quot;, size = pcawglinesize), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8)) clonal_pcawg Figure 3.3: Landscape at CCF &gt; 95% with PCAWG 3.3.2 Subclonal frequencies Now I’ll generate the same plot but using CCF &gt; 1% as a cutoff. datgain &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;gain_rare&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) cgains &lt;- datgain %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), guide = guide_axis(check.overlap = TRUE), limits = c(pl$minidx, pl$maxidx)) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;#550000&quot;), labels = c(&quot;Gain&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + guides(guide = ggplot2::guide_axis(check.overlap = TRUE)) datloss &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loss_rare&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) closs &lt;- datloss %&gt;% ggplot(aes(x = idx, y = -frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), guide = guide_axis(check.overlap = TRUE), limits = c(pl$minidx, pl$maxidx), position = &quot;top&quot;) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;#28536C&quot;), labels = c(&quot;Loss&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, -0.5, -1), labels = c(&quot;0&quot;, &quot;0.5&quot;, &quot;1.0&quot;), limits = c(-1, 0)) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.title = element_blank()) + guides(guide = ggplot2::guide_axis(check.overlap = TRUE)) datloh &lt;- pl$CNbins %&gt;% pivot_longer(cols = contains(&quot;_&quot;), names_to = &quot;type&quot;, values_to = &quot;frequency&quot;) %&gt;% filter(type == &quot;loh_rare&quot;) %&gt;% arrange(type, chr, start) %&gt;% mutate(x = rleid(frequency)) %&gt;% add_count(x) %&gt;% mutate(frequency = ifelse(is.na(frequency) &amp; n &gt; 10, 0, frequency)) %&gt;% fill(frequency, .direction = &quot;updown&quot;) cloh &lt;- datloh %&gt;% ggplot(aes(x = idx, y = frequency)) + geom_area(alpha = alphaval, position = filltype, aes(fill = type)) + ggplot2::scale_x_continuous(breaks = pl$chrticks, labels = pl$chrlabels, expand = c(0, 0), limits = c(pl$minidx, pl$maxidx), guide = guide_axis(check.overlap = TRUE), position = &quot;bottom&quot;) + ggplot2::xlab(&quot;Chromosome&quot;) + ggplot2::ylab(&quot;&quot;) + cowplot::theme_cowplot() + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + scale_fill_manual(values = c(&quot;Grey70&quot;), labels = c(&quot;LOH&quot;)) + scale_y_continuous(expand = c(0, 0), breaks = c(0, 0.5, 1), limits = c(0, 1)) + theme(axis.title.x = element_blank(), axis.text.x = element_text(vjust = -1.2), legend.title = element_blank()) + ggplot2::geom_vline(xintercept = pl$chrbreaks, col = &quot;grey90&quot;, alpha = 0.75) + theme(axis.title.x = element_blank(), axis.text.x = element_blank(), axis.ticks.x = element_blank()) title &lt;- ggdraw() + draw_label( &quot;CCF &gt; 1%&quot;, fontface = &#39;bold&#39;, x = 0.01, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) rare &lt;- cowplot::plot_grid( title, cloh + theme(legend.position = &quot;none&quot;), cgains + theme(legend.position = &quot;none&quot;)+ ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = &quot;none&quot;), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8)) rare Figure 3.4: Landscape at CCF &gt; 1% Now with PCAWG. rare_pcawg &lt;- cowplot::plot_grid(title, cloh + theme(legend.position = &quot;none&quot;) + geom_line(data = plboth$CNbins, aes(x = idx, y = loh), col = &quot;Grey50&quot;, size = pcawglinesize), cgains + theme(legend.position = &quot;none&quot;) + geom_line(data = plboth$CNbins, aes(x = idx, y = gain), col = &quot;#550000&quot;, size = pcawglinesize) + ylab(&quot;Cohort fraction&quot;), closs + theme(legend.position = &quot;none&quot;) + geom_line(data = plboth$CNbins, aes(x = idx, y = -loss), col = &quot;#28536C&quot;, size = pcawglinesize), align = &quot;v&quot;, axis = &quot;lr&quot;, ncol = 1, rel_heights = c(0.1, 0.8, 1, 0.8)) rare_pcawg Figure 3.5: Landscape at CCF &gt; 1% with PCAWG 3.4 Correlation analysis As can be seen from the plots above the clonal landscape plot looks more similar to the PCAWG cohort than when we include any alteration &gt; 1%. To quantify these observations, I’ll now compute the correlation between these landscapes as a function of CCF. library(broom) # CCF frequency cutoff to use freqs &lt;- c(0, 0.01, 0.025, 0.05, seq(0.1, 1, 0.1)) df_corr &lt;- data.frame() plotsboth &lt;- list() plotscor &lt;- list() plboth_orig &lt;- plboth plboth$CNbins &lt;- plboth$CNbins %&gt;% dplyr::rename(gain_pcawg = gain, loss_pcawg = loss, loh_pcawg = loh) for (x in 1:(length(freqs) - 1)) { print(freqs[x]) # compute fraction of cohort that has an event &gt; x CCF per bin plboth_sc &lt;- hscn %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, loh = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(gain = sum(gain &gt;= freqs[x] &amp; gain &gt; 0, na.rm = TRUE)/.N, loss = sum(loss &gt;= freqs[x] &amp; loss &gt; 0, na.rm = TRUE)/.N, loh = sum(loh &gt;= freqs[x] &amp; loh &gt; 0, na.rm = TRUE)/.N), by = .(chr, start, end)] %&gt;% plottinglist_() joint_both &lt;- left_join(plboth$CNbins, plboth_sc$CNbins) joint_both_narm &lt;- left_join(plboth$CNbins, plboth_sc$CNbins) %&gt;% na.omit() gainplot &lt;- joint_both %&gt;% na.omit() %&gt;% sample_n(1000) %&gt;% ggplot(aes(x = gain, y = gain_pcawg)) + geom_point(alpha = 0.5, col = &quot;#550000&quot;) + geom_smooth(method = &quot;lm&quot;, col = &quot;#550000&quot;) + xlab(&quot;scDNAseq Frequency&quot;) + ylab(&quot;PCAWG Frequency&quot;) + cowplot::theme_cowplot() + ylim(c(0, 1)) + xlim(c(0, 1)) lossplot &lt;- joint_both %&gt;% na.omit() %&gt;% sample_n(1000) %&gt;% ggplot(aes(x = loss, y = loss_pcawg)) + geom_point(alpha = 0.5, col = &quot;#28536C&quot;) + geom_smooth(method = &quot;lm&quot;, col = &quot;#28536C&quot;) + xlab(&quot;scDNAseq Frequency&quot;) + ylab(&quot;PCAWG Frequency&quot;) + cowplot::theme_cowplot() + ylim(c(0, 1)) + xlim(c(0, 1)) lohplot &lt;- joint_both %&gt;% na.omit() %&gt;% sample_n(1000) %&gt;% ggplot(aes(x = loh, y = loh_pcawg)) + geom_point(alpha = 0.5, col = &quot;grey40&quot;) + geom_smooth(method = &quot;lm&quot;, col = &quot;grey90&quot;) + xlab(&quot;scDNAseq Frequency&quot;) + ylab(&quot;PCAWG Frequency&quot;) + cowplot::theme_cowplot() + ylim(c(0, 1)) + xlim(c(0, 1)) plotscor[[paste0(&quot;f &gt; &quot;, freqs[x])]] &lt;- list(gainplot = gainplot, lossplot = lossplot, lohplot = lohplot) # compute correlation and entropy df_corr &lt;- bind_rows(df_corr, data.frame(bin = paste0(&quot;(&quot;, freqs[x], &quot;, &quot;, freqs[x + 1], &quot;)&quot;), cutoff = freqs[x], cor_gain = cor(joint_both$gain, joint_both$gain_pcawg, use = &quot;complete.obs&quot;), cor_loss = cor(joint_both$loss, joint_both$loss_pcawg, use = &quot;complete.obs&quot;), cor_loh = cor(joint_both$loh, joint_both$loh_pcawg, use = &quot;complete.obs&quot;), entropy_gain = entropy::entropy(joint_both_narm$gain + 1e-04), entropy_loss = entropy::entropy(joint_both_narm$loss + 1e-04), entropy_loh = entropy::entropy(joint_both_narm$loh + 1e-04), cancertype = &quot;both&quot;)) plotsboth[[x]] &lt;- genplot(plboth_sc, paste0(&quot;CCF &gt; &quot;, freqs[x]), pcawg = plboth_orig) } ## [1] 0 ## [1] 0.01 ## [1] 0.025 ## [1] 0.05 ## [1] 0.1 ## [1] 0.2 ## [1] 0.3 ## [1] 0.4 ## [1] 0.5 ## [1] 0.6 ## [1] 0.7 ## [1] 0.8 ## [1] 0.9 Now I’ll plot the correlation as a function of CCF (pcawgcorr &lt;- df_corr %&gt;% pivot_longer(starts_with(&quot;cor_&quot;), names_to = &quot;type&quot;, values_to = &quot;cor&quot;) %&gt;% ggplot(aes(x = cutoff, y = cor, col = type))+ geom_point() + geom_line() + scale_color_manual(values = c(&quot;#550000&quot;,&quot;grey60&quot;, &quot;#28536C&quot;), labels = c(&quot;Gains&quot;, &quot;LOH&quot;, &quot;Losses&quot;)) + theme_cowplot(line_size = 0.9) + scale_x_continuous(breaks = seq(0.0, 1.0, 0.25), limits = c(0.0, 1.0)) + xlab(&quot;CCF &gt; X&quot;) + #panel_border() + ylab(&quot;Correlation with PCAWG landscape&quot;) + ylim(c(0.5, 0.9)) + #scale_x_log10() + theme_cowplot(font_size = 12) + theme(legend.position = c(0.7, 0.1), legend.title = element_blank())) Figure 3.6: rho as a function of CCF #facet_wrap(~cancertype, ncol = 2)) I also computed the entropy of these distributions. Here we see that the entropy decreases as a function of CCF, intuitively more uniform disributions should have higher entropy so it makes sense that the lower CCF has higher entropy. df_corr %&gt;% pivot_longer(starts_with(&quot;ent&quot;), names_to = &quot;type&quot;, values_to = &quot;cor&quot;) %&gt;% ggplot(aes(x = cutoff, y = cor, col = type)) + geom_point() + geom_line() + scale_color_manual(values = c(&quot;#550000&quot;, &quot;grey60&quot;, &quot;#28536C&quot;), labels = c(&quot;Gains&quot;, &quot;LOH&quot;, &quot;Losses&quot;)) + theme_cowplot(line_size = 0.9) + scale_x_continuous(breaks = seq(0, 1, 0.25), limits = c(0, 1)) + xlab(&quot;CCF &gt; X&quot;) + ylab(&quot;Entropy of distribution&quot;) + # ylim(c(0.2, 1.0)) + scale_x_log10() + theme(legend.position = c(0.7, 0.1), legend.title = element_blank()) + theme(panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 1)) Figure 3.7: Entropy as a function of CCF Here I’ll plot the actual correlation scatter plots. title1 &lt;- ggdraw() + draw_label( &quot;CCF &gt; 1 %&quot;, fontface = &#39;bold&#39;, x = 0.05, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) title2 &lt;- ggdraw() + draw_label( &quot;CCF &gt; 20 %&quot;, fontface = &#39;bold&#39;, x = 0.05, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) title3 &lt;- ggdraw() + draw_label( &quot;CCF &gt; 90 %&quot;, fontface = &#39;bold&#39;, x = 0.05, hjust = 0 ) + theme( # add margin on the left of the drawing canvas, # so title is aligned with left edge of first plot plot.margin = margin(4, 2, 2, 7) ) cowplot::plot_grid(title1, cowplot::plot_grid(plotlist = plotscor$`f &gt; 0.01`, ncol = 3), title2, cowplot::plot_grid(plotlist = plotscor$`f &gt; 0.2`, ncol = 3), title3, cowplot::plot_grid(plotlist = plotscor$`f &gt; 0.9`, ncol = 3), ncol= 1, rel_heights = c(0.1,1,0.1,1,0.1,1)) Figure 3.8: Correlation plots 3.5 Frequency per CCF plot_list &lt;- list(plotsboth[[1]], plotsboth[[5]], plotsboth[[7]], plotsboth[[9]], plotsboth[[13]]) cowplot::plot_grid(plotlist = plot_list, ncol = 1) Figure 3.9: Cohort landscapes as a function of CCF 3.6 TP53 + BRCA snvs Another thing we looked at was the clonality of LOH when we had either a TP53 or BRCA mutation. For the most part 100% of cells were homozygous at these loci. library(tidytext) sampledf &lt;- data.frame(sample = unique(hscn$sample)) %&gt;% mutate(tissue = ifelse(sample %in% config$datagroups$htert, &quot;hTERT&quot;, &quot;TUMOR&quot;)) %&gt;% filter(tissue == &quot;TUMOR&quot;) %&gt;% na.omit(.) sampledf$label &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$label)) sampledf$BRCA1 &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$BRCA1)) sampledf$BRCA2 &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$BRCA2)) sampledf$TP53 &lt;- unlist(lapply(sampledf$sample, function(x) config$datasets[[x]]$TP53)) brca1cn &lt;- gene_copynumber(hscn[sample %in% (filter(sampledf, BRCA1 != FALSE) %&gt;% pull(sample))], &quot;BRCA1&quot;) %&gt;% group_by(sample, ensembl_gene_symbol) %&gt;% summarise(ncells = sum(LOH == &quot;LOH&quot;), fcells = sum(LOH == &quot;LOH&quot;) / n()) TP53cn &lt;- gene_copynumber(hscn[sample %in% (filter(sampledf, TP53 != FALSE) %&gt;% pull(sample))], &quot;TP53&quot;) %&gt;% group_by(sample, ensembl_gene_symbol) %&gt;% summarise(ncells = sum(LOH == &quot;LOH&quot;), fcells = sum(LOH == &quot;LOH&quot;) / n()) forsnvplot &lt;- bind_rows(TP53cn, brca1cn) %&gt;% left_join(sampledf %&gt;% select(sample, TP53, BRCA1) %&gt;% pivot_longer(-sample, names_to = &quot;ensembl_gene_symbol&quot;, values_to = &quot;som_germ&quot;)) %&gt;% mutate(gene = factor(ensembl_gene_symbol, levels = c(&quot;TP53&quot;, &quot;BRCA1&quot;, &quot;BRCA2&quot;))) %&gt;% group_by(gene) %&gt;% mutate(sampleorder = ifelse(som_germ == &quot;Germline&quot;, (1- fcells - 1), 1-fcells)) %&gt;% ungroup() %&gt;% mutate(gene = factor(gene), sample2 = reorder_within(sample, sampleorder, gene, .desc = T)) (gsnv &lt;- forsnvplot %&gt;% ggplot(aes(x = sample2, y = fcells, fill = ensembl_gene_symbol, alpha = som_germ)) + geom_col() + scale_x_discrete() + scale_fill_manual(values = c(&quot;#B02605&quot;, &quot;#135F8C&quot;), name = &quot;Gene&quot;) + xlab(&quot;&quot;) + #&quot;#DB8112&quot;, ylab(&quot;% of cells LOH&quot;) + theme_cowplot(line_size = 0.9, font_size = 10) + scale_alpha_discrete(range = c(0.5, 1), name = &quot;&quot;) + facet_grid(~gene, scales = &quot;free_x&quot;, space = &quot;free_x&quot;) + scale_x_discrete(guide = guide_axis(angle = 45), breaks = forsnvplot$sample2, labels = forsnvplot$sample) + theme( strip.background = element_blank(), strip.text.x = element_blank() )) Figure 3.10: LOH around mutation loci 3.7 Fraction of genome gained I’ll know look what fraction of the genome is altered when we take different CCF cutoffs (95% vs 1%). We find that typically around ~75% of the genome is altered in at least 1% of cells versus more like 20-40% in at least 95% of cells. Note that this does not mean that most cells have 75% of the genome altered, the alterations may be and are indeed likely to be in different cells. plclonal &lt;- hscn %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, gainLOH = sum(state &gt; ploidy &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, lossLOH = sum(state == 2 &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, LOH = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(Gain = sum(gain &gt; 0.95)/.N, Loss = sum(loss &gt; 0.95)/.N, LOH = sum(LOH &gt; 0.95)/.N), by = .(sample)] plsubclonal &lt;- hscn %&gt;% .[!sample %in% config$datagroups$htert] %&gt;% .[, list(gain = sum(state &gt; ploidy, na.rm = TRUE)/.N, gainLOH = sum(state &gt; ploidy &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, loss = sum(state &lt; ploidy, na.rm = TRUE)/.N, lossLOH = sum(state == 2 &amp; LOH == &quot;LOH&quot;, na.rm = TRUE)/.N, LOH = sum(LOH == &quot;LOH&quot;, na.rm = TRUE)/.N), by = .(chr, start, end, sample)] %&gt;% .[, list(Gain = sum(gain &gt; 0.01)/.N, Loss = sum(loss &gt; 0.01)/.N, LOH = sum(LOH &gt; 0.01)/.N), by = .(sample)] (gfrac &lt;- bind_rows(plclonal %&gt;% mutate(x = &quot;&gt;95% cells&quot;), plsubclonal %&gt;% mutate(x = &quot;&gt;1% cells&quot;)) %&gt;% pivot_longer(-c(sample, x)) %&gt;% ggplot(aes(x = name, y = value, fill = x)) + geom_boxplot(alpha = 0.5, width = 0.5, outlier.colour = NA) + geom_jitter(size = 0.5, position = position_jitterdodge(jitter.width = 0.1, jitter.height = 0, dodge.width = 0.5)) + theme_cowplot(font_size = 12) + xlab(&quot;&quot;) + ylab(&quot;Fraction of genome altered&quot;) + theme(legend.title = element_blank(), legend.position = &quot;top&quot;) + scale_fill_manual(values = c(&quot;lightsteelblue4&quot;, &quot;plum4&quot;)) + ylim(c(0, 1))) Figure 3.11: Fraction of genome altered 3.8 Chromosome event rates We also developed an approach to compute chromosome event rates using ancestral state reconstruction on the computed phylogenies. We used this to compare the rates of gains/losses and LOH. For the LOH calculation we don’t want to double count losses so we subtract the event rates of losses that result in a single copy. This gives us the event rate LOH where we end up with multiple copies, so copy neutral LOH and LOH + gains. The units of the rate are the number of events per effective cell division, in other words the per cell division rate scaled by the death rate of cells. It’s possible (perhaps likely) that many cells get chromosomal gains or losses but then die, we of course never sample such cells and this makes direct computation of the event rate per cell challenging. See Werner et al Nat. Comms. for discussion of a related problem. We find an event rate of ~0.05 for gains and losses and ~0.01 for LOH. chrs &lt;- fread(file.path(config$rootdir, &quot;results/corrupt/summary/parsimony_chrchanges.csv&quot;)) chrs %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) ## # A tibble: 3,450 x 8 ## nnodes ncells sample chr totnnodes cn_input type pars_score ## &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 604 1031 2295 1 1635 hscn gain/loss 177 ## 2 604 1031 2295 1 1635 hscn loh 12 ## 3 604 1031 2295 1 1635 hscn gain 93 ## 4 604 1031 2295 1 1635 hscn loss 87 ## 5 604 1031 2295 1 1635 hscn loss1copy 1 ## 6 604 1031 2295 10 1635 hscn gain/loss 164 ## 7 604 1031 2295 10 1635 hscn loh 0 ## 8 604 1031 2295 10 1635 hscn gain 36 ## 9 604 1031 2295 10 1635 hscn loss 130 ## 10 604 1031 2295 10 1635 hscn loss1copy 12 ## # … with 3,440 more rows (gmisseg &lt;- chrs %&gt;% filter(!sample %in% config$datagroups$htert) %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) %&gt;% mutate(f = pars_score/ncells) %&gt;% filter(type %in% c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;)) %&gt;% mutate(type = factor(type, levels = c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;))) %&gt;% group_by(sample, type) %&gt;% summarise(f = mean(f)) %&gt;% ggplot(aes(x = type, y = f, fill = type)) + geom_boxplot(alpha = 0.5, width = 0.5, outlier.colour = NA) + theme_cowplot(font_size = 12) + scale_x_discrete(breaks = c(&quot;gain&quot;, &quot;loss&quot;, &quot;loh&quot;), labels = c(&quot;Gains&quot;, &quot;Losses&quot;, &quot;LOH&quot;)) + xlab(&quot;&quot;) + ylab(&quot;Chromosome arm\\nevent rate&quot;) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;#28536C&quot;, &quot;grey90&quot;)) + geom_jitter(size = 1, width = 0.1, height = 0) + theme(legend.position = &quot;none&quot;) + ylim(c(0, 0.15))) Figure 3.12: Event rate distributions As a sanity check of these inferences, we can look at our engineered cell lines. We’d expect the BRCA1-/- + TP53 -/- mutant to have a higher event rate relative to WT and for the TP53-/- to have an intermediate event rate. This is exactly what we see. htertlabs &lt;- data.frame(sample = config$datagroups$htert) htertlabs$plot_label &lt;- unlist(lapply(htertlabs$sample, function(x) config$datasets[[x]]$plot_label)) chrs %&gt;% filter(sample %in% config$datagroups$htert) %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) %&gt;% left_join(htertlabs) %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% filter(type != &quot;gain/loss&quot;) %&gt;% filter(type != &quot;loss1copy&quot;) %&gt;% mutate(f = pars_score/ncells) %&gt;% group_by(sample, type, plot_label) %&gt;% summarise(f = mean(f)) %&gt;% ggplot(aes(x = fct_reorder(plot_label, f, .desc = T), y = f, fill = type)) + geom_col(position = &quot;dodge&quot;) + ylab(&quot;Event rate&quot;) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;grey70&quot;, &quot;#28536C&quot;)) + scale_x_discrete(guide = guide_axis(angle = 45)) + xlab(&quot;&quot;) Figure 3.13: Event rates per cell line Here are the event rate for each of the tumour samples. Another sanity check here is that SA1142 is a MMRD sample where we would expect minimal CIN, as would be expected this sample has one of the lowest event rates. chrs %&gt;% pivot_wider(names_from = &quot;type&quot;, values_from = &quot;pars_score&quot;) %&gt;% mutate(loh = ifelse(loh - loss1copy &lt; 0, 0, loh - loss1copy)) %&gt;% pivot_longer(names_to = &quot;type&quot;, values_to = &quot;pars_score&quot;, c(&quot;gain/loss&quot;, &quot;loh&quot;, &quot;gain&quot;, &quot;loss&quot;, &quot;loss1copy&quot;)) %&gt;% filter(!sample %in% config$datagroups$htert) %&gt;% # left_join(htertlabs) %&gt;% filter(cn_input == &quot;hscn&quot;) %&gt;% filter(type != &quot;gain/loss&quot;) %&gt;% filter(type != &quot;loss1copy&quot;) %&gt;% mutate(f = pars_score/ncells) %&gt;% group_by(sample, type) %&gt;% summarise(f = mean(f)) %&gt;% ggplot(aes(x = fct_reorder(sample, f, .desc = T), y = f, fill = type)) + geom_col(position = &quot;dodge&quot;) + scale_fill_manual(values = c(&quot;#550000&quot;, &quot;grey70&quot;, &quot;#28536C&quot;)) + scale_x_discrete(guide = guide_axis(angle = 45)) + xlab(&quot;&quot;) Figure 3.14: Event rates per tumour 3.9 Composite figure Now we have all the figures we can generate the final composite figure we included in the paper. leftplot &lt;- cowplot::plot_grid(clonal_pcawg, #subclonal, NULL, rare_pcawg, ncol = 1, rel_heights = c(1.2,0.1, 1.2), labels = c(&quot;a&quot;,&quot;&quot;, &quot;b&quot;)) rightplot &lt;- cowplot::plot_grid( pcawgcorr + theme(legend.position = &quot;none&quot;) + ylab(&quot;Correlation \\n with PCAWG&quot;), NULL, gfrac, NULL, gmisseg, ncol = 1, labels = c(&quot;c&quot;,&quot;&quot;, &quot;d&quot;,&quot;&quot;, &quot;e&quot;), rel_heights = c(1,0.05,1,0.05,1), align = &quot;v&quot;, axis = &quot;l&quot;) comp_fig &lt;- cowplot::plot_grid(leftplot, NULL, rightplot, ncol = 3, rel_widths = c(1.3,0.05, 1)) comp_fig Figure 3.15: Figure 2 "],["figure-4.html", "Section 4 Figure 4 4.1 Load data + packages 4.2 Heatmap 4.3 Phylogenetically ordered heatmap 4.4 Other htert examples", " Section 4 Figure 4 4.1 Load data + packages library(tidyverse) library(devtools) library(cowplot) library(yaml) library(RColorBrewer) library(here) library(yaml) library(glue) library(Seurat) library(data.table) here::i_am(&quot;04-figure4.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) theme_set(theme_cowplot()) hscn &lt;- fread(config$hscn) ploidy &lt;- fread(config$ploidy) hscn &lt;- hscn[ploidy, on = &quot;cell_id&quot;] hscn &lt;- hscn[!is.na(hscn$start)] metrics &lt;- fread(config$metrics) %&gt;% select(cell_id, coverage_breadth, state_mode, sample) %&gt;% arrange(desc(coverage_breadth)) bps &lt;- fread(config$breakpoints) 4.2 Heatmap In this figure we take a detailed look at sample SA1188 which is one of our engineered cell lines witth TP53-/- and BRCA2+/-. In particular we’re interested in chromosome 3 where we see evidence of breakage fusion bridge processes. First of all we’ll cluster the cells using the copy number in chromosome 3q. source(here(&quot;src/bfb_events_util.R&quot;)) # get chr 3 hscn_sa1888 &lt;- hscn[sample == &quot;SA1188&quot; &amp; chr == 3 &amp; start &gt; 9.1e+07] state4 &lt;- hscn_sa1888[, list(x = sum(state == 4)), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) hscn_sa1888 &lt;- hscn_sa1888[cell_id %in% (state4[x == 0] %&gt;% .$cell_id)] cl &lt;- umap_clustering(hscn_sa1888, field = &quot;copy&quot;, umapmetric = &quot;correlation&quot;, minPts = 30, min_dist = 0.1, seed = 123) Now I’ll generate a heatmap of this chromosome. sa1188chr3 &lt;- makeheatmap(hscn_sa1888, plottitle = &quot;SA1188 chr 3q&quot;, showlegend = F, show_clone_label = T, cl = cl) plot_grid(sa1188chr3) Now I’ll generate average copy number profiles and merged SV counts per clone. hscn_sa1888_clones &lt;- consensuscopynumber(hscn[sample == &quot;SA1188&quot;], cl = cl$clustering) %&gt;% mutate(cell_id = paste0(&quot;Cluster &quot;, cell_id)) highamp &lt;- hscn[sample == &quot;SA1188&quot; &amp; chr == &quot;3&quot;] %&gt;% group_by(cell_id) %&gt;% mutate(maxstate = sum(state &gt; 4)) %&gt;% ungroup() %&gt;% filter(maxstate &gt; 7 &amp; maxstate &lt; 26) %&gt;% group_by(chr, start, end) %&gt;% consensuscopynumber(.) %&gt;% mutate(cell_id = &quot;Amp&quot;) hscn[sample == &quot;SA1188&quot; &amp; chr == &quot;3&quot;] %&gt;% group_by(cell_id) %&gt;% mutate(maxstate = sum(state &gt; 4)) %&gt;% ungroup() %&gt;% filter(maxstate &gt; 7 &amp; maxstate &lt; 26) %&gt;% pull(cell_id) %&gt;% unique(.) %&gt;% length() ## [1] 19 bpsclones &lt;- bps %&gt;% filter(str_detect(sample, &quot;SA1188&quot;)) %&gt;% left_join(cl$clustering) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type, strand_1, strand_2, clone_id) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;Cluster &quot;, clone_id)) Much of the variability here can be explained by BFB, below is a diagram of BFB cycles. bfb &lt;- ggdraw() + draw_image(here(&quot;diagrams/bfb.png&quot;), scale = 1) + theme(plot.margin = margin(0, -10, 0, -10)) bfb To look into this in a bit more detail I’ll plot the copy number profiles with SV for some of these clusters. xpos &lt;- 0.3 ypos &lt;- 0.27 dcell2 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster C&quot;, curvature = curve, adj = 0, addlabel = TRUE, svlims = c(0, 2), ylimlab = c(6, 5, 4), xlimlab = c(NA, 250)) ## [1] &quot;Cluster C&quot; ## [1] 51845 (dcell2_im &lt;- ggdraw() + draw_plot(dcell2) + draw_image(here(&quot;diagrams/bfb_loss_small.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos)) dcell1 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster F&quot;, adj = 0, addlabel = FALSE, svlims = c(0, 2), ylimlab = c(6, 5, 4), xlimlab = c(NA, 250)) ## [1] &quot;Cluster F&quot; ## [1] 51845 (dcell1_im &lt;- ggdraw() + draw_plot(dcell1) + draw_image(here(&quot;diagrams/bfb_gain1.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcell2a1 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster J&quot;, svlims = c(0, 2)) ## [1] &quot;Cluster J&quot; ## [1] 51845 (dcell2a1_im &lt;- ggdraw() + draw_plot(dcell2a1) + draw_image(here(&quot;diagrams/bfb_gain2.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcell2a2 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster A&quot;, curvature = curve, svlims = c(0, 2)) ## [1] &quot;Cluster A&quot; ## [1] 51845 (dcell2a2_im &lt;- ggdraw() + draw_plot(dcell2a2) + draw_image(here(&quot;diagrams/bfb_gain2.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcellextraloss &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster D&quot;, curvature = curve, svlims = c(0, 2)) ## [1] &quot;Cluster D&quot; ## [1] 51845 (dcellextraloss_im &lt;- ggdraw() + draw_plot(dcellextraloss) + draw_image(here(&quot;diagrams/bfb_loss_large.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcellhigh &lt;- getplothomolog(highamp, bpsclones, clone = &quot;Amp&quot;, curvature = curve, title = &quot;PIK3CA Amplification&quot;, svlims = c(0, 2)) ## [1] &quot;Amp&quot; ## [1] 308 (dcellhigh_im &lt;- ggdraw() + draw_plot(dcellhigh) + draw_image(here(&quot;diagrams/bfb_gain3.png&quot;), width = 0.25, height = 0.15, x = xpos, y = ypos + 0.2)) Now we’ll merge all these plots together to create the final figure, but first we need to grab the legends. ASlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = F, returnlist = T)$BAF + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele\\nImbalance&quot;, ncol = 1, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, ncol = 2, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) mylegends &lt;- plot_grid(NULL, cnlegend, NULL, ASlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 0.3, 1, 0.2)) leg &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, curvature = curve, retleg = T, ncol_legend = 1, svlims = c(0, 2)) ## NULL ## [1] 51845 top &lt;- cowplot::plot_grid(bfb, sa1188chr3, NULL, mylegends, ncol = 4, labels = c(&quot;a&quot;, &quot;b&quot;), rel_widths = c(1, 1.3, 0.05, 0.2)) middle &lt;- cowplot::plot_grid(dcell2_im, dcell1_im, dcell2a1_im, dcell2a2_im, dcellextraloss_im, dcellhigh_im, NULL, leg, ncol = 8, labels = c(&quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;), rel_widths = c(1, 1, 1, 1, 1, 1, 0.1, 0.8)) gall &lt;- cowplot::plot_grid(top, middle, ncol = 1, labels = c(&quot;&quot;, &quot;&quot;), rel_heights = c(1.7, 1.25)) gall Figure 4.1: Figure 4 4.3 Phylogenetically ordered heatmap We can also compare the ordering to a phylogenetically orderd heatmap library(ape) source(here(&quot;src/tree_utils.R&quot;)) tree &lt;- get_and_format_tree(&quot;SA1188&quot;) tree &lt;- keep.tip(tree, cl$clustering$cell_id) hm &lt;- plotHeatmap(hscn[sample == &quot;SA1188&quot;], tree = tree, clusters = cl$clustering, show_library_label = F) hmchr &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hm, ht_gap = unit(0.6, &quot;cm&quot;), column_title = &quot;&quot;, column_title_gp = gpar(fontsize = 12), heatmap_legend_side = &quot;bottom&quot;, annotation_legend_side = &quot;bottom&quot;, show_heatmap_legend = TRUE), width = 40, height = 13/3) plot_grid(hmchr) 4.4 Other htert examples 4.4.1 MYC SA906a myc &lt;- gene_copynumber(hscn[sample == &quot;SA906a&quot;], &quot;MYC&quot;) %&gt;% filter(copy &gt; 7) cells &lt;- hscn[cell_id %in% myc$cell_id] %&gt;% pull(cell_id) %&gt;% unique(.) hscn_clones &lt;- hscn[cell_id %in% cells] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;8&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cells) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;8&quot;) hm1 &lt;- makeheatmap(hscn[sample == &quot;SA906a&quot; &amp; chr == 8 &amp; ploidy == 2], plottitle = &quot;SA906a chr8&quot;, showlegend = F, show_clone_label = T, clustfield = &quot;BAF&quot;) dcell_myc &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;8&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster C&quot;) ## [1] &quot;SA906a (267 cells)&quot; ## [1] 224 plot_grid(hm1, dcell_myc, ncol = 1, rel_heights = c(1, 0.3)) 4.4.2 SA906b chr20 cellschr20 &lt;- hscn[sample == &quot;SA906b&quot; &amp; chr == &quot;20&quot; &amp; ploidy == 2] %&gt;% .[, list(x = sum(state &gt; 4)/.N), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) %&gt;% filter(x &gt; 0) %&gt;% pull(cell_id) hscn_clones &lt;- hscn[cell_id %in% cellschr20] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;20&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cellschr20) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;20&quot;) hm2 &lt;- makeheatmap(hscn[sample == &quot;SA906b&quot; &amp; chr == 20 &amp; ploidy == 2], plottitle = &quot;SA906b chr20&quot;, showlegend = F, show_clone_label = T, clustfield = &quot;BAF&quot;, minPts = 100) dcell_chr20 &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;20&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster C&quot;) ## [1] &quot;SA906b (699 cells)&quot; ## [1] 103 plot_grid(hm2, dcell_chr20, ncol = 1, rel_heights = c(1, 0.3)) 4.4.3 SA906b chr22 cellschr22 &lt;- hscn[sample == &quot;SA906b&quot; &amp; chr == &quot;22&quot; &amp; ploidy == 2] %&gt;% .[, list(x = sum(state &gt; 2)/.N), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) %&gt;% filter(x &gt; 0) %&gt;% pull(cell_id) hscn_clones &lt;- hscn[cell_id %in% cellschr22] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;22&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cellschr22) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;22&quot;) cells &lt;- sample(unique(hscn[sample == &quot;SA906b&quot; &amp; chr == 22 &amp; ploidy == 2]$cell_id), 1000) # cl &lt;- umap_clustering(hscn[sample == &#39;SA906b&#39; &amp; chr == 22 &amp; ploidy == 2], field # = &#39;copy&#39;, minPts = 200) hm3 &lt;- makeheatmap(hscn[sample == &#39;SA906b&#39; &amp; chr == 22 # &amp; ploidy == 2], plottitle = &#39;SA906b chr22&#39;, showlegend = F, show_clone_label = # T, cl = cl) cl &lt;- umap_clustering(hscn[cell_id %in% cells][chr == &quot;22&quot;], field = &quot;BAF&quot;, minPts = 50) hm3 &lt;- makeheatmap(hscn[cell_id %in% cells][chr == &quot;22&quot;], plottitle = &quot;SA906b chr22&quot;, showlegend = F, show_clone_label = T, cl = cl) dcell_chr22 &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;22&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster B&quot;) ## [1] &quot;SA906b (187 cells)&quot; ## [1] 51 plot_grid(hm3, dcell_chr22, ncol = 1, rel_heights = c(1, 0.3)) 4.4.4 Legends ASlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = F, returnlist = T)$BAF + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele Imbalance&quot;, ncol = 1, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) homlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = T) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 5, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) bpsum &lt;- bps %&gt;% filter(sample == &quot;SA1049&quot;) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 3) svlegend &lt;- get_legend(plotSV(bpsum, legend.position = &quot;right&quot;, font_size = 11)) mylegends &lt;- plot_grid(NULL, cnlegend, ASlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 1, 0.2)) mylegends2 &lt;- plot_grid(NULL, svlegend, homlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 1, 0.2)) 4.4.5 Merged figure gall &lt;- cowplot::plot_grid(cowplot::plot_grid(hm1, hm2, hm3, mylegends, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), ncol = 4, rel_widths = c(1, 1, 1, 0.5)), cowplot::plot_grid(dcell_myc, dcell_chr20, dcell_chr22, mylegends2, ncol = 4, rel_widths = c(1, 1, 1, 0.5)), NULL, ncol = 1, rel_heights = c(1, 0.75, 0.05)) gall Figure 4.2: hTERT examples "],["phylogenetic-trees.html", "Section 5 Phylogenetic trees 5.1 Load data + packages 5.2 Heatmaps", " Section 5 Phylogenetic trees 5.1 Load data + packages We’ll first load some packages and the data from the OV2295 cell lines. library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) library(ape) here::i_am(&quot;01-figure1.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) hscn &lt;- fread(config$hscn) source(here(&quot;src/heatmaps.R&quot;)) source(here(&quot;src/tree_utils.R&quot;)) alldatasets &lt;- unique(hscn$sample) 5.2 Heatmaps for (dataset in alldatasets) { # cat(&#39;\\n \\n&#39;) cat(paste0(&#39;### Sample &#39;, dataset, &#39;\\n&#39;)) print(createfigure(dataset)) cat(&quot;\\n \\n&quot;) } "]]
