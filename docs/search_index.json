[["index.html", "Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Section 1 Introduction", " Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Marc J. Williams 2021-05-11 Section 1 Introduction "],["figure-1.html", "Section 2 Figure 1 2.1 Load data + packages 2.2 Stats 2.3 Single cell example 2.4 SNVs 2.5 BAF violin 2.6 Heatmaps 2.7 Main Figure 2.8 RNA vs DNA", " Section 2 Figure 1 2.1 Load data + packages We’ll first load some packages and the data from the OV2295 cell lines. library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) here::i_am(&quot;01-figure1.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) OV2295 &lt;- readRDS(file.path(glue(&quot;{config$Rdatadir}2295.Rdata&quot;))) metrics &lt;- fread(config$metrics) 2.2 Stats Now we’ll look at some general stats, like coveraget per cell etc. Here’s the quantiles of coverage depth per cell in the OV2295 dataset. quantile(OV2295$CNVmetrics$coverage_depth, c(0.025, 0.05, 0.5, 0.95, 0.975)) ## 2.5% 5% 50% 95% 97.5% ## 0.04214450 0.06990785 0.16244150 0.30273730 0.31527105 From the metrics file we can sampletags &lt;- data.frame(sample = unique(metrics$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$label &lt;- unlist(lapply(sampletags$sample, function(x) str_replace(config$datasets[[x]]$label, &quot;\\\\s[0-9].*&quot;, &quot;&quot;))) sampletags$BRCA1 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA1)) sampletags$BRCA2 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA2)) sampletags$TP53 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$TP53)) stats &lt;- metrics[, `:=`(htert, ifelse(sample %in% config$datagroups$htert, &quot;hTERT Cell line&quot;, &quot;Tumour&quot;))] %&gt;% filter(!sample %in% c(&quot;SA1101a&quot;, &quot;SA1101b&quot;)) %&gt;% .[, list(ncells = length(unique(cell_id)), cov = median(coverage_depth), cov_cilow = quantile(coverage_depth, 0.025), cov_cihigh = quantile(coverage_depth, 0.975), nsamples = length(unique(sample_id))), by = c(&quot;sample&quot;, &quot;htert&quot;)] %&gt;% left_join(sampletags) knitr::kable(stats) sample htert ncells cov cov_cilow cov_cihigh nsamples datagroup label BRCA1 BRCA2 TP53 2295 Tumour 1031 0.1773930 0.0602885 0.3189845 3 hgsc HGSC Cell Line FALSE FALSE Somatic SA039 hTERT Cell line 1783 0.0483640 0.0167971 0.1187053 1 htert WT FALSE FALSE FALSE SA906a hTERT Cell line 2627 0.0356010 0.0056566 0.0767704 1 htert TP53-/- FALSE FALSE Somatic SA906b hTERT Cell line 4396 0.0320535 0.0095255 0.0706241 1 htert TP53-/- FALSE FALSE Somatic SA1188 hTERT Cell line 1206 0.0400485 0.0115776 0.1020980 1 htert BRCA2+/- TP53-/- FALSE FALSE Somatic SA1055 hTERT Cell line 381 0.0713240 0.0365780 0.1011020 1 htert BRCA2-/- TP53-/- FALSE Somatic Somatic SA1056 hTERT Cell line 344 0.0463070 0.0079656 0.0728373 1 htert BRCA2-/- TP53-/- FALSE Somatic Somatic SA1054 hTERT Cell line 360 0.0640140 0.0367508 0.0914934 1 htert BRCA1-/- TP53-/- Somatic FALSE Somatic SA501 Tumour 2265 0.0454120 0.0092172 0.1944410 7 tnbc HRD-Dup Germline FALSE Somatic SA530 Tumour 294 0.0536250 0.0286400 0.0941010 1 tnbc FBI FALSE FALSE Somatic SA532 Tumour 2080 0.0405005 0.0136756 0.1918656 8 her2_brca FALSE FALSE Somatic SA535 Tumour 1690 0.0539370 0.0161717 0.1028884 5 tnbc HRD-Dup Somatic FALSE Somatic SA604 Tumour 1986 0.0469510 0.0219107 0.1123130 6 tnbc FBI FALSE FALSE Somatic SA609 Tumour 4214 0.0316245 0.0112894 0.1041397 10 tnbc FBI (trt for prev. disease) FALSE FALSE Somatic SA1035 Tumour 2439 0.0327620 0.0136206 0.1131067 6 tnbc APOBEC Germline FALSE Somatic SA1047 Tumour 335 0.0946800 0.0347132 0.1725915 1 hgsc TD FALSE FALSE Somatic SA1049 Tumour 1149 0.0838010 0.0429708 0.1910808 2 hgsc FBI FALSE FALSE Somatic SA1050 Tumour 488 0.0929435 0.0353335 0.1916958 3 hgsc HRD-Dup Somatic FALSE Germline SA1051 Tumour 843 0.0811540 0.0261629 0.1710035 2 hgsc HRD-Dup FALSE FALSE Somatic SA1052 Tumour 366 0.0978930 0.0249373 0.1545596 2 hgsc HRD-Dup Germline FALSE Somatic SA1053 Tumour 697 0.0547340 0.0213614 0.1241570 3 hgsc HRD-Dup FALSE FALSE Somatic SA1091 Tumour 472 0.0630495 0.0321782 0.1123712 1 hgsc L-Del FALSE FALSE Somatic SA1093 Tumour 325 0.0713920 0.0308796 0.1131110 1 hgsc TD FALSE FALSE Somatic SA1096 Tumour 246 0.0585295 0.0349121 0.0942208 1 hgsc FBI FALSE FALSE Somatic SA1142 Tumour 1981 0.0299960 0.0119560 0.0704315 2 tnbc L-Del FALSE FALSE FALSE SA1162 Tumour 96 0.0732770 0.0150470 0.2044646 2 hgsc FBI FALSE FALSE Somatic SA1181 Tumour 309 0.0443250 0.0189489 0.0923189 1 hgsc HRD-Dup FALSE FALSE Somatic SA1182 Tumour 181 0.1295050 0.0605150 0.2166730 1 hgsc FBI FALSE FALSE Somatic SA1184 Tumour 380 0.0435360 0.0185266 0.1042234 1 hgsc HRD-Dup FALSE FALSE Somatic DG1134 Tumour 63 0.0524290 0.0310586 0.0632035 1 hgsc FBI FALSE FALSE Somatic DG1197 Tumour 49 0.0430680 0.0295400 0.0621844 1 hgsc FBI Somatic FALSE Somatic 2.3 Single cell example Here is an example allele specific copy number profile from a single cell. cells &lt;- OV2295$CNVmetrics %&gt;% arrange(desc(coverage_breadth)) %&gt;% filter(coverage_breadth &lt; 0.1) celldat &lt;- plotCNprofileBAF(OV2295$ascn$data %&gt;% filter(state_phase != &quot;B-LOH&quot;), y_axis_trans = &quot;squashy&quot;, maxCN = 20, cellid = cells$cell_id[5], pointsize = 0.6, returnlist = TRUE) BAFcolpal &lt;- scCNphase_cols()[c(1, 3, 5)] legends &lt;- cowplot::plot_grid(NULL, get_legend(celldat$CN + theme_cowplot(font_size = 12, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), get_legend(celldat$BAF + theme_cowplot(font_size = 12) + guides(col = guide_legend(&quot;ASCN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), NULL, ncol = 4, rel_widths = c(0.1, 1, 1, 4)) (gcell &lt;- cowplot::plot_grid(celldat$BAF + theme(legend.position = &quot;none&quot;), celldat$CN + theme(legend.position = &quot;none&quot;) + ggplot2::scale_y_continuous(breaks = c(0, 2, 5, 10, 20), limits = c(0, 24), trans = &quot;squashy&quot;), cowplot::plot_grid(legends, NULL, ncol = 1, rel_heights = c(1, 0.5)), align = &quot;v&quot;, ncol = 1, rel_heights = c(1, 1, 0.22))) 2.4 SNVs To confirm that the allele specific inference is accurate we looked at single nucleotide variant allele frequencies per allele specific copy number state. Here, I’ll read in the SNV data and map the SNVs to allele specific states. snv &lt;- snv_states(select(OV2295$SNVCN, chr, start, ref, alt, cell_id, ref_counts, alt_counts) %&gt;% mutate(end = start), OV2295$ascn$data) %&gt;% na.omit() %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) blacklist &lt;- fread(&quot;data/dlp_snv_blacklist.csv&quot;) snv_summary &lt;- snv %&gt;% group_by(state_AS_phased, state, chr, start, ref, alt, LOH, Maj, Min, sample_id) %&gt;% summarise(ref_counts = sum(ref_counts), alt_counts = sum(alt_counts)) %&gt;% ungroup() %&gt;% mutate(totcounts = alt_counts + ref_counts) %&gt;% mutate(type = case_when(Maj == Min ~ &quot;Balanced&quot;, Min == 0 ~ &quot;LOH&quot;, Min != Maj ~ &quot;Unbalanced&quot;)) %&gt;% mutate(VAF = alt_counts/(totcounts)) %&gt;% group_by(chr, start, ref) %&gt;% mutate(n_sample_id = length(unique(sample_id))) %&gt;% ungroup() %&gt;% left_join(., OV2295$SNVannot) %&gt;% filter(max_strelka_score &gt; 20 &amp; max_museq_score &gt; 0.9) %&gt;% filter(!start %in% blacklist$start) %&gt;% filter(!is.na(mappability)) Now we can plot the distributions. library(ggridges) dfdata &lt;- data.frame(type = c(&quot;Balanced&quot;, &quot;LOH&quot;, &quot;Unbalanced&quot;,&quot;Unbalanced&quot;,&quot;Unbalanced&quot;,&quot;Unbalanced&quot;), x = c(0.5, 1.0, 1/3, 2/3, 1/4, 3/4)) dfdata &lt;- data.frame(type = c(&quot;Balanced&quot;, &quot;LOH&quot;), x = c(0.5, 1.0)) dat_text &lt;- data.frame(type = c(&quot;Unbalanced&quot;, &quot;Unbalanced&quot;), label = c(&quot;Early&quot;, &quot;Late&quot;), x = c(0.85, 0.15)) x &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% #filter(clone_id == &quot;D&quot;) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 200) %&gt;% #filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 50) (gVAF &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% #filter(clone_id == &quot;D&quot;) %&gt;% filter(is_dbsnp == 0, mappability &gt; 0.99) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 100) %&gt;% #filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 100) %&gt;% ggplot(aes(fill = type, col = type)) + #geom_density_ridges(scale = 2, alpha = 0.3, stat = &quot;binline&quot;, bins = 50) + geom_density_ridges(aes(y = state_AS_phased, x = VAF), scale = 2, alpha = 0.3) + theme_ridges(center_axis_labels = TRUE) + geom_vline(data = dfdata, aes(xintercept = x), lty = 2, col = &quot;grey40&quot;) + scale_x_continuous(breaks = c(0.0, 0.5, 1.0)) + scale_color_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + scale_fill_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + xlab(&quot;Variant allele frequency (somatic mutations)&quot;) + ylab(&quot;Allele specific state&quot;) + facet_wrap(~type, scales = &quot;free_y&quot;) + panel_border() + theme(legend.position = &quot;none&quot;) + geom_text(data = dat_text, aes(label = label, x = x, y = 9.3), col = &quot;black&quot;)) 2.5 BAF violin Another sanity check is to plot the BAF distribution per state. gBAF &lt;- plotBAFperstate(OV2295$hscn$data %&gt;% filter(phase != &quot;B&quot;, state &gt; 0), maxstate = 10, minfrac = 0) + scale_y_continuous(limits = c(0, 0.75), breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(legend.position = &quot;none&quot;) + xlab(&quot;Allele specific state&quot;) gBAF 2.6 Heatmaps Now I’ll plot the heatmaps. library(grid) library(ComplexHeatmap) source(here(&quot;src/tree_utils.R&quot;)) chroms &lt;- unique(OV2295$hscn$data$chr) chroms &lt;- chroms[!chroms %in% c(&quot;14&quot;, &quot;16&quot;, &quot;18&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;)] mysample &lt;- &quot;2295&quot; tree &lt;- get_and_format_tree(&quot;2295&quot;) ## [1] &quot;2295&quot; tree &lt;- ape::compute.brlen(tree, 1) mycl &lt;- data.frame(cell_id = tree$tip.label, clone_id = &quot;0&quot;) cndat &lt;- OV2295$ascn$data hm_state &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state&quot;, sample_label_idx = 1, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = FALSE, clusters = mycl, normalize_tree = FALSE, plottree = TRUE, plotfrequency = FALSE, ) hm_copy &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;copy&quot;, sample_label_idx = 2, #library_mapping = lab_mapping, show_library_label = FALSE, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF2 &lt;- plotHeatmap( OV2295$hscn$data, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAFraw &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;BAF&quot;, sample_label_idx = 2, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) w = 40 h = 13/3 hm &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hm_state + hm_BAF, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) cowplot::plot_grid(hm) 2.7 Main Figure Here I’ll contruct the final figure used in the paper. library(cowplot) library(grid) library(ComplexHeatmap) top1 &lt;- cowplot::plot_grid(gcell, labels = c(&quot;a&quot;)) top2 &lt;- cowplot::plot_grid(gBAF, gVAF, labels = c(&quot;b&quot;, &quot;c&quot;)) w = 40 h = 13/3 hm_cowp &lt;- cowplot::plot_grid(NULL, hm, rel_widths = c(0.04, 1), labels = c(&quot;d&quot;, &quot;&quot;)) gall &lt;- cowplot::plot_grid(top1, top2, hm_cowp, ncol = 1) gall 2.8 RNA vs DNA rna &lt;- fread(&quot;/work/shah/william1/projects/scRNAseq_AS/results/ASinference/perpatient_dp/2295.csv.gz&quot;) rnacells &lt;- rna %&gt;% group_by(cell_id) %&gt;% summarise(x = sum(total)) %&gt;% arrange(desc(x)) hmrna &lt;- plotHeatmapBAF(rna %&gt;% filter(cell_id %in% rnacells$cell_id[1:2000]), arms = unique(rna$chrarm)) chrarm &lt;- schnapps::per_chrarm_cn(OV2295$hscn$data, arms = unique(rna$chrarm)) hmdna &lt;- plotHeatmapBAF(OV2295$hscn$data, arms = unique(rna$chrarm)) hm_dnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmdna, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) hm_rnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmrna, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) grnahmps &lt;- plot_grid(NULL, hm_dnag, NULL, hm_rnag, ncol = 1, labels = c(&quot;a DNA&quot;,&quot;&quot;, &quot;b RNA&quot;), rel_heights = c(0.1, 1, 0.1, 1)) grnahmps seur &lt;- readRDS(glue(&quot;{config$rna}ASinference/perpatient_combined/2295-seurat.Rdata&quot;)) cell_sample_rna &lt;- seur@meta.data cell_sample_rna$cell_id &lt;- row.names(cell_sample_rna) cell_sample_rna &lt;- select(cell_sample_rna, cell_id, sample) rna &lt;- rna %&gt;% left_join(cell_sample_rna) dna_baf &lt;- chrarm dna_baf &lt;- dna_baf %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) %&gt;% rename(sample = sample_id) dfbaf_joint &lt;- bind_rows(dna_baf %&gt;% mutate(dtype = &quot;DNA&quot;), rna %&gt;% mutate(dtype = &quot;RNA&quot;)) dfbaf_join_summary &lt;- dfbaf_joint %&gt;% filter(total &gt; 9) %&gt;% group_by(chrarm, dtype, sample) %&gt;% summarise(total = mean(total), BAF = median(BAF)) %&gt;% pivot_wider(names_from = &quot;dtype&quot;, values_from = c(&quot;BAF&quot;, &quot;total&quot;)) corrplot &lt;- dfbaf_join_summary %&gt;% filter(chrarm != &quot;X&quot;, !is.na(sample)) %&gt;% # filter(total_RNA &gt; 10) %&gt;% ggplot(aes(x = BAF_DNA, y = BAF_RNA)) + geom_point(aes(col = sample)) + xlab(&quot;Median BAF per chr \\n (DNA)&quot;) + ylab(&quot;Median BAF per chr \\n (RNA)&quot;) + geom_abline(lty = 2) + theme_cowplot() + scale_color_manual(values = c(&quot;plum4&quot;, &quot;firebrick3&quot;, &quot;deepskyblue2&quot;)) + theme(legend.title = element_blank(), legend.position = c(0.25, 0.8)) #+geom_smooth(method = &#39;lm&#39;) gall &lt;- plot_grid(grnahmps, plot_grid(NULL, corrplot, NULL, rel_heights = c(0.4, 1, 0.4), ncol = 1, labels = c(&quot;&quot;, &quot;c&quot;)), ncol = 2, rel_widths = c(1, 0.5)) gall "]]
