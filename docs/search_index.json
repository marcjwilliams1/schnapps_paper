[["index.html", "Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Section 1 Foreword 1.1 Data 1.2 Computing requirements", " Evolutionary tracking of allele-specific cancer haplotypes at single-cell resolution Marc J. Williams 2021-05-18 Section 1 Foreword This document contains code to fully reproduce the figures of our paper: “Paper title”. Each “chapter” is associated with a main figure in the paper and will produce that figure and any supplementary tables or figures. 1.1 Data The analysis contained here starts from a set of processed results which include: allele specific copy number per cell in 500Kb bins across the genome (output from schnapps) snv counts per cell phylogenetic trees allele imbalance in scRNA (inferred from schnapps) cell and sample metadata You can download these results from here and see the pipeline that generate these results here. 1.2 Computing requirements Most of the heavy lifting has been done in the pre-processing so computing requirements are not too onerous. However, some of the data files are very large and so you will need a computer with a reasonably large amount of RAM. 50Gb or so should be fine. "],["figure-1.html", "Section 2 Figure 1 2.1 Load data + packages 2.2 Summary stats 2.3 Single cell example 2.4 SNVs 2.5 BAF distributions 2.6 Heatmaps 2.7 Main Figure 2.8 RNA vs DNA", " Section 2 Figure 1 2.1 Load data + packages We’ll first load some packages and the data from the OV2295 cell lines. library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) here::i_am(&quot;01-figure1.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) OV2295 &lt;- readRDS(file.path(glue(&quot;{config$Rdatadir}2295.Rdata&quot;))) metrics &lt;- fread(config$metrics) 2.2 Summary stats Now we’ll look at some general stats, like coveraget per cell etc. Here’s the quantiles of coverage depth per cell in the OV2295 dataset. quantile(OV2295$CNVmetrics$coverage_depth, c(0.025, 0.05, 0.5, 0.95, 0.975)) ## 2.5% 5% 50% 95% 97.5% ## 0.04214450 0.06990785 0.16244150 0.30273730 0.31527105 From the metrics file we can pull out the average coverage per sample, we’ll also add the mutation status of TP53, BRCA1 and BRCA2. sampletags &lt;- data.frame(sample = unique(metrics$sample)) %&gt;% left_join(., stack(config$datagroups) %&gt;% rename(sample = values, datagroup = ind) %&gt;% filter(datagroup %in% c(&quot;htert&quot;, &quot;tnbc&quot;, &quot;hgsc&quot;, &quot;her2_brca&quot;))) %&gt;% na.omit() sampletags$label &lt;- unlist(lapply(sampletags$sample, function(x) str_replace(config$datasets[[x]]$label, &quot;\\\\s[0-9].*&quot;, &quot;&quot;))) sampletags$BRCA1 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA1)) sampletags$BRCA2 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$BRCA2)) sampletags$TP53 &lt;- unlist(lapply(sampletags$sample, function(x) config$datasets[[x]]$TP53)) stats &lt;- metrics[, `:=`(htert, ifelse(sample %in% config$datagroups$htert, &quot;hTERT Cell line&quot;, &quot;Tumour&quot;))] %&gt;% filter(!sample %in% c(&quot;SA1101a&quot;, &quot;SA1101b&quot;)) %&gt;% .[, list(ncells = length(unique(cell_id)), cov = median(coverage_depth), cov_cilow = quantile(coverage_depth, 0.025), cov_cihigh = quantile(coverage_depth, 0.975), nsamples = length(unique(sample_id))), by = c(&quot;sample&quot;, &quot;htert&quot;)] %&gt;% left_join(sampletags) stats %&gt;% mutate(Coverage = paste0(round(cov, 3), &quot; (&quot;, round(cov_cilow, 3), &quot;,&quot;, round(cov_cihigh, 3), &quot;)&quot;)) %&gt;% mutate(genotype = ifelse(htert != &quot;Tumour&quot;, label, &quot;&quot;)) %&gt;% mutate(datagroup = toupper(datagroup)) %&gt;% mutate(Timeseries = &quot;No&quot;) %&gt;% select(sample, htert, datagroup, nsamples, ncells, Coverage, genotype, TP53, BRCA1, BRCA2) %&gt;% rename(Sample = sample, datatype = htert, Histotype = datagroup, Samples = nsamples, Cells = ncells, Genotype = genotype) %&gt;% DT::datatable(., extensions = &quot;FixedColumns&quot;, options = list(scrollX = TRUE, fixedColumns = list(leftColumns = 1))) 2.3 Single cell example Here is an example allele specific copy number profile from a single cell. cells &lt;- OV2295$CNVmetrics %&gt;% arrange(desc(coverage_breadth)) %&gt;% filter(coverage_breadth &lt; 0.1) celldat &lt;- plotCNprofileBAF(OV2295$ascn$data %&gt;% filter(state_phase != &quot;B-LOH&quot;), y_axis_trans = &quot;squashy&quot;, maxCN = 20, cellid = cells$cell_id[5], pointsize = 0.6, returnlist = TRUE) BAFcolpal &lt;- scCNphase_cols()[c(1, 3, 5)] legends &lt;- cowplot::plot_grid(NULL, get_legend(celldat$CN + theme_cowplot(font_size = 12, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), get_legend(celldat$BAF + theme_cowplot(font_size = 12) + guides(col = guide_legend(&quot;ASCN&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))), NULL, ncol = 4, rel_widths = c(0.1, 1, 1, 4)) (gcell &lt;- cowplot::plot_grid(celldat$BAF + theme(legend.position = &quot;none&quot;), celldat$CN + theme(legend.position = &quot;none&quot;) + ggplot2::scale_y_continuous(breaks = c(0, 2, 5, 10, 20), limits = c(0, 24), trans = &quot;squashy&quot;), cowplot::plot_grid(legends, NULL, ncol = 1, rel_heights = c(1, 0.5)), align = &quot;v&quot;, ncol = 1, rel_heights = c(1, 1, 0.22))) Figure 2.1: Single cell example 2.4 SNVs To confirm that the allele specific inference is accurate we looked at single nucleotide variant allele frequencies per allele specific copy number state. Here, I’ll read in the SNV data and map the SNVs to allele specific states. snv &lt;- snv_states(select(OV2295$SNVCN, chr, start, ref, alt, cell_id, ref_counts, alt_counts) %&gt;% mutate(end = start), OV2295$ascn$data) %&gt;% na.omit() %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) blacklist &lt;- fread(&quot;data/dlp_snv_blacklist.csv&quot;) snv_summary &lt;- snv %&gt;% group_by(state_AS_phased, state, chr, start, ref, alt, LOH, Maj, Min, sample_id) %&gt;% summarise(ref_counts = sum(ref_counts), alt_counts = sum(alt_counts)) %&gt;% ungroup() %&gt;% mutate(totcounts = alt_counts + ref_counts) %&gt;% mutate(type = case_when(Maj == Min ~ &quot;Balanced&quot;, Min == 0 ~ &quot;LOH&quot;, Min != Maj ~ &quot;Unbalanced&quot;)) %&gt;% mutate(VAF = alt_counts/(totcounts)) %&gt;% group_by(chr, start, ref) %&gt;% mutate(n_sample_id = length(unique(sample_id))) %&gt;% ungroup() %&gt;% left_join(., OV2295$SNVannot) %&gt;% filter(max_strelka_score &gt; 20 &amp; max_museq_score &gt; 0.9) %&gt;% filter(!start %in% blacklist$start) %&gt;% filter(!is.na(mappability)) Now we can plot the distributions. library(ggridges) dfdata &lt;- data.frame(type = c(&quot;Balanced&quot;, &quot;LOH&quot;, &quot;Unbalanced&quot;,&quot;Unbalanced&quot;,&quot;Unbalanced&quot;,&quot;Unbalanced&quot;), x = c(0.5, 1.0, 1/3, 2/3, 1/4, 3/4)) dfdata &lt;- data.frame(type = c(&quot;Balanced&quot;, &quot;LOH&quot;), x = c(0.5, 1.0)) dat_text &lt;- data.frame(type = c(&quot;Unbalanced&quot;, &quot;Unbalanced&quot;), label = c(&quot;Early&quot;, &quot;Late&quot;), x = c(0.85, 0.15)) x &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% #filter(clone_id == &quot;D&quot;) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 200) %&gt;% #filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 50) (gVAF &lt;- snv_summary %&gt;% filter(n_sample_id == 3) %&gt;% #filter(clone_id == &quot;D&quot;) %&gt;% filter(is_dbsnp == 0, mappability &gt; 0.99) %&gt;% group_by(state_AS_phased, sample_id) %&gt;% mutate(n = n()) %&gt;% ungroup() %&gt;% filter(state &lt; 10 &amp; state &gt; 0, totcounts &gt; 19, n &gt; 100) %&gt;% #filter(VAF &gt; 0.1) %&gt;% mutate(LOH = ifelse(LOH == &quot;LOH&quot;, &quot;YES&quot;, LOH)) %&gt;% add_count(state_AS_phased) %&gt;% filter(nn &gt; 100) %&gt;% ggplot(aes(fill = type, col = type)) + #geom_density_ridges(scale = 2, alpha = 0.3, stat = &quot;binline&quot;, bins = 50) + geom_density_ridges(aes(y = state_AS_phased, x = VAF), scale = 2, alpha = 0.3) + theme_ridges(center_axis_labels = TRUE) + geom_vline(data = dfdata, aes(xintercept = x), lty = 2, col = &quot;grey40&quot;) + scale_x_continuous(breaks = c(0.0, 0.5, 1.0)) + scale_color_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + scale_fill_manual(values = c(&quot;grey40&quot;, &quot;#025767&quot;, &quot;#53AFC0&quot;)) + xlab(&quot;Variant allele frequency (somatic mutations)&quot;) + ylab(&quot;Allele specific state&quot;) + facet_wrap(~type, scales = &quot;free_y&quot;) + panel_border() + theme(legend.position = &quot;none&quot;) + geom_text(data = dat_text, aes(label = label, x = x, y = 9.3), col = &quot;black&quot;)) Figure 2.2: VAF distributions per allele specific state for OV2295 2.5 BAF distributions Another sanity check is to plot the BAF distribution per state. gBAF &lt;- plotBAFperstate(OV2295$hscn$data %&gt;% filter(phase != &quot;B&quot;, state &gt; 0), maxstate = 10, minfrac = 0) + scale_y_continuous(limits = c(0, 0.75), breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7)) + theme(legend.position = &quot;none&quot;) + xlab(&quot;Allele specific state&quot;) gBAF Figure 2.3: BAF distributions per allele specific state for OV2295 2.6 Heatmaps Now I’ll plot the heatmaps. library(grid) library(ComplexHeatmap) source(here(&quot;src/tree_utils.R&quot;)) chroms &lt;- unique(OV2295$hscn$data$chr) chroms &lt;- chroms[!chroms %in% c(&quot;14&quot;, &quot;16&quot;, &quot;18&quot;, &quot;19&quot;, &quot;21&quot;, &quot;22&quot;)] mysample &lt;- &quot;2295&quot; tree &lt;- get_and_format_tree(&quot;2295&quot;) tree &lt;- ape::compute.brlen(tree, 1) mycl &lt;- data.frame(cell_id = tree$tip.label, clone_id = &quot;0&quot;) cndat &lt;- OV2295$ascn$data hm_state &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state&quot;, sample_label_idx = 1, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = FALSE, clusters = mycl, normalize_tree = FALSE, plottree = TRUE, plotfrequency = FALSE, ) hm_copy &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;copy&quot;, sample_label_idx = 2, #library_mapping = lab_mapping, show_library_label = FALSE, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAF2 &lt;- plotHeatmap( OV2295$hscn$data, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;state_BAF&quot;, sample_label_idx = 1, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) hm_BAFraw &lt;- plotHeatmap(cndat, chrlabels = chroms, spacer_cols = 10, tree = tree, plotcol = &quot;BAF&quot;, sample_label_idx = 2, show_library_label = FALSE, #library_mapping = lab_mapping, show_clone_label = FALSE, reorderclusters = TRUE, clusters = mycl, normalize_tree = FALSE, plottree = FALSE, plotfrequency = FALSE, ) w = 40 h = 13/3 hm &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hm_state + hm_BAF, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) cowplot::plot_grid(hm) Figure 2.4: Heatmaps for OV2295 ordered by phylogeny 2.7 Main Figure Here I’ll contruct the final figure used in the paper. library(cowplot) library(grid) library(ComplexHeatmap) top1 &lt;- cowplot::plot_grid(gcell, labels = c(&quot;a&quot;)) top2 &lt;- cowplot::plot_grid(gBAF, gVAF, labels = c(&quot;b&quot;, &quot;c&quot;)) w = 40 h = 13/3 hm_cowp &lt;- cowplot::plot_grid(NULL, hm, rel_widths = c(0.04, 1), labels = c(&quot;d&quot;, &quot;&quot;)) gall &lt;- cowplot::plot_grid(top1, top2, hm_cowp, ncol = 1) gall Figure 2.5: Figure 1 2.8 RNA vs DNA rna &lt;- fread(&quot;/work/shah/william1/projects/scRNAseq_AS/results/ASinference/perpatient_dp/2295.csv.gz&quot;) rnacells &lt;- rna %&gt;% group_by(cell_id) %&gt;% summarise(x = sum(total)) %&gt;% arrange(desc(x)) hmrna &lt;- plotHeatmapBAF(rna %&gt;% filter(cell_id %in% rnacells$cell_id[1:2000]), arms = unique(rna$chrarm)) chrarm &lt;- schnapps::per_chrarm_cn(OV2295$hscn$data, arms = unique(rna$chrarm)) hmdna &lt;- plotHeatmapBAF(OV2295$hscn$data, arms = unique(rna$chrarm)) hm_dnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmdna, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) hm_rnag &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hmrna, ht_gap = unit(0.6, &quot;cm&quot;), #column_title = &quot;Chr20&quot;, #column_title_gp = gpar(fontsize = 20), heatmap_legend_side = &quot;right&quot;, annotation_legend_side = &quot;right&quot;, show_heatmap_legend = TRUE), width = w, height = h) grnahmps &lt;- plot_grid(NULL, hm_dnag, NULL, hm_rnag, ncol = 1, labels = c(&quot;a DNA&quot;,&quot;&quot;, &quot;b RNA&quot;), rel_heights = c(0.1, 1, 0.1, 1)) seur &lt;- readRDS(glue(&quot;{config$rna}ASinference/perpatient_combined/2295-seurat.Rdata&quot;)) cell_sample_rna &lt;- seur@meta.data cell_sample_rna$cell_id &lt;- row.names(cell_sample_rna) cell_sample_rna &lt;- select(cell_sample_rna, cell_id, sample) rna &lt;- rna %&gt;% left_join(cell_sample_rna) dna_baf &lt;- chrarm dna_baf &lt;- dna_baf %&gt;% left_join(select(OV2295$CNVmetrics, sample_id, cell_id)) %&gt;% rename(sample = sample_id) dfbaf_joint &lt;- bind_rows(dna_baf %&gt;% mutate(dtype = &quot;DNA&quot;), rna %&gt;% mutate(dtype = &quot;RNA&quot;)) dfbaf_join_summary &lt;- dfbaf_joint %&gt;% filter(total &gt; 9) %&gt;% group_by(chrarm, dtype, sample) %&gt;% summarise(total = mean(total), BAF = median(BAF)) %&gt;% pivot_wider(names_from = &quot;dtype&quot;, values_from = c(&quot;BAF&quot;, &quot;total&quot;)) corrplot &lt;- dfbaf_join_summary %&gt;% filter(chrarm != &quot;X&quot;, !is.na(sample)) %&gt;% # filter(total_RNA &gt; 10) %&gt;% ggplot(aes(x = BAF_DNA, y = BAF_RNA)) + geom_point(aes(col = sample)) + xlab(&quot;Median BAF per chr \\n (DNA)&quot;) + ylab(&quot;Median BAF per chr \\n (RNA)&quot;) + geom_abline(lty = 2) + theme_cowplot() + scale_color_manual(values = c(&quot;plum4&quot;, &quot;firebrick3&quot;, &quot;deepskyblue2&quot;)) + theme(legend.title = element_blank(), legend.position = c(0.25, 0.8)) #+geom_smooth(method = &#39;lm&#39;) gall &lt;- plot_grid(grnahmps, plot_grid(NULL, corrplot, NULL, rel_heights = c(0.4, 1, 0.4), ncol = 1, labels = c(&quot;&quot;, &quot;c&quot;)), ncol = 2, rel_widths = c(1, 0.5)) gall Figure 2.6: Comparison of allele imbalance in RNA vs DNA "],["figure-4.html", "Section 3 Figure 4 3.1 Load data + packages 3.2 Heatmap 3.3 Phylogenetically ordered heatmap 3.4 Other htert examples", " Section 3 Figure 4 3.1 Load data + packages knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE) library(tidyverse) library(devtools) library(cowplot) library(yaml) library(RColorBrewer) library(here) library(yaml) library(glue) library(Seurat) library(data.table) here::i_am(&quot;04-figure4.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) theme_set(theme_cowplot()) hscn &lt;- fread(config$hscn) ploidy &lt;- fread(config$ploidy) hscn &lt;- hscn[ploidy, on = &quot;cell_id&quot;] hscn &lt;- hscn[!is.na(hscn$start)] metrics &lt;- fread(config$metrics) %&gt;% select(cell_id, coverage_breadth, state_mode, sample) %&gt;% arrange(desc(coverage_breadth)) bps &lt;- fread(config$breakpoints) 3.2 Heatmap In this figure we take a detailed look at sample SA1188 which is one of our engineered cell lines witth TP53-/- and BRCA2+/-. In particular we’re interested in chromosome 3 where we see evidence of breakage fusion bridge processes. First of all we’ll cluster the cells using the copy number in chromosome 3q. source(here(&quot;src/bfb_events_util.R&quot;)) # get chr 3 hscn_sa1888 &lt;- hscn[sample == &quot;SA1188&quot; &amp; chr == 3 &amp; start &gt; 9.1e+07] state4 &lt;- hscn_sa1888[, list(x = sum(state == 4)), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) hscn_sa1888 &lt;- hscn_sa1888[cell_id %in% (state4[x == 0] %&gt;% .$cell_id)] cl &lt;- umap_clustering(hscn_sa1888, field = &quot;copy&quot;, umapmetric = &quot;correlation&quot;, minPts = 30, min_dist = 0.1, seed = 123) Now I’ll generate a heatmap of this chromosome. sa1188chr3 &lt;- makeheatmap(hscn_sa1888, plottitle = &quot;SA1188 chr 3q&quot;, showlegend = F, show_clone_label = T, cl = cl) plot_grid(sa1188chr3) Now I’ll generate average copy number profiles and merged SV counts per clone. hscn_sa1888_clones &lt;- consensuscopynumber(hscn[sample == &quot;SA1188&quot;], cl = cl$clustering) %&gt;% mutate(cell_id = paste0(&quot;Cluster &quot;, cell_id)) highamp &lt;- hscn[sample == &quot;SA1188&quot; &amp; chr == &quot;3&quot;] %&gt;% group_by(cell_id) %&gt;% mutate(maxstate = sum(state &gt; 4)) %&gt;% ungroup() %&gt;% filter(maxstate &gt; 7 &amp; maxstate &lt; 26) %&gt;% group_by(chr, start, end) %&gt;% consensuscopynumber(.) %&gt;% mutate(cell_id = &quot;Amp&quot;) hscn[sample == &quot;SA1188&quot; &amp; chr == &quot;3&quot;] %&gt;% group_by(cell_id) %&gt;% mutate(maxstate = sum(state &gt; 4)) %&gt;% ungroup() %&gt;% filter(maxstate &gt; 7 &amp; maxstate &lt; 26) %&gt;% pull(cell_id) %&gt;% unique(.) %&gt;% length() ## [1] 19 bpsclones &lt;- bps %&gt;% filter(str_detect(sample, &quot;SA1188&quot;)) %&gt;% left_join(cl$clustering) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type, strand_1, strand_2, clone_id) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;Cluster &quot;, clone_id)) Much of the variability here can be explained by BFB, below is a diagram of BFB cycles. bfb &lt;- ggdraw() + draw_image(here(&quot;diagrams/bfb.png&quot;), scale = 1) + theme(plot.margin = margin(0, -10, 0, -10)) bfb To look into this in a bit more detail I’ll plot the copy number profiles with SV for some of these clusters. xpos &lt;- 0.3 ypos &lt;- 0.27 dcell2 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster C&quot;, curvature = curve, adj = 0, addlabel = TRUE, svlims = c(0, 2), ylimlab = c(6, 5, 4), xlimlab = c(NA, 250)) ## [1] &quot;Cluster C&quot; ## [1] 51845 (dcell2_im &lt;- ggdraw() + draw_plot(dcell2) + draw_image(here(&quot;diagrams/bfb_loss_small.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos)) dcell1 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster F&quot;, adj = 0, addlabel = FALSE, svlims = c(0, 2), ylimlab = c(6, 5, 4), xlimlab = c(NA, 250)) ## [1] &quot;Cluster F&quot; ## [1] 51845 (dcell1_im &lt;- ggdraw() + draw_plot(dcell1) + draw_image(here(&quot;diagrams/bfb_gain1.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcell2a1 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster J&quot;, svlims = c(0, 2)) ## [1] &quot;Cluster J&quot; ## [1] 51845 (dcell2a1_im &lt;- ggdraw() + draw_plot(dcell2a1) + draw_image(here(&quot;diagrams/bfb_gain2.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcell2a2 &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster A&quot;, curvature = curve, svlims = c(0, 2)) ## [1] &quot;Cluster A&quot; ## [1] 51845 (dcell2a2_im &lt;- ggdraw() + draw_plot(dcell2a2) + draw_image(here(&quot;diagrams/bfb_gain2.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcellextraloss &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, clone = &quot;Cluster D&quot;, curvature = curve, svlims = c(0, 2)) ## [1] &quot;Cluster D&quot; ## [1] 51845 (dcellextraloss_im &lt;- ggdraw() + draw_plot(dcellextraloss) + draw_image(here(&quot;diagrams/bfb_loss_large.png&quot;), width = 0.2, height = 0.2, x = xpos, y = ypos + 0.2)) dcellhigh &lt;- getplothomolog(highamp, bpsclones, clone = &quot;Amp&quot;, curvature = curve, title = &quot;PIK3CA Amplification&quot;, svlims = c(0, 2)) ## [1] &quot;Amp&quot; ## [1] 308 (dcellhigh_im &lt;- ggdraw() + draw_plot(dcellhigh) + draw_image(here(&quot;diagrams/bfb_gain3.png&quot;), width = 0.25, height = 0.15, x = xpos, y = ypos + 0.2)) Now we’ll merge all these plots together to create the final figure, but first we need to grab the legends. ASlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = F, returnlist = T)$BAF + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele\\nImbalance&quot;, ncol = 1, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, ncol = 2, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) mylegends &lt;- plot_grid(NULL, cnlegend, NULL, ASlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 0.3, 1, 0.2)) leg &lt;- getplothomolog(hscn_sa1888_clones, bpsclones, curvature = curve, retleg = T, ncol_legend = 1, svlims = c(0, 2)) ## NULL ## [1] 51845 top &lt;- cowplot::plot_grid(bfb, sa1188chr3$hm, NULL, mylegends, ncol = 4, labels = c(&quot;a&quot;, &quot;b&quot;), rel_widths = c(1, 1.3, 0.05, 0.2)) middle &lt;- cowplot::plot_grid(dcell2_im, dcell1_im, dcell2a1_im, dcell2a2_im, dcellextraloss_im, dcellhigh_im, NULL, leg, ncol = 8, labels = c(&quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;), rel_widths = c(1, 1, 1, 1, 1, 1, 0.1, 0.8)) gall &lt;- cowplot::plot_grid(top, middle, ncol = 1, labels = c(&quot;&quot;, &quot;&quot;), rel_heights = c(1.7, 1.25)) gall Figure 3.1: Figure 4 3.3 Phylogenetically ordered heatmap We can also compare the ordering to a phylogenetically orderd heatmap library(ape) source(here(&quot;src/tree_utils.R&quot;)) tree &lt;- get_and_format_tree(&quot;SA1188&quot;) tree &lt;- keep.tip(tree, cl$clustering$cell_id) hm &lt;- plotHeatmap(hscn[sample == &quot;SA1188&quot;], tree = tree, clusters = cl$clustering, show_library_label = F) hmchr &lt;- grid::grid.grabExpr(ComplexHeatmap::draw(hm, ht_gap = unit(0.6, &quot;cm&quot;), column_title = &quot;&quot;, column_title_gp = gpar(fontsize = 12), heatmap_legend_side = &quot;bottom&quot;, annotation_legend_side = &quot;bottom&quot;, show_heatmap_legend = TRUE), width = 40, height = 13/3) plot_grid(hmchr) 3.4 Other htert examples 3.4.1 MYC SA906a myc &lt;- gene_copynumber(hscn[sample == &quot;SA906a&quot;], &quot;MYC&quot;) %&gt;% filter(copy &gt; 7) cells &lt;- hscn[cell_id %in% myc$cell_id] %&gt;% pull(cell_id) %&gt;% unique(.) hscn_clones &lt;- hscn[cell_id %in% cells] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;8&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cells) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;8&quot;) hm1 &lt;- makeheatmap(hscn[sample == &quot;SA906a&quot; &amp; chr == 8 &amp; ploidy == 2], plottitle = &quot;SA906a chr8&quot;, showlegend = F, show_clone_label = T, clustfield = &quot;BAF&quot;) dcell_myc &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906a (&quot;, length(cells), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;8&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster C&quot;) ## [1] &quot;SA906a (267 cells)&quot; ## [1] 224 plot_grid(hm1, dcell_myc, ncol = 1, rel_heights = c(1, 0.3)) 3.4.2 SA906b chr20 cellschr20 &lt;- hscn[sample == &quot;SA906b&quot; &amp; chr == &quot;20&quot; &amp; ploidy == 2] %&gt;% .[, list(x = sum(state &gt; 4)/.N), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) %&gt;% filter(x &gt; 0) %&gt;% pull(cell_id) hscn_clones &lt;- hscn[cell_id %in% cellschr20] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;20&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cellschr20) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;20&quot;) hm2 &lt;- makeheatmap(hscn[sample == &quot;SA906b&quot; &amp; chr == 20 &amp; ploidy == 2], plottitle = &quot;SA906b chr20&quot;, showlegend = F, show_clone_label = T, clustfield = &quot;BAF&quot;, minPts = 100) dcell_chr20 &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906b (&quot;, length(cellschr20), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;20&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster C&quot;) ## [1] &quot;SA906b (699 cells)&quot; ## [1] 103 plot_grid(hm2, dcell_chr20, ncol = 1, rel_heights = c(1, 0.3)) 3.4.3 SA906b chr22 cellschr22 &lt;- hscn[sample == &quot;SA906b&quot; &amp; chr == &quot;22&quot; &amp; ploidy == 2] %&gt;% .[, list(x = sum(state &gt; 2)/.N), by = &quot;cell_id&quot;] %&gt;% arrange(desc(x)) %&gt;% filter(x &gt; 0) %&gt;% pull(cell_id) hscn_clones &lt;- hscn[cell_id %in% cellschr22] %&gt;% group_by(chr, start, end) %&gt;% summarise(state = schnapps:::Mode(state), state_min = schnapps:::Mode(state_min), BAF = median(BAF), state_phase = schnapps:::Mode(state_phase), state_AS_phased = schnapps:::Mode(state_phase), state_BAF = schnapps:::Mode(state_BAF), copy = median(copy)) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;)) %&gt;% filter(chr == &quot;22&quot;) bpsclones &lt;- bps %&gt;% filter(cell_id %in% cellschr22) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 0) %&gt;% ungroup() %&gt;% mutate(cell_id = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;)) %&gt;% filter(chromosome_1 == &quot;22&quot;) cells &lt;- sample(unique(hscn[sample == &quot;SA906b&quot; &amp; chr == 22 &amp; ploidy == 2]$cell_id), 1000) # cl &lt;- umap_clustering(hscn[sample == &#39;SA906b&#39; &amp; chr == 22 &amp; ploidy == 2], field # = &#39;copy&#39;, minPts = 200) hm3 &lt;- makeheatmap(hscn[sample == &#39;SA906b&#39; &amp; chr == 22 # &amp; ploidy == 2], plottitle = &#39;SA906b chr22&#39;, showlegend = F, show_clone_label = # T, cl = cl) cl &lt;- umap_clustering(hscn[cell_id %in% cells][chr == &quot;22&quot;], field = &quot;BAF&quot;, minPts = 50) hm3 &lt;- makeheatmap(hscn[cell_id %in% cells][chr == &quot;22&quot;], plottitle = &quot;SA906b chr22&quot;, showlegend = F, show_clone_label = T, cl = cl) dcell_chr22 &lt;- getplothomolog(hscn_clones, bpsclones, clone = paste0(&quot;SA906b (&quot;, length(cellschr22), &quot; cells)&quot;), genes = &quot;MYC&quot;, mybreaks = c(0, 2, 5, 10, 20), svlims = c(0, 2), addlabel = TRUE, chrfilt = &quot;22&quot;, y_axis_trans = &quot;squashy&quot;, maxCN = 24, addlegend = F, ncol_legend = 4, alphaval = 0.5, title = &quot;Cluster B&quot;) ## [1] &quot;SA906b (187 cells)&quot; ## [1] 51 plot_grid(hm3, dcell_chr22, ncol = 1, rel_heights = c(1, 0.3)) 3.4.4 Legends ASlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = F, returnlist = T)$BAF + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele Imbalance&quot;, ncol = 1, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) homlegend &lt;- get_legend(plotCNprofileBAF(hscn, homolog = T) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;Allele&quot;, nrow = 3, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) cnlegend &lt;- get_legend(plotCNprofile(hscn) + theme_cowplot(font_size = 11, rel_small = 1) + guides(col = guide_legend(&quot;CN&quot;, nrow = 5, override.aes = list(alpha = 1, size = 2.5, shape = 15)))) bpsum &lt;- bps %&gt;% filter(sample == &quot;SA1049&quot;) %&gt;% group_by(sample, chromosome_1, position_1, chromosome_2, position_2, type, rearrangement_type) %&gt;% summarise(read_count = sum(read_count)) %&gt;% filter(read_count &gt; 3) svlegend &lt;- get_legend(plotSV(bpsum, legend.position = &quot;right&quot;, font_size = 11)) mylegends &lt;- plot_grid(NULL, cnlegend, ASlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 1, 0.2)) mylegends2 &lt;- plot_grid(NULL, svlegend, homlegend, NULL, ncol = 1, rel_heights = c(0.2, 1, 1, 0.2)) 3.4.5 Merged figure gall &lt;- cowplot::plot_grid(cowplot::plot_grid(hm1, hm2, hm3, mylegends, labels = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), ncol = 4, rel_widths = c(1, 1, 1, 0.5)), cowplot::plot_grid(dcell_myc, dcell_chr20, dcell_chr22, mylegends2, ncol = 4, rel_widths = c(1, 1, 1, 0.5)), NULL, ncol = 1, rel_heights = c(1, 0.75, 0.05)) gall Figure 3.2: hTERT examples "],["phylogenetic-trees.html", "Section 4 Phylogenetic trees 4.1 Load data + packages 4.2 Heatmaps", " Section 4 Phylogenetic trees 4.1 Load data + packages We’ll first load some packages and the data from the OV2295 cell lines. library(tidyverse) library(devtools) library(data.table) library(cowplot) library(yaml) library(glue) library(here) library(ape) here::i_am(&quot;01-figure1.Rmd&quot;) config &lt;- read_yaml(here(&quot;metadata&quot;, &quot;config.yaml&quot;)) load_all(config$schnapps) load_all(config$scgenomutils) hscn &lt;- fread(config$hscn) source(here(&quot;src/heatmaps.R&quot;)) source(here(&quot;src/tree_utils.R&quot;)) alldatasets &lt;- unique(hscn$sample) 4.2 Heatmaps for (dataset in alldatasets) { cat(paste0(&quot;### Sample &quot;, dataset, &quot;\\n&quot;)) print(createfigure(dataset)) cat(&quot;\\n \\n&quot;) } 4.2.1 Sample 2295 4.2.2 Sample SA039 4.2.3 Sample SA906a 4.2.4 Sample SA906b 4.2.5 Sample SA1101a 4.2.6 Sample SA1101b 4.2.7 Sample SA1188 4.2.8 Sample SA1055 4.2.9 Sample SA1056 4.2.10 Sample SA1054 4.2.11 Sample SA501 4.2.12 Sample SA530 4.2.13 Sample SA532 4.2.14 Sample SA535 4.2.15 Sample SA604 4.2.16 Sample SA609 4.2.17 Sample SA1035 4.2.18 Sample SA1047 4.2.19 Sample SA1049 4.2.20 Sample SA1050 4.2.21 Sample SA1051 4.2.22 Sample SA1052 4.2.23 Sample SA1053 4.2.24 Sample SA1091 4.2.25 Sample SA1093 4.2.26 Sample SA1096 4.2.27 Sample SA1142 4.2.28 Sample SA1162 4.2.29 Sample SA1181 4.2.30 Sample SA1182 4.2.31 Sample SA1184 4.2.32 Sample DG1134 4.2.33 Sample DG1197 "]]
